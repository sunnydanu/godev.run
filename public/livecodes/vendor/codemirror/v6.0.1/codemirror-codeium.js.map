{
  "version": 3,
  "sources": ["../../../../../node_modules/@valtown/codemirror-codeium/src/plugin.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/completionDecoration.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/effects.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/config.ts", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/message.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/scalar.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/extensions.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/extension-accessor.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/reflect.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/is-message.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/json-format.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/names.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/field.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/private/field-normalize.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/proto3.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/proto2.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/proto-double.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/service-type.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/descriptor_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/create-descriptor-set.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/timestamp_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/duration_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/any_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/empty_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/field_mask_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/struct_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/wrappers_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/create-registry-from-desc.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/compiler/plugin_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/source_context_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/type_pb.js", "../../../../../node_modules/@bufbuild/protobuf/dist/esm/google/protobuf/api_pb.js", "../../../../../node_modules/@valtown/codemirror-codeium/src/api/proto/exa/codeium_common_pb/codeium_common_pb.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/defaultCycleWidget.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/completionRequester.ts", "../../../../../node_modules/@connectrpc/connect/dist/esm/code.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/code-string.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/connect-error.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/http-headers.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/any-client.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/envelope.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/async-iterable.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/promise-client.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/signals.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/context-values.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-grpc/gen/status_pb.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/create-method-url.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/normalize.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/interceptor.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/serialization.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/content-type.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/error-json.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/end-stream.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/headers.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/http-status.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/trailer-mux.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/version.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/request-header.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/validate-response.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol-connect/get-request.js", "../../../../../node_modules/@connectrpc/connect/dist/esm/protocol/run-call.js", "../../../../../node_modules/@valtown/codemirror-codeium/src/api/proto/exa/language_server_pb/language_server_pb.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/api/proto/exa/language_server_pb/language_server_connect.ts", "../../../../../node_modules/@connectrpc/connect-web/dist/esm/assert-fetch-api.js", "../../../../../node_modules/@connectrpc/connect-web/dist/esm/connect-transport.js", "../../../../../node_modules/@valtown/codemirror-codeium/src/codeium.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/annotations.ts", "../../../../../node_modules/@valtown/codemirror-codeium/src/commands.ts", "../../../../../src/livecodes/editor/codemirror/codemirror-codeium.ts"],
  "sourcesContent": ["import { EditorView, keymap, type ViewUpdate } from \"@codemirror/view\";\nimport { type Extension, Prec } from \"@codemirror/state\";\nimport { completionDecoration } from \"./completionDecoration.js\";\nimport { completionRequester } from \"./completionRequester.js\";\nimport {\n  sameKeyCommand,\n  rejectSuggestionCommand,\n  acceptSuggestionCommand,\n  nextSuggestionCommand,\n} from \"./commands.js\";\nimport {\n  type CodeiumConfig,\n  type CodeiumOtherDocumentsConfig,\n  codeiumConfig,\n  codeiumOtherDocumentsConfig,\n} from \"./config.js\";\nimport { Language } from \"./api/proto/exa/codeium_common_pb/codeium_common_pb.js\";\nimport { copilotIgnore } from \"./annotations.js\";\n\n/**\n * Clicking a completion accepts it. This figures out\n * whether a given click event is within the completion's area.\n */\nfunction isDecorationClicked(view: EditorView): boolean {\n  let inRange = false;\n  const head = view.state.selection.asSingle().ranges.at(0)?.head;\n  const stateField = view.state.field(completionDecoration);\n  if (head !== undefined && stateField) {\n    stateField.decorations?.between(head, head, () => {\n      inRange = true;\n    });\n    return inRange;\n  }\n  return false;\n}\n\n/**\n * Handles the behavior in which if you have a completion like\n *\n * foo|bar\n *\n * (the cursor is at |) and you type an x, it rejects\n * the completion because that isn't part of the suggested\n * code.\n */\nfunction completionPlugin() {\n  return EditorView.domEventHandlers({\n    keydown(event, view) {\n      // Ideally, we handle infighting between\n      // the nextSuggestionCommand and this handler\n      // by using precedence, but I can't get that to work\n      // yet.\n      if (event.key === \"]\" && event.ctrlKey) {\n        return false;\n      }\n      if (\n        event.key !== \"Shift\" &&\n        event.key !== \"Control\" &&\n        event.key !== \"Alt\" &&\n        event.key !== \"Meta\"\n      ) {\n        return sameKeyCommand(view, event.key);\n      }\n      return false;\n    },\n    mouseup(event, view) {\n      const target = event.target as HTMLElement;\n      if (\n        target.nodeName === \"BUTTON\" &&\n        target.dataset.action === \"codeium-cycle\"\n      ) {\n        nextSuggestionCommand(view);\n        event.stopPropagation();\n        event.preventDefault();\n        return true;\n      }\n      if (isDecorationClicked(view)) {\n        return acceptSuggestionCommand(view);\n      }\n      return rejectSuggestionCommand(view);\n    },\n  });\n}\n\n/**\n * Next completion map\n */\nfunction nextCompletionPlugin() {\n  return keymap.of([\n    {\n      key: \"Ctrl-]\",\n      run: nextSuggestionCommand,\n    },\n  ]);\n}\n\n/**\n * Changing the editor's focus - blurring it by clicking outside -\n * rejects the suggestion\n */\nfunction viewCompletionPlugin() {\n  return EditorView.updateListener.of((update) => {\n    if (update.focusChanged) {\n      rejectSuggestionCommand(update.view);\n    }\n  });\n}\n\nexport {\n  Language,\n  copilotIgnore,\n  codeiumConfig,\n  codeiumOtherDocumentsConfig,\n  nextSuggestionCommand,\n  type CodeiumOtherDocumentsConfig,\n  type CodeiumConfig,\n};\n\n/**\n * A combination of configuration, the keymap, the\n * requester - as a composite extension for simplicity.\n */\nexport function copilotPlugin(config: CodeiumConfig): Extension {\n  return [\n    codeiumConfig.of(config),\n    completionDecoration,\n    Prec.highest(nextCompletionPlugin()),\n    Prec.highest(viewCompletionPlugin()),\n    Prec.high(completionPlugin()),\n    completionRequester(),\n  ];\n}\n\n/**\n * Returns false if this ViewUpdate is just the plugin\n * adding or removing ghost text, and it should not be\n * considered when saving this CodeMirror state into other\n * systems, like draft recovery.\n */\nexport function shouldTakeUpdate(update: ViewUpdate) {\n  for (const tr of update.transactions) {\n    if (tr.annotation(copilotIgnore) !== undefined) {\n      return false;\n    }\n  }\n  return true;\n}\n", "import {\n  StateField,\n  type EditorState,\n  type Transaction,\n} from \"@codemirror/state\";\nimport { Decoration, EditorView } from \"@codemirror/view\";\nimport {\n  addSuggestions,\n  acceptSuggestion,\n  clearSuggestion,\n} from \"./effects.js\";\nimport type { CompletionState } from \"./types.js\";\nimport { codeiumConfig } from \"./config.js\";\n\nconst ghostMark = Decoration.mark({ class: \"cm-ghostText\" });\n\n/**\n * Note that the completion _text_ is not actually a decoration!\n * The text is very real, and actually inserted into the editor.\n * The completion decoration is just a decoration that matches\n * the same range as the completion text, and changes how it looks.\n */\nexport const completionDecoration = StateField.define<CompletionState>({\n  create(_state: EditorState) {\n    return null;\n  },\n  update(state: CompletionState, transaction: Transaction) {\n    const config = transaction.state.facet(codeiumConfig);\n    for (const effect of transaction.effects) {\n      if (effect.is(addSuggestions)) {\n        const { changeSpecs, index } = effect.value;\n\n        // NOTE: here we're adjusting the decoration range\n        // to refer to locations in the document _after_ we've\n        // inserted the text.\n        const ranges = changeSpecs[index]!.map((suggestionRange) => {\n          const range = ghostMark.range(\n            suggestionRange.absoluteStartPos,\n            suggestionRange.absoluteEndPos,\n          );\n          return range;\n        });\n        const widgetPos = ranges.at(-1)?.to;\n\n        const decorations = Decoration.set([\n          ...ranges,\n          ...(widgetPos !== undefined &&\n          changeSpecs.length > 1 &&\n          config.widgetClass\n            ? [\n                Decoration.widget({\n                  widget: new config.widgetClass(index, changeSpecs.length),\n                  side: 1,\n                }).range(widgetPos),\n              ]\n            : []),\n        ]);\n\n        return {\n          index,\n          decorations,\n          changeSpecs,\n          reverseChangeSet: effect.value.reverseChangeSet,\n        };\n      }\n      if (effect.is(acceptSuggestion)) {\n        return null;\n      }\n      if (effect.is(clearSuggestion)) {\n        return null;\n      }\n    }\n\n    if (state) {\n      // If we ever have a state that is being updated,\n      // map it through the new changes to avoid the potential\n      // of a mismatch between it and the new document and new\n      // document length\n      return {\n        ...state,\n        decorations: state.decorations.map(transaction.changes),\n        reverseChangeSet: state.reverseChangeSet.map(transaction.changes),\n      };\n    }\n\n    return state;\n  },\n  provide: (field) =>\n    EditorView.decorations.from(field, (value) => {\n      return value?.decorations || Decoration.none;\n    }),\n});\n", "import { StateEffect } from \"@codemirror/state\";\nimport type { AddSuggestionsState } from \"./types.js\";\n\n// Effects to tell StateEffect what to do with GhostText\nexport const addSuggestions = StateEffect.define<AddSuggestionsState>();\nexport const acceptSuggestion = StateEffect.define<null>();\nexport const clearSuggestion = StateEffect.define<null>();\n", "import { Facet, combineConfig } from \"@codemirror/state\";\nimport { Language } from \"./api/proto/exa/codeium_common_pb/codeium_common_pb.js\";\nimport type { Document } from \"./api/proto/exa/language_server_pb/language_server_pb.js\";\nimport type { PartialMessage } from \"@bufbuild/protobuf\";\nimport type { CompletionContext } from \"@codemirror/autocomplete\";\nimport { DefaultCycleWidget } from \"./defaultCycleWidget.js\";\n\nexport interface CodeiumConfig {\n  /**\n   * Codeium API key\n   */\n  apiKey: string;\n\n  /**\n   * The programming language of the given document.\n   */\n  language?: Language;\n  /**\n   * Time in millseconds after typing to fetch\n   * completions from codeium\n   */\n  timeout?: number;\n\n  authSource?: number;\n\n  /**\n   * An optional method that lets you decide whether Codeium\n   * should be triggered at a particular place in a document.\n   *\n   * Might be useful for if you're fighting with overlapping\n   * autocomplete sources.\n   */\n  shouldComplete?: (context: CompletionContext) => boolean;\n\n  /**\n   * The class for the widget that is shown at the end a suggestion\n   * when there are multiple suggestions to cycle through.\n   */\n  widgetClass?: typeof DefaultCycleWidget | null;\n}\n\nexport const codeiumConfig = Facet.define<\n  CodeiumConfig,\n  Required<CodeiumConfig>\n>({\n  combine(configs) {\n    return combineConfig<Required<CodeiumConfig>>(\n      configs,\n      {\n        language: Language.TYPESCRIPT,\n        timeout: 150,\n        widgetClass: DefaultCycleWidget,\n      },\n      {},\n    );\n  },\n});\n\ntype OtherDocuments = PartialMessage<Document>[];\n\nexport interface CodeiumOtherDocumentsConfig {\n  override?: () => Promise<OtherDocuments> | OtherDocuments;\n}\n\n/**\n * Configuration for other documents included with the completion\n * request. Adding other documents helps you get more accurate\n * suggestions by adding context.\n */\nexport const codeiumOtherDocumentsConfig = Facet.define<\n  CodeiumOtherDocumentsConfig,\n  Required<CodeiumOtherDocumentsConfig>\n>({\n  combine(configs) {\n    return combineConfig<Required<CodeiumOtherDocumentsConfig>>(\n      configs,\n      {\n        override: () => [],\n      },\n      {},\n    );\n  },\n});\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Assert that condition is truthy or throw error (with message)\n */\nexport function assert(condition, msg) {\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\nconst FLOAT32_MAX = 3.4028234663852886e38, FLOAT32_MIN = -3.4028234663852886e38, UINT32_MAX = 0xffffffff, INT32_MAX = 0x7fffffff, INT32_MIN = -0x80000000;\n/**\n * Assert a valid signed protobuf 32-bit integer.\n */\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid int 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid unsigned protobuf 32-bit integer.\n */\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid uint 32: \" + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n/**\n * Assert a valid protobuf float value.\n */\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error(\"invalid float 32: \" + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./assert.js\";\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\n/**\n * Get reflection information from a generated enum.\n * If this function is called on something other than a generated\n * enum, it raises an error.\n */\nexport function getEnumType(enumObject) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\n    const t = enumObject[enumTypeSymbol];\n    assert(t, \"missing enum type on enum object\");\n    return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\n}\n/**\n * Sets reflection information on a generated enum.\n */\nexport function setEnumType(enumObject, typeName, values, opt) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map((v) => ({\n        no: v.no,\n        name: v.name,\n        localName: enumObject[v.no],\n    })), opt);\n}\n/**\n * Create a new EnumType with the given values.\n */\nexport function makeEnumType(typeName, values, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_opt) {\n    const names = Object.create(null);\n    const numbers = Object.create(null);\n    const normalValues = [];\n    for (const value of values) {\n        // We do not surface options at this time\n        // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\n        const n = normalizeEnumValue(value);\n        normalValues.push(n);\n        names[value.name] = n;\n        numbers[value.no] = n;\n    }\n    return {\n        typeName,\n        values: normalValues,\n        // We do not surface options at this time\n        // options: opt?.options ?? Object.create(null),\n        findName(name) {\n            return names[name];\n        },\n        findNumber(no) {\n            return numbers[no];\n        },\n    };\n}\n/**\n * Create a new enum object with the given values.\n * Sets reflection information.\n */\nexport function makeEnum(typeName, values, opt) {\n    const enumObject = {};\n    for (const value of values) {\n        const n = normalizeEnumValue(value);\n        enumObject[n.localName] = n.no;\n        enumObject[n.no] = n.localName;\n    }\n    setEnumType(enumObject, typeName, values, opt);\n    return enumObject;\n}\nfunction normalizeEnumValue(value) {\n    if (\"localName\" in value) {\n        return value;\n    }\n    return Object.assign(Object.assign({}, value), { localName: value.name });\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Message is the base class of every message, generated, or created at\n * runtime.\n *\n * It is _not_ safe to extend this class. If you want to create a message at\n * run time, use proto3.makeMessageType().\n */\nexport class Message {\n    /**\n     * Compare with a message of the same type.\n     * Note that this function disregards extensions and unknown fields.\n     */\n    equals(other) {\n        return this.getType().runtime.util.equals(this.getType(), this, other);\n    }\n    /**\n     * Create a deep copy.\n     */\n    clone() {\n        return this.getType().runtime.util.clone(this);\n    }\n    /**\n     * Parse from binary data, merging fields.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    fromBinary(bytes, options) {\n        const type = this.getType(), format = type.runtime.bin, opt = format.makeReadOptions(options);\n        format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON value.\n     */\n    fromJson(jsonValue, options) {\n        const type = this.getType(), format = type.runtime.json, opt = format.makeReadOptions(options);\n        format.readMessage(type, jsonValue, opt, this);\n        return this;\n    }\n    /**\n     * Parse a message from a JSON string.\n     */\n    fromJsonString(jsonString, options) {\n        let json;\n        try {\n            json = JSON.parse(jsonString);\n        }\n        catch (e) {\n            throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e instanceof Error ? e.message : String(e)}`);\n        }\n        return this.fromJson(json, options);\n    }\n    /**\n     * Serialize the message to binary data.\n     */\n    toBinary(options) {\n        const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();\n        bin.writeMessage(this, writer, opt);\n        return writer.finish();\n    }\n    /**\n     * Serialize the message to a JSON value, a JavaScript value that can be\n     * passed to JSON.stringify().\n     */\n    toJson(options) {\n        const type = this.getType(), json = type.runtime.json, opt = json.makeWriteOptions(options);\n        return json.writeMessage(this, opt);\n    }\n    /**\n     * Serialize the message to a JSON string.\n     */\n    toJsonString(options) {\n        var _a;\n        const value = this.toJson(options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Override for serialization behavior. This will be invoked when calling\n     * JSON.stringify on this message (i.e. JSON.stringify(msg)).\n     *\n     * Note that this will not serialize google.protobuf.Any with a packed\n     * message because the protobuf JSON format specifies that it needs to be\n     * unpacked, and this is only possible with a type registry to look up the\n     * message type.  As a result, attempting to serialize a message with this\n     * type will throw an Error.\n     *\n     * This method is protected because you should not need to invoke it\n     * directly -- instead use JSON.stringify or toJsonString for\n     * stringified JSON.  Alternatively, if actual JSON is desired, you should\n     * use toJson.\n     */\n    toJSON() {\n        return this.toJson({\n            emitDefaultValues: true,\n        });\n    }\n    /**\n     * Retrieve the MessageType of this message - a singleton that represents\n     * the protobuf message declaration and provides metadata for reflection-\n     * based operations.\n     */\n    getType() {\n        // Any class that extends Message _must_ provide a complete static\n        // implementation of MessageType.\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\n        return Object.getPrototypeOf(this).constructor;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\n/**\n * Create a new message type using the given runtime.\n */\nexport function makeMessageType(runtime, typeName, fields, opt) {\n    var _a;\n    const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\n    const type = {\n        [localName]: function (data) {\n            runtime.util.initFields(this);\n            runtime.util.initPartial(data, this);\n        },\n    }[localName];\n    Object.setPrototypeOf(type.prototype, new Message());\n    Object.assign(type, {\n        runtime,\n        typeName,\n        fields: runtime.util.newFieldList(fields),\n        fromBinary(bytes, options) {\n            return new type().fromBinary(bytes, options);\n        },\n        fromJson(jsonValue, options) {\n            return new type().fromJson(jsonValue, options);\n        },\n        fromJsonString(jsonString, options) {\n            return new type().fromJsonString(jsonString, options);\n        },\n        equals(a, b) {\n            return runtime.util.equals(type, a, b);\n        },\n    });\n    return type;\n}\n", "// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = (bits.hi & 0x80000000);\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nexport function uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1FFFFF) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xFFFFFF;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xFFFFFF;\n    const high = (hi >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) +\n        decimalFrom1e7WithLeadingZeros(digitA);\n}\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { int64FromString, int64ToString, uInt64ToString, } from \"./google/varint.js\";\nfunction makeInt64Support() {\n    const dv = new DataView(new ArrayBuffer(8));\n    // note that Safari 14 implements BigInt, but not the DataView methods\n    const ok = typeof BigInt === \"function\" &&\n        typeof dv.getBigInt64 === \"function\" &&\n        typeof dv.getBigUint64 === \"function\" &&\n        typeof dv.setBigInt64 === \"function\" &&\n        typeof dv.setBigUint64 === \"function\" &&\n        (typeof process != \"object\" ||\n            typeof process.env != \"object\" ||\n            process.env.BUF_BIGINT_DISABLE !== \"1\");\n    if (ok) {\n        const MIN = BigInt(\"-9223372036854775808\"), MAX = BigInt(\"9223372036854775807\"), UMIN = BigInt(\"0\"), UMAX = BigInt(\"18446744073709551615\");\n        return {\n            zero: BigInt(0),\n            supported: true,\n            parse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > MAX || bi < MIN) {\n                    throw new Error(`int64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            uParse(value) {\n                const bi = typeof value == \"bigint\" ? value : BigInt(value);\n                if (bi > UMAX || bi < UMIN) {\n                    throw new Error(`uint64 invalid: ${value}`);\n                }\n                return bi;\n            },\n            enc(value) {\n                dv.setBigInt64(0, this.parse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            uEnc(value) {\n                dv.setBigInt64(0, this.uParse(value), true);\n                return {\n                    lo: dv.getInt32(0, true),\n                    hi: dv.getInt32(4, true),\n                };\n            },\n            dec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigInt64(0, true);\n            },\n            uDec(lo, hi) {\n                dv.setInt32(0, lo, true);\n                dv.setInt32(4, hi, true);\n                return dv.getBigUint64(0, true);\n            },\n        };\n    }\n    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);\n    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);\n    return {\n        zero: \"0\",\n        supported: false,\n        parse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return value;\n        },\n        uParse(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return value;\n        },\n        enc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertInt64String(value);\n            return int64FromString(value);\n        },\n        uEnc(value) {\n            if (typeof value != \"string\") {\n                value = value.toString();\n            }\n            assertUInt64String(value);\n            return int64FromString(value);\n        },\n        dec(lo, hi) {\n            return int64ToString(lo, hi);\n        },\n        uDec(lo, hi) {\n            return uInt64ToString(lo, hi);\n        },\n    };\n}\nexport const protoInt64 = makeInt64Support();\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\n * sint64, fixed64, sfixed64).\n *\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\n * String if `[jstype = JS_STRING]` is specified.\n *\n * ```protobuf\n * uint64 field_a = 1; // BigInt\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript BigInt.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript String.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n})(LongType || (LongType = {}));\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Returns true if both scalar values are equal.\n */\nexport function scalarEquals(type, a, b) {\n    if (a === b) {\n        // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\n        return true;\n    }\n    // Special case BYTES - we need to compare each byte individually\n    if (type == ScalarType.BYTES) {\n        if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Special case 64-bit integers - we support number, string and bigint representation.\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (type) {\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // Loose comparison will match between 0n, 0 and \"0\".\n            return a == b;\n    }\n    // Anything that hasn't been caught by strict comparison or special cased\n    // BYTES and 64-bit integers is not equal.\n    return false;\n}\n/**\n * Returns the zero value for the given scalar type.\n */\nexport function scalarZeroValue(type, longType) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            return (longType == 0 ? protoInt64.zero : \"0\");\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\n            // We do not use individual cases to save a few bytes code size.\n            return 0;\n    }\n}\n/**\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\n *\n * In proto3, zero-values are not written to the wire, unless the field is\n * optional or repeated.\n */\nexport function isScalarZeroValue(type, value) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return value === false;\n        case ScalarType.STRING:\n            return value === \"\";\n        case ScalarType.BYTES:\n            return value instanceof Uint8Array && !value.byteLength;\n        default:\n            return value == 0; // Loose comparison matches 0n, 0 and \"0\"\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { varint32read, varint32write, varint64read, varint64write, } from \"./google/varint.js\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./private/assert.js\";\nimport { protoInt64 } from \"./proto-int64.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Start of a tag-delimited aggregate, such as a proto2 group, or a message\n     * in editions with message_encoding = DELIMITED.\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * End of a tag-delimited aggregate.\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error(\"invalid state, fork stack empty\");\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);\n        view.setInt32(0, tc.lo, true);\n        view.setInt32(4, tc.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let tc = protoInt64.enc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let tc = protoInt64.enc(value), \n        // zigzag encode\n        sign = tc.hi >> 31, lo = (tc.lo << 1) ^ sign, hi = ((tc.hi << 1) | (tc.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let tc = protoInt64.uEnc(value);\n        varint64write(tc.lo, tc.hi, this.buf);\n        return this;\n    }\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit64:\n                this.pos += 4;\n            // eslint-disable-next-line\n            // @ts-ignore TS7029: Fallthrough case in switch\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // TODO check for matching field numbers in StartGroup / EndGroup tags\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return protoInt64.dec(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return protoInt64.uDec(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;\n        hi = (hi >>> 1) ^ s;\n        return protoInt64.dec(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return protoInt64.uDec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return protoInt64.dec(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { WireType } from \"../binary-encoding.js\";\n/**\n * Create a new extension using the given runtime.\n */\nexport function makeExtension(runtime, typeName, extendee, field) {\n    let fi;\n    return {\n        typeName,\n        extendee,\n        get field() {\n            if (!fi) {\n                const i = (typeof field == \"function\" ? field() : field);\n                i.name = typeName.split(\".\").pop();\n                i.jsonName = `[${typeName}]`;\n                fi = runtime.util.newFieldList([i]).list()[0];\n            }\n            return fi;\n        },\n        runtime,\n    };\n}\n/**\n * Create a container that allows us to read extension fields into it with the\n * same logic as regular fields.\n */\nexport function createExtensionContainer(extension) {\n    const localName = extension.field.localName;\n    const container = Object.create(null);\n    container[localName] = initExtensionField(extension);\n    return [container, () => container[localName]];\n}\nfunction initExtensionField(ext) {\n    const field = ext.field;\n    if (field.repeated) {\n        return [];\n    }\n    if (field.default !== undefined) {\n        return field.default;\n    }\n    switch (field.kind) {\n        case \"enum\":\n            return field.T.values[0].no;\n        case \"scalar\":\n            return scalarZeroValue(field.T, field.L);\n        case \"message\":\n            // eslint-disable-next-line no-case-declarations\n            const T = field.T, value = new T();\n            return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;\n        case \"map\":\n            throw \"map fields are not allowed to be extensions\";\n    }\n}\n/**\n * Helper to filter unknown fields, optimized based on field type.\n */\nexport function filterUnknownFields(unknownFields, field) {\n    if (!field.repeated && (field.kind == \"enum\" || field.kind == \"scalar\")) {\n        // singular scalar fields do not merge, we pick the last\n        for (let i = unknownFields.length - 1; i >= 0; --i) {\n            if (unknownFields[i].no == field.no) {\n                return [unknownFields[i]];\n            }\n        }\n        return [];\n    }\n    return unknownFields.filter((uf) => uf.no === field.no);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\n// lookup table from base64 character to byte\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\nexport const protoBase64 = {\n    /**\n     * Decodes a base64 string to a byte array.\n     *\n     * - ignores white-space, including line breaks and tabs\n     * - allows inner padding (can decode concatenated base64 strings)\n     * - does not require padding\n     * - understands base64url encoding:\n     *   \"-\" instead of \"+\",\n     *   \"_\" instead of \"/\",\n     *   no padding\n     */\n    dec(base64Str) {\n        // estimate byte size, not accounting for inner padding and whitespace\n        let es = (base64Str.length * 3) / 4;\n        if (base64Str[base64Str.length - 2] == \"=\")\n            es -= 2;\n        else if (base64Str[base64Str.length - 1] == \"=\")\n            es -= 1;\n        let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n        groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // previous byte\n        for (let i = 0; i < base64Str.length; i++) {\n            b = decTable[base64Str.charCodeAt(i)];\n            if (b === undefined) {\n                switch (base64Str[i]) {\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"=\":\n                        groupPos = 0; // reset state when padding found\n                    // @ts-ignore TS7029: Fallthrough case in switch\n                    case \"\\n\":\n                    case \"\\r\":\n                    case \"\\t\":\n                    case \" \":\n                        continue; // skip white-space, and padding\n                    default:\n                        throw Error(\"invalid base64 string.\");\n                }\n            }\n            switch (groupPos) {\n                case 0:\n                    p = b;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    bytes[bytePos++] = (p << 2) | ((b & 48) >> 4);\n                    p = b;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    bytes[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);\n                    p = b;\n                    groupPos = 3;\n                    break;\n                case 3:\n                    bytes[bytePos++] = ((p & 3) << 6) | b;\n                    groupPos = 0;\n                    break;\n            }\n        }\n        if (groupPos == 1)\n            throw Error(\"invalid base64 string.\");\n        return bytes.subarray(0, bytePos);\n    },\n    /**\n     * Encode a byte array to a base64 string.\n     */\n    enc(bytes) {\n        let base64 = \"\", groupPos = 0, // position in base64 group\n        b, // current byte\n        p = 0; // carry over from previous byte\n        for (let i = 0; i < bytes.length; i++) {\n            b = bytes[i];\n            switch (groupPos) {\n                case 0:\n                    base64 += encTable[b >> 2];\n                    p = (b & 3) << 4;\n                    groupPos = 1;\n                    break;\n                case 1:\n                    base64 += encTable[p | (b >> 4)];\n                    p = (b & 15) << 2;\n                    groupPos = 2;\n                    break;\n                case 2:\n                    base64 += encTable[p | (b >> 6)];\n                    base64 += encTable[b & 63];\n                    groupPos = 0;\n                    break;\n            }\n        }\n        // add output padding\n        if (groupPos) {\n            base64 += encTable[p];\n            base64 += \"=\";\n            if (groupPos == 1)\n                base64 += \"=\";\n        }\n        return base64;\n    },\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { createExtensionContainer, filterUnknownFields, } from \"./private/extensions.js\";\n/**\n * Retrieve an extension value from a message.\n *\n * The function never returns undefined. Use hasExtension() to check whether an\n * extension is set. If the extension is not set, this function returns the\n * default value (if one was specified in the protobuf source), or the zero value\n * (for example `0` for numeric types, `[]` for repeated extension fields, and\n * an empty message instance for message fields).\n *\n * Extensions are stored as unknown fields on a message. To mutate an extension\n * value, make sure to store the new value with setExtension() after mutating.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function getExtension(message, extension, options) {\n    assertExtendee(extension, message);\n    const opt = extension.runtime.bin.makeReadOptions(options);\n    const ufs = filterUnknownFields(message.getType().runtime.bin.listUnknownFields(message), extension.field);\n    const [container, get] = createExtensionContainer(extension);\n    for (const uf of ufs) {\n        extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);\n    }\n    return get();\n}\n/**\n * Set an extension value on a message. If the message already has a value for\n * this extension, the value is replaced.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function setExtension(message, extension, value, options) {\n    assertExtendee(extension, message);\n    const readOpt = extension.runtime.bin.makeReadOptions(options);\n    const writeOpt = extension.runtime.bin.makeWriteOptions(options);\n    if (hasExtension(message, extension)) {\n        const ufs = message\n            .getType()\n            .runtime.bin.listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        message.getType().runtime.bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            message\n                .getType()\n                .runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n    const writer = writeOpt.writerFactory();\n    let f = extension.field;\n    // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234\n    // We patch the field info to use explicit presence:\n    if (!f.opt && !f.repeated && (f.kind == \"enum\" || f.kind == \"scalar\")) {\n        f = Object.assign(Object.assign({}, extension.field), { opt: true });\n    }\n    extension.runtime.bin.writeField(f, value, writer, writeOpt);\n    const reader = readOpt.readerFactory(writer.finish());\n    while (reader.pos < reader.len) {\n        const [no, wireType] = reader.tag();\n        const data = reader.skip(wireType);\n        message.getType().runtime.bin.onUnknownField(message, no, wireType, data);\n    }\n}\n/**\n * Remove an extension value from a message.\n *\n * If the extension does not extend the given message, an error is raised.\n */\nexport function clearExtension(message, extension) {\n    assertExtendee(extension, message);\n    if (hasExtension(message, extension)) {\n        const bin = message.getType().runtime.bin;\n        const ufs = bin\n            .listUnknownFields(message)\n            .filter((uf) => uf.no != extension.field.no);\n        bin.discardUnknownFields(message);\n        for (const uf of ufs) {\n            bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\n        }\n    }\n}\n/**\n * Check whether an extension is set on a message.\n */\nexport function hasExtension(message, extension) {\n    const messageType = message.getType();\n    return (extension.extendee.typeName === messageType.typeName &&\n        !!messageType.runtime.bin\n            .listUnknownFields(message)\n            .find((uf) => uf.no == extension.field.no));\n}\nfunction assertExtendee(extension, message) {\n    assert(extension.extendee.typeName == message.getType().typeName, `extension ${extension.typeName} can only be applied to message ${extension.extendee.typeName}`);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { isScalarZeroValue, scalarZeroValue } from \"./scalars.js\";\n/**\n * Returns true if the field is set.\n */\nexport function isFieldSet(field, target) {\n    const localName = field.localName;\n    if (field.repeated) {\n        return target[localName].length > 0;\n    }\n    if (field.oneof) {\n        return target[field.oneof.localName].case === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\n    }\n    switch (field.kind) {\n        case \"enum\":\n        case \"scalar\":\n            if (field.opt || field.req) {\n                // explicit presence\n                return target[localName] !== undefined;\n            }\n            // implicit presence\n            if (field.kind == \"enum\") {\n                return target[localName] !== field.T.values[0].no;\n            }\n            return !isScalarZeroValue(field.T, target[localName]);\n        case \"message\":\n            return target[localName] !== undefined;\n        case \"map\":\n            return Object.keys(target[localName]).length > 0; // eslint-disable-line @typescript-eslint/no-unsafe-argument\n    }\n}\n/**\n * Resets the field, so that isFieldSet() will return false.\n */\nexport function clearField(field, target) {\n    const localName = field.localName;\n    const implicitPresence = !field.opt && !field.req;\n    if (field.repeated) {\n        target[localName] = [];\n    }\n    else if (field.oneof) {\n        target[field.oneof.localName] = { case: undefined };\n    }\n    else {\n        switch (field.kind) {\n            case \"map\":\n                target[localName] = {};\n                break;\n            case \"enum\":\n                target[localName] = implicitPresence ? field.T.values[0].no : undefined;\n                break;\n            case \"scalar\":\n                target[localName] = implicitPresence\n                    ? scalarZeroValue(field.T, field.L)\n                    : undefined;\n                break;\n            case \"message\":\n                target[localName] = undefined;\n                break;\n        }\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"./message.js\";\n/**\n * Check whether the given object is any subtype of Message or is a specific\n * Message by passing the type.\n *\n * Just like `instanceof`, `isMessage` narrows the type. The advantage of\n * `isMessage` is that it compares identity by the message type name, not by\n * class identity. This makes it robust against the dual package hazard and\n * similar situations, where the same message is duplicated.\n *\n * This function is _mostly_ equivalent to the `instanceof` operator. For\n * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,\n * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,\n * `isMessage` should be preferred over `instanceof`.\n *\n * However, due to the fact that `isMessage` does not use class identity, there\n * are subtle differences between this function and `instanceof`. Notably,\n * calling `isMessage` on an explicit type of Message will return false.\n */\nexport function isMessage(arg, type) {\n    if (arg === null || typeof arg != \"object\") {\n        return false;\n    }\n    if (!Object.getOwnPropertyNames(Message.prototype).every((m) => m in arg && typeof arg[m] == \"function\")) {\n        return false;\n    }\n    const actualType = arg.getType();\n    if (actualType === null ||\n        typeof actualType != \"function\" ||\n        !(\"typeName\" in actualType) ||\n        typeof actualType.typeName != \"string\") {\n        return false;\n    }\n    return type === undefined ? true : actualType.typeName == type.typeName;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/**\n * Wrap a primitive message field value in its corresponding wrapper\n * message. This function is idempotent.\n */\nexport function wrapField(type, value) {\n    if (isMessage(value) || !type.fieldWrapper) {\n        return value;\n    }\n    return type.fieldWrapper.wrapField(value);\n}\n/**\n * If the given field uses one of the well-known wrapper types, return\n * the primitive type it wraps.\n */\nexport function getUnwrappedFieldType(field) {\n    if (field.fieldKind !== \"message\") {\n        return undefined;\n    }\n    if (field.repeated) {\n        return undefined;\n    }\n    if (field.oneof != undefined) {\n        return undefined;\n    }\n    return wktWrapperToScalarType[field.message.typeName];\n}\nconst wktWrapperToScalarType = {\n    \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\n    \"google.protobuf.FloatValue\": ScalarType.FLOAT,\n    \"google.protobuf.Int64Value\": ScalarType.INT64,\n    \"google.protobuf.UInt64Value\": ScalarType.UINT64,\n    \"google.protobuf.Int32Value\": ScalarType.INT32,\n    \"google.protobuf.UInt32Value\": ScalarType.UINT32,\n    \"google.protobuf.BoolValue\": ScalarType.BOOL,\n    \"google.protobuf.StringValue\": ScalarType.STRING,\n    \"google.protobuf.BytesValue\": ScalarType.BYTES,\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../message.js\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert.js\";\nimport { protoInt64 } from \"../proto-int64.js\";\nimport { protoBase64 } from \"../proto-base64.js\";\nimport { createExtensionContainer } from \"./extensions.js\";\nimport { getExtension, hasExtension, setExtension, } from \"../extension-accessor.js\";\nimport { clearField, isFieldSet } from \"./reflect.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { isScalarZeroValue } from \"./scalars.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */\n// Default options for parsing JSON.\nconst jsonReadDefaults = {\n    ignoreUnknownFields: false,\n};\n// Default options for serializing to JSON.\nconst jsonWriteDefaults = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\n}\nconst tokenNull = Symbol();\nconst tokenIgnoredUnknownEnum = Symbol();\nexport function makeJsonFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        readMessage(type, json, options, message) {\n            if (json == null || Array.isArray(json) || typeof json != \"object\") {\n                throw new Error(`cannot decode message ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n            }\n            message = message !== null && message !== void 0 ? message : new type();\n            const oneofSeen = new Map();\n            const registry = options.typeRegistry;\n            for (const [jsonKey, jsonValue] of Object.entries(json)) {\n                const field = type.fields.findJsonName(jsonKey);\n                if (field) {\n                    if (field.oneof) {\n                        if (jsonValue === null && field.kind == \"scalar\") {\n                            // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\n                            continue;\n                        }\n                        const seen = oneofSeen.get(field.oneof);\n                        if (seen !== undefined) {\n                            throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof \"${field.oneof.name}\" present: \"${seen}\", \"${jsonKey}\"`);\n                        }\n                        oneofSeen.set(field.oneof, jsonKey);\n                    }\n                    readField(message, jsonValue, field, options, type);\n                }\n                else {\n                    let found = false;\n                    if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) &&\n                        jsonKey.startsWith(\"[\") &&\n                        jsonKey.endsWith(\"]\")) {\n                        const ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));\n                        if (ext && ext.extendee.typeName == type.typeName) {\n                            found = true;\n                            const [container, get] = createExtensionContainer(ext);\n                            readField(container, jsonValue, ext.field, options, ext);\n                            // We pass on the options as BinaryReadOptions/BinaryWriteOptions,\n                            // so that users can bring their own binary reader and writer factories\n                            // if necessary.\n                            setExtension(message, ext, get(), options);\n                        }\n                    }\n                    if (!found && !options.ignoreUnknownFields) {\n                        throw new Error(`cannot decode message ${type.typeName} from JSON: key \"${jsonKey}\" is unknown`);\n                    }\n                }\n            }\n            return message;\n        },\n        writeMessage(message, options) {\n            const type = message.getType();\n            const json = {};\n            let field;\n            try {\n                for (field of type.fields.byNumber()) {\n                    if (!isFieldSet(field, message)) {\n                        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                        if (field.req) {\n                            throw `required field not set`;\n                        }\n                        if (!options.emitDefaultValues) {\n                            continue;\n                        }\n                        if (!canEmitFieldDefaultValue(field)) {\n                            continue;\n                        }\n                    }\n                    const value = field.oneof\n                        ? message[field.oneof.localName].value\n                        : message[field.localName];\n                    const jsonValue = writeField(field, value, options);\n                    if (jsonValue !== undefined) {\n                        json[options.useProtoFieldName ? field.name : field.jsonName] =\n                            jsonValue;\n                    }\n                }\n                const registry = options.typeRegistry;\n                if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {\n                    for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                        const ext = registry.findExtensionFor(type.typeName, uf.no);\n                        if (ext && hasExtension(message, ext)) {\n                            // We pass on the options as BinaryReadOptions, so that users can bring their own\n                            // binary reader factory if necessary.\n                            const value = getExtension(message, ext, options);\n                            const jsonValue = writeField(ext.field, value, options);\n                            if (jsonValue !== undefined) {\n                                json[ext.field.jsonName] = jsonValue;\n                            }\n                        }\n                    }\n                }\n            }\n            catch (e) {\n                const m = field\n                    ? `cannot encode field ${type.typeName}.${field.name} to JSON`\n                    : `cannot encode message ${type.typeName} to JSON`;\n                const r = e instanceof Error ? e.message : String(e);\n                throw new Error(m + (r.length > 0 ? `: ${r}` : \"\"));\n            }\n            return json;\n        },\n        readScalar(type, json, longType) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            return readScalar(type, json, longType !== null && longType !== void 0 ? longType : LongType.BIGINT, true);\n        },\n        writeScalar(type, value, emitDefaultValues) {\n            // The signature of our internal function has changed. For backwards-\n            // compatibility, we support the old form that is part of the public API\n            // through the interface JsonFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            if (emitDefaultValues || isScalarZeroValue(type, value)) {\n                return writeScalar(type, value);\n            }\n            return undefined;\n        },\n        debug: debugJsonValue,\n    };\n}\nfunction debugJsonValue(json) {\n    if (json === null) {\n        return \"null\";\n    }\n    switch (typeof json) {\n        case \"object\":\n            return Array.isArray(json) ? \"array\" : \"object\";\n        case \"string\":\n            return json.length > 100 ? \"string\" : `\"${json.split('\"').join('\\\\\"')}\"`;\n        default:\n            return String(json);\n    }\n}\n// Read a JSON value for a field.\n// The \"parentType\" argument is only used to provide context in errors.\nfunction readField(target, jsonValue, field, options, parentType) {\n    let localName = field.localName;\n    if (field.repeated) {\n        assert(field.kind != \"map\");\n        if (jsonValue === null) {\n            return;\n        }\n        if (!Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetArray = target[localName];\n        for (const jsonItem of jsonValue) {\n            if (jsonItem === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`);\n            }\n            switch (field.kind) {\n                case \"message\":\n                    targetArray.push(field.T.fromJson(jsonItem, options));\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetArray.push(enumValue);\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetArray.push(readScalar(field.T, jsonItem, field.L, true));\n                    }\n                    catch (e) {\n                        let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonItem)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else if (field.kind == \"map\") {\n        if (jsonValue === null) {\n            return;\n        }\n        if (typeof jsonValue != \"object\" || Array.isArray(jsonValue)) {\n            throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`);\n        }\n        const targetMap = target[localName];\n        for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\n            if (jsonMapValue === null) {\n                throw new Error(`cannot decode field ${parentType.typeName}.${field.name} from JSON: map value null`);\n            }\n            let key;\n            try {\n                key = readMapKey(field.K, jsonMapKey);\n            }\n            catch (e) {\n                let m = `cannot decode map key for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                if (e instanceof Error && e.message.length > 0) {\n                    m += `: ${e.message}`;\n                }\n                throw new Error(m);\n            }\n            switch (field.V.kind) {\n                case \"message\":\n                    targetMap[key] = field.V.T.fromJson(jsonMapValue, options);\n                    break;\n                case \"enum\":\n                    const enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);\n                    if (enumValue !== tokenIgnoredUnknownEnum) {\n                        targetMap[key] = enumValue;\n                    }\n                    break;\n                case \"scalar\":\n                    try {\n                        targetMap[key] = readScalar(field.V.T, jsonMapValue, LongType.BIGINT, true);\n                    }\n                    catch (e) {\n                        let m = `cannot decode map value for field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                        if (e instanceof Error && e.message.length > 0) {\n                            m += `: ${e.message}`;\n                        }\n                        throw new Error(m);\n                    }\n                    break;\n            }\n        }\n    }\n    else {\n        if (field.oneof) {\n            target = target[field.oneof.localName] = { case: localName };\n            localName = \"value\";\n        }\n        switch (field.kind) {\n            case \"message\":\n                const messageType = field.T;\n                if (jsonValue === null &&\n                    messageType.typeName != \"google.protobuf.Value\") {\n                    return;\n                }\n                let currentValue = target[localName];\n                if (isMessage(currentValue)) {\n                    currentValue.fromJson(jsonValue, options);\n                }\n                else {\n                    target[localName] = currentValue = messageType.fromJson(jsonValue, options);\n                    if (messageType.fieldWrapper && !field.oneof) {\n                        target[localName] =\n                            messageType.fieldWrapper.unwrapField(currentValue);\n                    }\n                }\n                break;\n            case \"enum\":\n                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);\n                switch (enumValue) {\n                    case tokenNull:\n                        clearField(field, target);\n                        break;\n                    case tokenIgnoredUnknownEnum:\n                        break;\n                    default:\n                        target[localName] = enumValue;\n                        break;\n                }\n                break;\n            case \"scalar\":\n                try {\n                    const scalarValue = readScalar(field.T, jsonValue, field.L, false);\n                    switch (scalarValue) {\n                        case tokenNull:\n                            clearField(field, target);\n                            break;\n                        default:\n                            target[localName] = scalarValue;\n                            break;\n                    }\n                }\n                catch (e) {\n                    let m = `cannot decode field ${parentType.typeName}.${field.name} from JSON: ${debugJsonValue(jsonValue)}`;\n                    if (e instanceof Error && e.message.length > 0) {\n                        m += `: ${e.message}`;\n                    }\n                    throw new Error(m);\n                }\n                break;\n        }\n    }\n}\nfunction readMapKey(type, json) {\n    if (type === ScalarType.BOOL) {\n        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n        switch (json) {\n            case \"true\":\n                json = true;\n                break;\n            case \"false\":\n                json = false;\n                break;\n        }\n    }\n    return readScalar(type, json, LongType.BIGINT, true).toString();\n}\nfunction readScalar(type, json, longType, nullAsZeroValue) {\n    if (json === null) {\n        if (nullAsZeroValue) {\n            return scalarZeroValue(type, longType);\n        }\n        return tokenNull;\n    }\n    // every valid case in the switch below returns, and every fall\n    // through is regarded as a failure.\n    switch (type) {\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            if (json === \"NaN\")\n                return Number.NaN;\n            if (json === \"Infinity\")\n                return Number.POSITIVE_INFINITY;\n            if (json === \"-Infinity\")\n                return Number.NEGATIVE_INFINITY;\n            if (json === \"\") {\n                // empty string is not a number\n                break;\n            }\n            if (typeof json == \"string\" && json.trim().length !== json.length) {\n                // extra whitespace\n                break;\n            }\n            if (typeof json != \"string\" && typeof json != \"number\") {\n                break;\n            }\n            const float = Number(json);\n            if (Number.isNaN(float)) {\n                // not a number\n                break;\n            }\n            if (!Number.isFinite(float)) {\n                // infinity and -infinity are handled by string representation above, so this is an error\n                break;\n            }\n            if (type == ScalarType.FLOAT)\n                assertFloat32(float);\n            return float;\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.UINT32:\n            let int32;\n            if (typeof json == \"number\")\n                int32 = json;\n            else if (typeof json == \"string\" && json.length > 0) {\n                if (json.trim().length === json.length)\n                    int32 = Number(json);\n            }\n            if (int32 === undefined)\n                break;\n            if (type == ScalarType.UINT32 || type == ScalarType.FIXED32)\n                assertUInt32(int32);\n            else\n                assertInt32(int32);\n            return int32;\n        // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const long = protoInt64.parse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? long.toString() : long;\n        case ScalarType.FIXED64:\n        case ScalarType.UINT64:\n            if (typeof json != \"number\" && typeof json != \"string\")\n                break;\n            const uLong = protoInt64.uParse(json);\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            return longType ? uLong.toString() : uLong;\n        // bool:\n        case ScalarType.BOOL:\n            if (typeof json !== \"boolean\")\n                break;\n            return json;\n        // string:\n        case ScalarType.STRING:\n            if (typeof json !== \"string\") {\n                break;\n            }\n            // A string must always contain UTF-8 encoded or 7-bit ASCII.\n            // We validate with encodeURIComponent, which appears to be the fastest widely available option.\n            try {\n                encodeURIComponent(json);\n            }\n            catch (e) {\n                throw new Error(\"invalid UTF8\");\n            }\n            return json;\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            if (json === \"\")\n                return new Uint8Array(0);\n            if (typeof json !== \"string\")\n                break;\n            return protoBase64.dec(json);\n    }\n    throw new Error();\n}\nfunction readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {\n    if (json === null) {\n        if (type.typeName == \"google.protobuf.NullValue\") {\n            return 0; // google.protobuf.NullValue.NULL_VALUE = 0\n        }\n        return nullAsZeroValue ? type.values[0].no : tokenNull;\n    }\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n    switch (typeof json) {\n        case \"number\":\n            if (Number.isInteger(json)) {\n                return json;\n            }\n            break;\n        case \"string\":\n            const value = type.findName(json);\n            if (value !== undefined) {\n                return value.no;\n            }\n            if (ignoreUnknownFields) {\n                return tokenIgnoredUnknownEnum;\n            }\n            break;\n    }\n    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json)}`);\n}\n// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`\nfunction canEmitFieldDefaultValue(field) {\n    if (field.repeated || field.kind == \"map\") {\n        // maps are {}, repeated fields are []\n        return true;\n    }\n    if (field.oneof) {\n        // oneof fields are never emitted\n        return false;\n    }\n    if (field.kind == \"message\") {\n        // singular message field are allowed to emit JSON null, but we do not\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.opt || field.req) {\n        // the field uses explicit presence, so we cannot emit a zero value\n        return false;\n    }\n    return true;\n}\nfunction writeField(field, value, options) {\n    if (field.kind == \"map\") {\n        assert(typeof value == \"object\" && value != null);\n        const jsonObj = {};\n        const entries = Object.entries(value);\n        switch (field.V.kind) {\n            case \"scalar\":\n                for (const [entryKey, entryValue] of entries) {\n                    jsonObj[entryKey.toString()] = writeScalar(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key\n                }\n                break;\n            case \"message\":\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = entryValue.toJson(options);\n                }\n                break;\n            case \"enum\":\n                const enumType = field.V.T;\n                for (const [entryKey, entryValue] of entries) {\n                    // JSON standard allows only (double quoted) string as property key\n                    jsonObj[entryKey.toString()] = writeEnum(enumType, entryValue, options.enumAsInteger);\n                }\n                break;\n        }\n        return options.emitDefaultValues || entries.length > 0\n            ? jsonObj\n            : undefined;\n    }\n    if (field.repeated) {\n        assert(Array.isArray(value));\n        const jsonArr = [];\n        switch (field.kind) {\n            case \"scalar\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeScalar(field.T, value[i]));\n                }\n                break;\n            case \"enum\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(writeEnum(field.T, value[i], options.enumAsInteger));\n                }\n                break;\n            case \"message\":\n                for (let i = 0; i < value.length; i++) {\n                    jsonArr.push(value[i].toJson(options));\n                }\n                break;\n        }\n        return options.emitDefaultValues || jsonArr.length > 0\n            ? jsonArr\n            : undefined;\n    }\n    switch (field.kind) {\n        case \"scalar\":\n            return writeScalar(field.T, value);\n        case \"enum\":\n            return writeEnum(field.T, value, options.enumAsInteger);\n        case \"message\":\n            return wrapField(field.T, value).toJson(options);\n    }\n}\nfunction writeEnum(type, value, enumAsInteger) {\n    var _a;\n    assert(typeof value == \"number\");\n    if (type.typeName == \"google.protobuf.NullValue\") {\n        return null;\n    }\n    if (enumAsInteger) {\n        return value;\n    }\n    const val = type.findNumber(value);\n    return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\n}\nfunction writeScalar(type, value) {\n    switch (type) {\n        // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n        case ScalarType.INT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n            assert(typeof value == \"number\");\n            return value;\n        // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n        // Either numbers or strings are accepted. Exponent notation is also accepted.\n        case ScalarType.FLOAT:\n        // assertFloat32(value);\n        case ScalarType.DOUBLE: // eslint-disable-line no-fallthrough\n            assert(typeof value == \"number\");\n            if (Number.isNaN(value))\n                return \"NaN\";\n            if (value === Number.POSITIVE_INFINITY)\n                return \"Infinity\";\n            if (value === Number.NEGATIVE_INFINITY)\n                return \"-Infinity\";\n            return value;\n        // string:\n        case ScalarType.STRING:\n            assert(typeof value == \"string\");\n            return value;\n        // bool:\n        case ScalarType.BOOL:\n            assert(typeof value == \"boolean\");\n            return value;\n        // JSON value will be a decimal string. Either numbers or strings are accepted.\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            assert(typeof value == \"bigint\" ||\n                typeof value == \"string\" ||\n                typeof value == \"number\");\n            return value.toString();\n        // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n        // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n        case ScalarType.BYTES:\n            assert(value instanceof Uint8Array);\n            return protoBase64.enc(value);\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { BinaryReader, BinaryWriter, WireType } from \"../binary-encoding.js\";\nimport { Message } from \"../message.js\";\nimport { wrapField } from \"./field-wrapper.js\";\nimport { scalarZeroValue } from \"./scalars.js\";\nimport { assert } from \"./assert.js\";\nimport { isFieldSet } from \"./reflect.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\n// Default options for parsing binary data.\nconst readDefaults = {\n    readUnknownFields: true,\n    readerFactory: (bytes) => new BinaryReader(bytes),\n};\n// Default options for serializing binary data.\nconst writeDefaults = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\nfunction makeReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\n}\nfunction makeWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\n}\nexport function makeBinaryFormat() {\n    return {\n        makeReadOptions,\n        makeWriteOptions,\n        listUnknownFields(message) {\n            var _a;\n            return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\n        },\n        discardUnknownFields(message) {\n            delete message[unknownFieldsSymbol];\n        },\n        writeUnknownFields(message, writer) {\n            const m = message;\n            const c = m[unknownFieldsSymbol];\n            if (c) {\n                for (const f of c) {\n                    writer.tag(f.no, f.wireType).raw(f.data);\n                }\n            }\n        },\n        onUnknownField(message, no, wireType, data) {\n            const m = message;\n            if (!Array.isArray(m[unknownFieldsSymbol])) {\n                m[unknownFieldsSymbol] = [];\n            }\n            m[unknownFieldsSymbol].push({ no, wireType, data });\n        },\n        readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\n            const type = message.getType();\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            const end = delimitedMessageEncoding\n                ? reader.len\n                : reader.pos + lengthOrEndTagFieldNo;\n            let fieldNo, wireType;\n            while (reader.pos < end) {\n                [fieldNo, wireType] = reader.tag();\n                if (wireType == WireType.EndGroup) {\n                    break;\n                }\n                const field = type.fields.find(fieldNo);\n                if (!field) {\n                    const data = reader.skip(wireType);\n                    if (options.readUnknownFields) {\n                        this.onUnknownField(message, fieldNo, wireType, data);\n                    }\n                    continue;\n                }\n                readField(message, reader, field, wireType, options);\n            }\n            if (delimitedMessageEncoding && // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n                (wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\n                throw new Error(`invalid end group tag`);\n            }\n        },\n        readField,\n        writeMessage(message, writer, options) {\n            const type = message.getType();\n            for (const field of type.fields.byNumber()) {\n                if (!isFieldSet(field, message)) {\n                    if (field.req) {\n                        throw new Error(`cannot encode field ${type.typeName}.${field.name} to binary: required field not set`);\n                    }\n                    continue;\n                }\n                const value = field.oneof\n                    ? message[field.oneof.localName].value\n                    : message[field.localName];\n                writeField(field, value, writer, options);\n            }\n            if (options.writeUnknownFields) {\n                this.writeUnknownFields(message, writer);\n            }\n            return writer;\n        },\n        writeField(field, value, writer, options) {\n            // The behavior of our internal function has changed, it does no longer\n            // accept `undefined` values for singular scalar and map.\n            // For backwards-compatibility, we support the old form that is part of\n            // the public API through the interface BinaryFormat.\n            if (value === undefined) {\n                return undefined;\n            }\n            writeField(field, value, writer, options);\n        },\n    };\n}\nfunction readField(target, // eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\nreader, field, wireType, options) {\n    let { repeated, localName } = field;\n    if (field.oneof) {\n        target = target[field.oneof.localName];\n        if (target.case != localName) {\n            delete target.value;\n        }\n        target.case = localName;\n        localName = \"value\";\n    }\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            let read = readScalar;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\n            if (field.kind == \"scalar\" && field.L > 0) {\n                read = readScalarLTString;\n            }\n            if (repeated) {\n                let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                const isPacked = wireType == WireType.LengthDelimited &&\n                    scalarType != ScalarType.STRING &&\n                    scalarType != ScalarType.BYTES;\n                if (isPacked) {\n                    let e = reader.uint32() + reader.pos;\n                    while (reader.pos < e) {\n                        arr.push(read(reader, scalarType));\n                    }\n                }\n                else {\n                    arr.push(read(reader, scalarType));\n                }\n            }\n            else {\n                target[localName] = read(reader, scalarType);\n            }\n            break;\n        case \"message\":\n            const messageType = field.T;\n            if (repeated) {\n                // safe to assume presence of array, oneof cannot contain repeated values\n                target[localName].push(readMessageField(reader, new messageType(), options, field));\n            }\n            else {\n                if (isMessage(target[localName])) {\n                    readMessageField(reader, target[localName], options, field);\n                }\n                else {\n                    target[localName] = readMessageField(reader, new messageType(), options, field);\n                    if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\n                        target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\n                    }\n                }\n            }\n            break;\n        case \"map\":\n            let [mapKey, mapVal] = readMapEntry(field, reader, options);\n            // safe to assume presence of map object, oneof cannot contain repeated values\n            target[localName][mapKey] = mapVal;\n            break;\n    }\n}\n// Read a message, avoiding MessageType.fromBinary() to re-use the\n// BinaryReadOptions and the IBinaryReader.\nfunction readMessageField(reader, message, options, field) {\n    const format = message.getType().runtime.bin;\n    const delimited = field === null || field === void 0 ? void 0 : field.delimited;\n    format.readMessage(message, reader, delimited ? field.no : reader.uint32(), // eslint-disable-line @typescript-eslint/strict-boolean-expressions\n    options, delimited);\n    return message;\n}\n// Read a map field, expecting key field = 1, value field = 2\nfunction readMapEntry(field, reader, options) {\n    const length = reader.uint32(), end = reader.pos + length;\n    let key, val;\n    while (reader.pos < end) {\n        const [fieldNo] = reader.tag();\n        switch (fieldNo) {\n            case 1:\n                key = readScalar(reader, field.K);\n                break;\n            case 2:\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        val = readScalar(reader, field.V.T);\n                        break;\n                    case \"enum\":\n                        val = reader.int32();\n                        break;\n                    case \"message\":\n                        val = readMessageField(reader, new field.V.T(), options, undefined);\n                        break;\n                }\n                break;\n        }\n    }\n    if (key === undefined) {\n        key = scalarZeroValue(field.K, LongType.BIGINT);\n    }\n    if (typeof key != \"string\" && typeof key != \"number\") {\n        key = key.toString();\n    }\n    if (val === undefined) {\n        switch (field.V.kind) {\n            case \"scalar\":\n                val = scalarZeroValue(field.V.T, LongType.BIGINT);\n                break;\n            case \"enum\":\n                val = field.V.T.values[0].no;\n                break;\n            case \"message\":\n                val = new field.V.T();\n                break;\n        }\n    }\n    return [key, val];\n}\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\n// sint64, fixed64, sfixed64) as string instead of bigint.\nfunction readScalarLTString(reader, type) {\n    const v = readScalar(reader, type);\n    return typeof v == \"bigint\" ? v.toString() : v;\n}\n// Does not use scalarTypeInfo() for better performance.\nfunction readScalar(reader, type) {\n    switch (type) {\n        case ScalarType.STRING:\n            return reader.string();\n        case ScalarType.BOOL:\n            return reader.bool();\n        case ScalarType.DOUBLE:\n            return reader.double();\n        case ScalarType.FLOAT:\n            return reader.float();\n        case ScalarType.INT32:\n            return reader.int32();\n        case ScalarType.INT64:\n            return reader.int64();\n        case ScalarType.UINT64:\n            return reader.uint64();\n        case ScalarType.FIXED64:\n            return reader.fixed64();\n        case ScalarType.BYTES:\n            return reader.bytes();\n        case ScalarType.FIXED32:\n            return reader.fixed32();\n        case ScalarType.SFIXED32:\n            return reader.sfixed32();\n        case ScalarType.SFIXED64:\n            return reader.sfixed64();\n        case ScalarType.SINT64:\n            return reader.sint64();\n        case ScalarType.UINT32:\n            return reader.uint32();\n        case ScalarType.SINT32:\n            return reader.sint32();\n    }\n}\nfunction writeField(field, value, writer, options) {\n    assert(value !== undefined);\n    const repeated = field.repeated;\n    switch (field.kind) {\n        case \"scalar\":\n        case \"enum\":\n            let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n            if (repeated) {\n                assert(Array.isArray(value));\n                if (field.packed) {\n                    writePacked(writer, scalarType, field.no, value);\n                }\n                else {\n                    for (const item of value) {\n                        writeScalar(writer, scalarType, field.no, item);\n                    }\n                }\n            }\n            else {\n                writeScalar(writer, scalarType, field.no, value);\n            }\n            break;\n        case \"message\":\n            if (repeated) {\n                assert(Array.isArray(value));\n                for (const item of value) {\n                    writeMessageField(writer, options, field, item);\n                }\n            }\n            else {\n                writeMessageField(writer, options, field, value);\n            }\n            break;\n        case \"map\":\n            assert(typeof value == \"object\" && value != null);\n            for (const [key, val] of Object.entries(value)) {\n                writeMapEntry(writer, options, field, key, val);\n            }\n            break;\n    }\n}\nexport function writeMapEntry(writer, options, field, key, value) {\n    writer.tag(field.no, WireType.LengthDelimited);\n    writer.fork();\n    // javascript only allows number or string for object properties\n    // we convert from our representation to the protobuf type\n    let keyValue = key;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\n    switch (field.K) {\n        case ScalarType.INT32:\n        case ScalarType.FIXED32:\n        case ScalarType.UINT32:\n        case ScalarType.SFIXED32:\n        case ScalarType.SINT32:\n            keyValue = Number.parseInt(key);\n            break;\n        case ScalarType.BOOL:\n            assert(key == \"true\" || key == \"false\");\n            keyValue = key == \"true\";\n            break;\n    }\n    // write key, expecting key field number = 1\n    writeScalar(writer, field.K, 1, keyValue);\n    // write value, expecting value field number = 2\n    switch (field.V.kind) {\n        case \"scalar\":\n            writeScalar(writer, field.V.T, 2, value);\n            break;\n        case \"enum\":\n            writeScalar(writer, ScalarType.INT32, 2, value);\n            break;\n        case \"message\":\n            assert(value !== undefined);\n            writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));\n            break;\n    }\n    writer.join();\n}\n// Value must not be undefined\nfunction writeMessageField(writer, options, field, value) {\n    const message = wrapField(field.T, value);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (field.delimited)\n        writer\n            .tag(field.no, WireType.StartGroup)\n            .raw(message.toBinary(options))\n            .tag(field.no, WireType.EndGroup);\n    else\n        writer\n            .tag(field.no, WireType.LengthDelimited)\n            .bytes(message.toBinary(options));\n}\nfunction writeScalar(writer, type, fieldNo, value) {\n    assert(value !== undefined);\n    let [wireType, method] = scalarTypeInfo(type);\n    writer.tag(fieldNo, wireType)[method](value);\n}\nfunction writePacked(writer, type, fieldNo, value) {\n    if (!value.length) {\n        return;\n    }\n    writer.tag(fieldNo, WireType.LengthDelimited).fork();\n    let [, method] = scalarTypeInfo(type);\n    for (let i = 0; i < value.length; i++) {\n        writer[method](value[i]);\n    }\n    writer.join();\n}\n/**\n * Get information for writing a scalar value.\n *\n * Returns tuple:\n * [0]: appropriate WireType\n * [1]: name of the appropriate method of IBinaryWriter\n * [2]: whether the given value is a default value for proto3 semantics\n *\n * If argument `value` is omitted, [2] is always false.\n */\n// TODO replace call-sites writeScalar() and writePacked(), then remove\nfunction scalarTypeInfo(type) {\n    let wireType = WireType.Varint;\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\n    switch (type) {\n        case ScalarType.BYTES:\n        case ScalarType.STRING:\n            wireType = WireType.LengthDelimited;\n            break;\n        case ScalarType.DOUBLE:\n        case ScalarType.FIXED64:\n        case ScalarType.SFIXED64:\n            wireType = WireType.Bit64;\n            break;\n        case ScalarType.FIXED32:\n        case ScalarType.SFIXED32:\n        case ScalarType.FLOAT:\n            wireType = WireType.Bit32;\n            break;\n    }\n    const method = ScalarType[type].toLowerCase();\n    return [wireType, method];\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { setEnumType } from \"./enum.js\";\nimport { Message } from \"../message.js\";\nimport { scalarEquals } from \"./scalars.js\";\nimport { ScalarType } from \"../scalar.js\";\nimport { isMessage } from \"../is-message.js\";\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\nexport function makeUtilCommon() {\n    return {\n        setEnumType,\n        initPartial(source, target) {\n            if (source === undefined) {\n                return;\n            }\n            const type = target.getType();\n            for (const member of type.fields.byMember()) {\n                const localName = member.localName, t = target, s = source;\n                if (s[localName] === undefined) {\n                    // TODO if source is a Message instance, we should use isFieldSet() here to support future field presence\n                    continue;\n                }\n                switch (member.kind) {\n                    case \"oneof\":\n                        const sk = s[localName].case;\n                        if (sk === undefined) {\n                            continue;\n                        }\n                        const sourceField = member.findField(sk);\n                        let val = s[localName].value;\n                        if (sourceField &&\n                            sourceField.kind == \"message\" &&\n                            !isMessage(val, sourceField.T)) {\n                            val = new sourceField.T(val);\n                        }\n                        else if (sourceField &&\n                            sourceField.kind === \"scalar\" &&\n                            sourceField.T === ScalarType.BYTES) {\n                            val = toU8Arr(val);\n                        }\n                        t[localName] = { case: sk, value: val };\n                        break;\n                    case \"scalar\":\n                    case \"enum\":\n                        let copy = s[localName];\n                        if (member.T === ScalarType.BYTES) {\n                            copy = member.repeated\n                                ? copy.map(toU8Arr)\n                                : toU8Arr(copy);\n                        }\n                        t[localName] = copy;\n                        break;\n                    case \"map\":\n                        switch (member.V.kind) {\n                            case \"scalar\":\n                            case \"enum\":\n                                if (member.V.T === ScalarType.BYTES) {\n                                    for (const [k, v] of Object.entries(s[localName])) {\n                                        t[localName][k] = toU8Arr(v);\n                                    }\n                                }\n                                else {\n                                    Object.assign(t[localName], s[localName]);\n                                }\n                                break;\n                            case \"message\":\n                                const messageType = member.V.T;\n                                for (const k of Object.keys(s[localName])) {\n                                    let val = s[localName][k];\n                                    if (!messageType.fieldWrapper) {\n                                        // We only take partial input for messages that are not a wrapper type.\n                                        // For those messages, we recursively normalize the partial input.\n                                        val = new messageType(val);\n                                    }\n                                    t[localName][k] = val;\n                                }\n                                break;\n                        }\n                        break;\n                    case \"message\":\n                        const mt = member.T;\n                        if (member.repeated) {\n                            t[localName] = s[localName].map((val) => isMessage(val, mt) ? val : new mt(val));\n                        }\n                        else {\n                            const val = s[localName];\n                            if (mt.fieldWrapper) {\n                                if (\n                                // We can't use BytesValue.typeName as that will create a circular import\n                                mt.typeName === \"google.protobuf.BytesValue\") {\n                                    t[localName] = toU8Arr(val);\n                                }\n                                else {\n                                    t[localName] = val;\n                                }\n                            }\n                            else {\n                                t[localName] = isMessage(val, mt) ? val : new mt(val);\n                            }\n                        }\n                        break;\n                }\n            }\n        },\n        // TODO use isFieldSet() here to support future field presence\n        equals(type, a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (!a || !b) {\n                return false;\n            }\n            return type.fields.byMember().every((m) => {\n                const va = a[m.localName];\n                const vb = b[m.localName];\n                if (m.repeated) {\n                    if (va.length !== vb.length) {\n                        return false;\n                    }\n                    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\n                    switch (m.kind) {\n                        case \"message\":\n                            return va.every((a, i) => m.T.equals(a, vb[i]));\n                        case \"scalar\":\n                            return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\n                        case \"enum\":\n                            return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\n                    }\n                    throw new Error(`repeated cannot contain ${m.kind}`);\n                }\n                switch (m.kind) {\n                    case \"message\":\n                        return m.T.equals(va, vb);\n                    case \"enum\":\n                        return scalarEquals(ScalarType.INT32, va, vb);\n                    case \"scalar\":\n                        return scalarEquals(m.T, va, vb);\n                    case \"oneof\":\n                        if (va.case !== vb.case) {\n                            return false;\n                        }\n                        const s = m.findField(va.case);\n                        if (s === undefined) {\n                            return true;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\n                        switch (s.kind) {\n                            case \"message\":\n                                return s.T.equals(va.value, vb.value);\n                            case \"enum\":\n                                return scalarEquals(ScalarType.INT32, va.value, vb.value);\n                            case \"scalar\":\n                                return scalarEquals(s.T, va.value, vb.value);\n                        }\n                        throw new Error(`oneof cannot contain ${s.kind}`);\n                    case \"map\":\n                        const keys = Object.keys(va).concat(Object.keys(vb));\n                        switch (m.V.kind) {\n                            case \"message\":\n                                const messageType = m.V.T;\n                                return keys.every((k) => messageType.equals(va[k], vb[k]));\n                            case \"enum\":\n                                return keys.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));\n                            case \"scalar\":\n                                const scalarType = m.V.T;\n                                return keys.every((k) => scalarEquals(scalarType, va[k], vb[k]));\n                        }\n                        break;\n                }\n            });\n        },\n        // TODO use isFieldSet() here to support future field presence\n        clone(message) {\n            const type = message.getType(), target = new type(), any = target;\n            for (const member of type.fields.byMember()) {\n                const source = message[member.localName];\n                let copy;\n                if (member.repeated) {\n                    copy = source.map(cloneSingularField);\n                }\n                else if (member.kind == \"map\") {\n                    copy = any[member.localName];\n                    for (const [key, v] of Object.entries(source)) {\n                        copy[key] = cloneSingularField(v);\n                    }\n                }\n                else if (member.kind == \"oneof\") {\n                    const f = member.findField(source.case);\n                    copy = f\n                        ? { case: source.case, value: cloneSingularField(source.value) }\n                        : { case: undefined };\n                }\n                else {\n                    copy = cloneSingularField(source);\n                }\n                any[member.localName] = copy;\n            }\n            for (const uf of type.runtime.bin.listUnknownFields(message)) {\n                type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);\n            }\n            return target;\n        },\n    };\n}\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\nfunction cloneSingularField(value) {\n    if (value === undefined) {\n        return value;\n    }\n    if (isMessage(value)) {\n        return value.clone();\n    }\n    if (value instanceof Uint8Array) {\n        const c = new Uint8Array(value.byteLength);\n        c.set(value);\n        return c;\n    }\n    return value;\n}\n// converts any ArrayLike<number> to Uint8Array if necessary.\nfunction toU8Arr(input) {\n    return input instanceof Uint8Array ? input : new Uint8Array(input);\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { getEnumType, makeEnum, makeEnumType } from \"./enum.js\";\nimport { makeMessageType } from \"./message-type.js\";\nimport { makeExtension } from \"./extensions.js\";\nimport { makeJsonFormat } from \"./json-format.js\";\nimport { makeBinaryFormat } from \"./binary-format.js\";\nimport { makeUtilCommon } from \"./util-common.js\";\nexport function makeProtoRuntime(syntax, newFieldList, initFields) {\n    return {\n        syntax,\n        json: makeJsonFormat(),\n        bin: makeBinaryFormat(),\n        util: Object.assign(Object.assign({}, makeUtilCommon()), { newFieldList,\n            initFields }),\n        makeMessageType(typeName, fields, opt) {\n            return makeMessageType(this, typeName, fields, opt);\n        },\n        makeEnum,\n        makeEnumType,\n        getEnumType,\n        makeExtension(typeName, extendee, field) {\n            return makeExtension(this, typeName, extendee, field);\n        },\n    };\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nexport class InternalFieldList {\n    constructor(fields, normalizer) {\n        this._fields = fields;\n        this._normalizer = normalizer;\n    }\n    findJsonName(jsonName) {\n        if (!this.jsonNames) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.jsonName] = t[f.name] = f;\n            }\n            this.jsonNames = t;\n        }\n        return this.jsonNames[jsonName];\n    }\n    find(fieldNo) {\n        if (!this.numbers) {\n            const t = {};\n            for (const f of this.list()) {\n                t[f.no] = f;\n            }\n            this.numbers = t;\n        }\n        return this.numbers[fieldNo];\n    }\n    list() {\n        if (!this.all) {\n            this.all = this._normalizer(this._fields);\n        }\n        return this.all;\n    }\n    byNumber() {\n        if (!this.numbersAsc) {\n            this.numbersAsc = this.list()\n                .concat()\n                .sort((a, b) => a.no - b.no);\n        }\n        return this.numbersAsc;\n    }\n    byMember() {\n        if (!this.members) {\n            this.members = [];\n            const a = this.members;\n            let o;\n            for (const f of this.list()) {\n                if (f.oneof) {\n                    if (f.oneof !== o) {\n                        o = f.oneof;\n                        a.push(o);\n                    }\n                }\n                else {\n                    a.push(f);\n                }\n            }\n        }\n        return this.members;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Returns the name of a protobuf element in generated code.\n *\n * Field names - including oneofs - are converted to lowerCamelCase. For\n * messages, enumerations and services, the package name is stripped from\n * the type name. For nested messages and enumerations, the names are joined\n * with an underscore. For methods, the first character is made lowercase.\n */\nexport function localName(desc) {\n    switch (desc.kind) {\n        case \"field\":\n            return localFieldName(desc.name, desc.oneof !== undefined);\n        case \"oneof\":\n            return localOneofName(desc.name);\n        case \"enum\":\n        case \"message\":\n        case \"service\":\n        case \"extension\": {\n            const pkg = desc.file.proto.package;\n            const offset = pkg === undefined ? 0 : pkg.length + 1;\n            const name = desc.typeName.substring(offset).replace(/\\./g, \"_\");\n            // For services, we only care about safe identifiers, not safe object properties,\n            // but we have shipped v1 with a bug that respected object properties, and we\n            // do not want to introduce a breaking change, so we continue to escape for\n            // safe object properties.\n            // See https://github.com/bufbuild/protobuf-es/pull/391\n            return safeObjectProperty(safeIdentifier(name));\n        }\n        case \"enum_value\": {\n            let name = desc.name;\n            const sharedPrefix = desc.parent.sharedPrefix;\n            if (sharedPrefix !== undefined) {\n                name = name.substring(sharedPrefix.length);\n            }\n            return safeObjectProperty(name);\n        }\n        case \"rpc\": {\n            let name = desc.name;\n            if (name.length == 0) {\n                return name;\n            }\n            name = name[0].toLowerCase() + name.substring(1);\n            return safeObjectProperty(name);\n        }\n    }\n}\n/**\n * Returns the name of a field in generated code.\n */\nexport function localFieldName(protoName, inOneof) {\n    const name = protoCamelCase(protoName);\n    if (inOneof) {\n        // oneof member names are not properties, but values of the `case` property.\n        return name;\n    }\n    return safeObjectProperty(safeMessageProperty(name));\n}\n/**\n * Returns the name of a oneof group in generated code.\n */\nexport function localOneofName(protoName) {\n    return localFieldName(protoName, false);\n}\n/**\n * Returns the JSON name for a protobuf field, exactly like protoc does.\n */\nexport const fieldJsonName = protoCamelCase;\n/**\n * Finds a prefix shared by enum values, for example `MY_ENUM_` for\n * `enum MyEnum {MY_ENUM_A=0; MY_ENUM_B=1;}`.\n */\nexport function findEnumSharedPrefix(enumName, valueNames) {\n    const prefix = camelToSnakeCase(enumName) + \"_\";\n    for (const name of valueNames) {\n        if (!name.toLowerCase().startsWith(prefix)) {\n            return undefined;\n        }\n        const shortName = name.substring(prefix.length);\n        if (shortName.length == 0) {\n            return undefined;\n        }\n        if (/^\\d/.test(shortName)) {\n            // identifiers must not start with numbers\n            return undefined;\n        }\n    }\n    return prefix;\n}\n/**\n * Converts lowerCamelCase or UpperCamelCase into lower_snake_case.\n * This is used to find shared prefixes in an enum.\n */\nfunction camelToSnakeCase(camel) {\n    return (camel.substring(0, 1) + camel.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c)).toLowerCase();\n}\n/**\n * Converts snake_case to protoCamelCase according to the convention\n * used by protoc to convert a field name to a JSON name.\n */\nfunction protoCamelCase(snakeCase) {\n    let capNext = false;\n    const b = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let c = snakeCase.charAt(i);\n        switch (c) {\n            case \"_\":\n                capNext = true;\n                break;\n            case \"0\":\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                b.push(c);\n                capNext = false;\n                break;\n            default:\n                if (capNext) {\n                    capNext = false;\n                    c = c.toUpperCase();\n                }\n                b.push(c);\n                break;\n        }\n    }\n    return b.join(\"\");\n}\n/**\n * Names that cannot be used for identifiers, such as class names,\n * but _can_ be used for object properties.\n */\nconst reservedIdentifiers = new Set([\n    // ECMAScript 2015 keywords\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"const\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"instanceof\",\n    \"new\",\n    \"null\",\n    \"return\",\n    \"super\",\n    \"switch\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"typeof\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    // ECMAScript 2015 future reserved keywords\n    \"enum\",\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    // Class name cannot be 'Object' when targeting ES5 with module CommonJS\n    \"Object\",\n    // TypeScript keywords that cannot be used for types (as opposed to variables)\n    \"bigint\",\n    \"number\",\n    \"boolean\",\n    \"string\",\n    \"object\",\n    // Identifiers reserved for the runtime, so we can generate legible code\n    \"globalThis\",\n    \"Uint8Array\",\n    \"Partial\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nconst reservedObjectProperties = new Set([\n    // names reserved by JavaScript\n    \"constructor\",\n    \"toString\",\n    \"toJSON\",\n    \"valueOf\",\n]);\n/**\n * Names that cannot be used for object properties because they are reserved\n * by the runtime.\n */\nconst reservedMessageProperties = new Set([\n    // names reserved by the runtime\n    \"getType\",\n    \"clone\",\n    \"equals\",\n    \"fromBinary\",\n    \"fromJson\",\n    \"fromJsonString\",\n    \"toBinary\",\n    \"toJson\",\n    \"toJsonString\",\n    // names reserved by the runtime for the future\n    \"toObject\",\n]);\nconst fallback = (name) => `${name}$`;\n/**\n * Will wrap names that are Object prototype properties or names reserved\n * for `Message`s.\n */\nconst safeMessageProperty = (name) => {\n    if (reservedMessageProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that cannot be used for object properties because they are reserved\n * by built-in JavaScript properties.\n */\nexport const safeObjectProperty = (name) => {\n    if (reservedObjectProperties.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n/**\n * Names that can be used for identifiers or class properties\n */\nexport const safeIdentifier = (name) => {\n    if (reservedIdentifiers.has(name)) {\n        return fallback(name);\n    }\n    return name;\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { localOneofName } from \"./names.js\";\nimport { assert } from \"./assert.js\";\nexport class InternalOneofInfo {\n    constructor(name) {\n        this.kind = \"oneof\";\n        this.repeated = false;\n        this.packed = false;\n        this.opt = false;\n        this.req = false;\n        this.default = undefined;\n        this.fields = [];\n        this.name = name;\n        this.localName = localOneofName(name);\n    }\n    addField(field) {\n        assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);\n        this.fields.push(field);\n    }\n    findField(localName) {\n        if (!this._lookup) {\n            this._lookup = Object.create(null);\n            for (let i = 0; i < this.fields.length; i++) {\n                this._lookup[this.fields[i].localName] = this.fields[i];\n            }\n        }\n        return this._lookup[localName];\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { InternalOneofInfo } from \"./field.js\";\nimport { fieldJsonName, localFieldName } from \"./names.js\";\nimport { LongType, ScalarType } from \"../scalar.js\";\n/**\n * Convert a collection of field info to an array of normalized FieldInfo.\n *\n * The argument `packedByDefault` specifies whether fields that do not specify\n * `packed` should be packed (proto3) or unpacked (proto2).\n */\nexport function normalizeFieldInfos(fieldInfos, packedByDefault) {\n    var _a, _b, _c, _d, _e, _f;\n    const r = [];\n    let o;\n    for (const field of typeof fieldInfos == \"function\"\n        ? fieldInfos()\n        : fieldInfos) {\n        const f = field;\n        f.localName = localFieldName(field.name, field.oneof !== undefined);\n        f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\n        f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\n        if (field.kind == \"scalar\") {\n            f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\n        }\n        f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;\n        f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;\n        f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;\n        if (field.packed === undefined) {\n            if (packedByDefault) {\n                f.packed =\n                    field.kind == \"enum\" ||\n                        (field.kind == \"scalar\" &&\n                            field.T != ScalarType.BYTES &&\n                            field.T != ScalarType.STRING);\n            }\n            else {\n                f.packed = false;\n            }\n        }\n        // We do not surface options at this time\n        // f.options = field.options ?? emptyReadonlyObject;\n        if (field.oneof !== undefined) {\n            const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\n            if (!o || o.name != ooname) {\n                o = new InternalOneofInfo(ooname);\n            }\n            f.oneof = o;\n            o.addField(f);\n        }\n        r.push(f);\n    }\n    return r;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { scalarZeroValue } from \"./private/scalars.js\";\nimport { normalizeFieldInfos } from \"./private/field-normalize.js\";\n/**\n * Provides functionality for messages defined with the proto3 syntax.\n */\nexport const proto3 = makeProtoRuntime(\"proto3\", (fields) => {\n    return new InternalFieldList(fields, (source) => normalizeFieldInfos(source, true));\n}, \n// TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone\n(target) => {\n    for (const member of target.getType().fields.byMember()) {\n        if (member.opt) {\n            continue;\n        }\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch (member.kind) {\n            case \"oneof\":\n                t[name] = { case: undefined };\n                break;\n            case \"enum\":\n                t[name] = 0;\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n                t[name] = scalarZeroValue(member.T, member.L);\n                break;\n            case \"message\":\n                // message fields are always optional in proto3\n                break;\n        }\n    }\n});\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { makeProtoRuntime } from \"./private/proto-runtime.js\";\nimport { InternalFieldList } from \"./private/field-list.js\";\nimport { normalizeFieldInfos } from \"./private/field-normalize.js\";\n/**\n * Provides functionality for messages defined with the proto2 syntax.\n */\nexport const proto2 = makeProtoRuntime(\"proto2\", (fields) => {\n    return new InternalFieldList(fields, (source) => normalizeFieldInfos(source, false));\n}, \n// TODO merge with proto3 and initExtensionField, also see initPartial, equals, clone\n(target) => {\n    for (const member of target.getType().fields.byMember()) {\n        const name = member.localName, t = target;\n        if (member.repeated) {\n            t[name] = [];\n            continue;\n        }\n        switch (member.kind) {\n            case \"oneof\":\n                t[name] = { case: undefined };\n                break;\n            case \"map\":\n                t[name] = {};\n                break;\n            case \"scalar\":\n            case \"enum\":\n            case \"message\":\n                // In contrast to proto3, enum and scalar fields have no intrinsic default value,\n                // only an optional explicit default value.\n                // Unlike proto3 intrinsic default values, proto2 explicit default values are not\n                // set on construction, because they are not omitted on the wire. If we did set\n                // default values on construction, a deserialize-serialize round-trip would add\n                // fields to a message.\n                break;\n        }\n    }\n});\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Export global Number constants. This is done so that we can safely use\n// these global constants when generating code and be assured we're using\n// the correct values. We cannot rely on globalThis since we support ES2017\n// and globalThis was introduced in ES2020. We also don't want to explicitly\n// generate code using, for example, Number.NaN, since this could clash with\n// a message name of Number. Instead we can export them here since this will\n// be in a different scope as the generated code and we are guaranteed to use\n// the intended global values.\nexport const protoDouble = {\n    NaN: Number.NaN,\n    POSITIVE_INFINITY: Number.POSITIVE_INFINITY,\n    NEGATIVE_INFINITY: Number.NEGATIVE_INFINITY,\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * MethodKind represents the four method types that can be declared in\n * protobuf with the `stream` keyword:\n *\n * 1. Unary:           rpc (Input) returns (Output)\n * 2. ServerStreaming: rpc (Input) returns (stream Output)\n * 3. ClientStreaming: rpc (stream Input) returns (Output)\n * 4. BiDiStreaming:   rpc (stream Input) returns (stream Output)\n */\nexport var MethodKind;\n(function (MethodKind) {\n    MethodKind[MethodKind[\"Unary\"] = 0] = \"Unary\";\n    MethodKind[MethodKind[\"ServerStreaming\"] = 1] = \"ServerStreaming\";\n    MethodKind[MethodKind[\"ClientStreaming\"] = 2] = \"ClientStreaming\";\n    MethodKind[MethodKind[\"BiDiStreaming\"] = 3] = \"BiDiStreaming\";\n})(MethodKind || (MethodKind = {}));\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or just\n * idempotent, or neither? HTTP based RPC implementation may choose GET verb\n * for safe methods, and PUT verb for idempotent methods instead of the\n * default POST.\n *\n * This enum matches the protobuf enum google.protobuf.MethodOptions.IdempotencyLevel,\n * defined in the well-known type google/protobuf/descriptor.proto, but\n * drops UNKNOWN.\n */\nexport var MethodIdempotency;\n(function (MethodIdempotency) {\n    /**\n     * Idempotent, no side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"NoSideEffects\"] = 1] = \"NoSideEffects\";\n    /**\n     * Idempotent, but may have side effects.\n     */\n    MethodIdempotency[MethodIdempotency[\"Idempotent\"] = 2] = \"Idempotent\";\n})(MethodIdempotency || (MethodIdempotency = {}));\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Author: kenton@google.com (Kenton Varda)\n//  Based on original Protocol Buffers design by\n//  Sanjay Ghemawat, Jeff Dean, and others.\n//\n// The messages in this file describe the definitions found in .proto files.\n// A valid .proto file can be translated directly to a FileDescriptorProto\n// without any other information (e.g. without reading its imports).\n// @generated by protoc-gen-es v1.9.0 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/descriptor.proto (package google.protobuf, syntax proto2)\n/* eslint-disable */\nimport { proto2 } from \"../../proto2.js\";\nimport { Message } from \"../../message.js\";\n/**\n * The full set of known editions.\n *\n * @generated from enum google.protobuf.Edition\n */\nexport var Edition;\n(function (Edition) {\n    /**\n     * A placeholder for an unknown edition value.\n     *\n     * @generated from enum value: EDITION_UNKNOWN = 0;\n     */\n    Edition[Edition[\"EDITION_UNKNOWN\"] = 0] = \"EDITION_UNKNOWN\";\n    /**\n     * Legacy syntax \"editions\".  These pre-date editions, but behave much like\n     * distinct editions.  These can't be used to specify the edition of proto\n     * files, but feature definitions must supply proto2/proto3 defaults for\n     * backwards compatibility.\n     *\n     * @generated from enum value: EDITION_PROTO2 = 998;\n     */\n    Edition[Edition[\"EDITION_PROTO2\"] = 998] = \"EDITION_PROTO2\";\n    /**\n     * @generated from enum value: EDITION_PROTO3 = 999;\n     */\n    Edition[Edition[\"EDITION_PROTO3\"] = 999] = \"EDITION_PROTO3\";\n    /**\n     * Editions that have been released.  The specific values are arbitrary and\n     * should not be depended on, but they will always be time-ordered for easy\n     * comparison.\n     *\n     * @generated from enum value: EDITION_2023 = 1000;\n     */\n    Edition[Edition[\"EDITION_2023\"] = 1000] = \"EDITION_2023\";\n    /**\n     * @generated from enum value: EDITION_2024 = 1001;\n     */\n    Edition[Edition[\"EDITION_2024\"] = 1001] = \"EDITION_2024\";\n    /**\n     * Placeholder editions for testing feature resolution.  These should not be\n     * used or relyed on outside of tests.\n     *\n     * @generated from enum value: EDITION_1_TEST_ONLY = 1;\n     */\n    Edition[Edition[\"EDITION_1_TEST_ONLY\"] = 1] = \"EDITION_1_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_2_TEST_ONLY = 2;\n     */\n    Edition[Edition[\"EDITION_2_TEST_ONLY\"] = 2] = \"EDITION_2_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99997_TEST_ONLY = 99997;\n     */\n    Edition[Edition[\"EDITION_99997_TEST_ONLY\"] = 99997] = \"EDITION_99997_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99998_TEST_ONLY = 99998;\n     */\n    Edition[Edition[\"EDITION_99998_TEST_ONLY\"] = 99998] = \"EDITION_99998_TEST_ONLY\";\n    /**\n     * @generated from enum value: EDITION_99999_TEST_ONLY = 99999;\n     */\n    Edition[Edition[\"EDITION_99999_TEST_ONLY\"] = 99999] = \"EDITION_99999_TEST_ONLY\";\n    /**\n     * Placeholder for specifying unbounded edition support.  This should only\n     * ever be used by plugins that can expect to never require any changes to\n     * support a new edition.\n     *\n     * @generated from enum value: EDITION_MAX = 2147483647;\n     */\n    Edition[Edition[\"EDITION_MAX\"] = 2147483647] = \"EDITION_MAX\";\n})(Edition || (Edition = {}));\n// Retrieve enum metadata with: proto2.getEnumType(Edition)\nproto2.util.setEnumType(Edition, \"google.protobuf.Edition\", [\n    { no: 0, name: \"EDITION_UNKNOWN\" },\n    { no: 998, name: \"EDITION_PROTO2\" },\n    { no: 999, name: \"EDITION_PROTO3\" },\n    { no: 1000, name: \"EDITION_2023\" },\n    { no: 1001, name: \"EDITION_2024\" },\n    { no: 1, name: \"EDITION_1_TEST_ONLY\" },\n    { no: 2, name: \"EDITION_2_TEST_ONLY\" },\n    { no: 99997, name: \"EDITION_99997_TEST_ONLY\" },\n    { no: 99998, name: \"EDITION_99998_TEST_ONLY\" },\n    { no: 99999, name: \"EDITION_99999_TEST_ONLY\" },\n    { no: 2147483647, name: \"EDITION_MAX\" },\n]);\n/**\n * The protocol compiler can output a FileDescriptorSet containing the .proto\n * files it parses.\n *\n * @generated from message google.protobuf.FileDescriptorSet\n */\nexport class FileDescriptorSet extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FileDescriptorProto file = 1;\n         */\n        this.file = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileDescriptorSet().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileDescriptorSet().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileDescriptorSet().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileDescriptorSet, a, b);\n    }\n}\nFileDescriptorSet.runtime = proto2;\nFileDescriptorSet.typeName = \"google.protobuf.FileDescriptorSet\";\nFileDescriptorSet.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"file\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n]);\n/**\n * Describes a complete .proto file.\n *\n * @generated from message google.protobuf.FileDescriptorProto\n */\nexport class FileDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Names of files imported by this file.\n         *\n         * @generated from field: repeated string dependency = 3;\n         */\n        this.dependency = [];\n        /**\n         * Indexes of the public imported files in the dependency list above.\n         *\n         * @generated from field: repeated int32 public_dependency = 10;\n         */\n        this.publicDependency = [];\n        /**\n         * Indexes of the weak imported files in the dependency list.\n         * For Google-internal migration only. Do not use.\n         *\n         * @generated from field: repeated int32 weak_dependency = 11;\n         */\n        this.weakDependency = [];\n        /**\n         * All top-level definitions in this file.\n         *\n         * @generated from field: repeated google.protobuf.DescriptorProto message_type = 4;\n         */\n        this.messageType = [];\n        /**\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 5;\n         */\n        this.enumType = [];\n        /**\n         * @generated from field: repeated google.protobuf.ServiceDescriptorProto service = 6;\n         */\n        this.service = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 7;\n         */\n        this.extension = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileDescriptorProto, a, b);\n    }\n}\nFileDescriptorProto.runtime = proto2;\nFileDescriptorProto.typeName = \"google.protobuf.FileDescriptorProto\";\nFileDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"dependency\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 10, name: \"public_dependency\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n    { no: 11, name: \"weak_dependency\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true },\n    { no: 4, name: \"message_type\", kind: \"message\", T: DescriptorProto, repeated: true },\n    { no: 5, name: \"enum_type\", kind: \"message\", T: EnumDescriptorProto, repeated: true },\n    { no: 6, name: \"service\", kind: \"message\", T: ServiceDescriptorProto, repeated: true },\n    { no: 7, name: \"extension\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 8, name: \"options\", kind: \"message\", T: FileOptions, opt: true },\n    { no: 9, name: \"source_code_info\", kind: \"message\", T: SourceCodeInfo, opt: true },\n    { no: 12, name: \"syntax\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 14, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n]);\n/**\n * Describes a message type.\n *\n * @generated from message google.protobuf.DescriptorProto\n */\nexport class DescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto field = 2;\n         */\n        this.field = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldDescriptorProto extension = 6;\n         */\n        this.extension = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto nested_type = 3;\n         */\n        this.nestedType = [];\n        /**\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto enum_type = 4;\n         */\n        this.enumType = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5;\n         */\n        this.extensionRange = [];\n        /**\n         * @generated from field: repeated google.protobuf.OneofDescriptorProto oneof_decl = 8;\n         */\n        this.oneofDecl = [];\n        /**\n         * @generated from field: repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9;\n         */\n        this.reservedRange = [];\n        /**\n         * Reserved field names, which may not be used by fields in the same message.\n         * A given name may only be reserved once.\n         *\n         * @generated from field: repeated string reserved_name = 10;\n         */\n        this.reservedName = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto, a, b);\n    }\n}\nDescriptorProto.runtime = proto2;\nDescriptorProto.typeName = \"google.protobuf.DescriptorProto\";\nDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"field\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 6, name: \"extension\", kind: \"message\", T: FieldDescriptorProto, repeated: true },\n    { no: 3, name: \"nested_type\", kind: \"message\", T: DescriptorProto, repeated: true },\n    { no: 4, name: \"enum_type\", kind: \"message\", T: EnumDescriptorProto, repeated: true },\n    { no: 5, name: \"extension_range\", kind: \"message\", T: DescriptorProto_ExtensionRange, repeated: true },\n    { no: 8, name: \"oneof_decl\", kind: \"message\", T: OneofDescriptorProto, repeated: true },\n    { no: 7, name: \"options\", kind: \"message\", T: MessageOptions, opt: true },\n    { no: 9, name: \"reserved_range\", kind: \"message\", T: DescriptorProto_ReservedRange, repeated: true },\n    { no: 10, name: \"reserved_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.DescriptorProto.ExtensionRange\n */\nexport class DescriptorProto_ExtensionRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto_ExtensionRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto_ExtensionRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto_ExtensionRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto_ExtensionRange, a, b);\n    }\n}\nDescriptorProto_ExtensionRange.runtime = proto2;\nDescriptorProto_ExtensionRange.typeName = \"google.protobuf.DescriptorProto.ExtensionRange\";\nDescriptorProto_ExtensionRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"options\", kind: \"message\", T: ExtensionRangeOptions, opt: true },\n]);\n/**\n * Range of reserved tag numbers. Reserved tag numbers may not be used by\n * fields or extension ranges in the same message. Reserved ranges may\n * not overlap.\n *\n * @generated from message google.protobuf.DescriptorProto.ReservedRange\n */\nexport class DescriptorProto_ReservedRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new DescriptorProto_ReservedRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DescriptorProto_ReservedRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DescriptorProto_ReservedRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(DescriptorProto_ReservedRange, a, b);\n    }\n}\nDescriptorProto_ReservedRange.runtime = proto2;\nDescriptorProto_ReservedRange.typeName = \"google.protobuf.DescriptorProto.ReservedRange\";\nDescriptorProto_ReservedRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n]);\n/**\n * @generated from message google.protobuf.ExtensionRangeOptions\n */\nexport class ExtensionRangeOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        /**\n         * For external users: DO NOT USE. We are in the process of open sourcing\n         * extension declaration and executing internal cleanups before it can be\n         * used externally.\n         *\n         * @generated from field: repeated google.protobuf.ExtensionRangeOptions.Declaration declaration = 2;\n         */\n        this.declaration = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ExtensionRangeOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ExtensionRangeOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ExtensionRangeOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ExtensionRangeOptions, a, b);\n    }\n}\nExtensionRangeOptions.runtime = proto2;\nExtensionRangeOptions.typeName = \"google.protobuf.ExtensionRangeOptions\";\nExtensionRangeOptions.fields = proto2.util.newFieldList(() => [\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n    { no: 2, name: \"declaration\", kind: \"message\", T: ExtensionRangeOptions_Declaration, repeated: true },\n    { no: 50, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 3, name: \"verification\", kind: \"enum\", T: proto2.getEnumType(ExtensionRangeOptions_VerificationState), opt: true, default: ExtensionRangeOptions_VerificationState.UNVERIFIED },\n]);\n/**\n * The verification state of the extension range.\n *\n * @generated from enum google.protobuf.ExtensionRangeOptions.VerificationState\n */\nexport var ExtensionRangeOptions_VerificationState;\n(function (ExtensionRangeOptions_VerificationState) {\n    /**\n     * All the extensions of the range must be declared.\n     *\n     * @generated from enum value: DECLARATION = 0;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"DECLARATION\"] = 0] = \"DECLARATION\";\n    /**\n     * @generated from enum value: UNVERIFIED = 1;\n     */\n    ExtensionRangeOptions_VerificationState[ExtensionRangeOptions_VerificationState[\"UNVERIFIED\"] = 1] = \"UNVERIFIED\";\n})(ExtensionRangeOptions_VerificationState || (ExtensionRangeOptions_VerificationState = {}));\n// Retrieve enum metadata with: proto2.getEnumType(ExtensionRangeOptions_VerificationState)\nproto2.util.setEnumType(ExtensionRangeOptions_VerificationState, \"google.protobuf.ExtensionRangeOptions.VerificationState\", [\n    { no: 0, name: \"DECLARATION\" },\n    { no: 1, name: \"UNVERIFIED\" },\n]);\n/**\n * @generated from message google.protobuf.ExtensionRangeOptions.Declaration\n */\nexport class ExtensionRangeOptions_Declaration extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ExtensionRangeOptions_Declaration().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ExtensionRangeOptions_Declaration().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ExtensionRangeOptions_Declaration().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ExtensionRangeOptions_Declaration, a, b);\n    }\n}\nExtensionRangeOptions_Declaration.runtime = proto2;\nExtensionRangeOptions_Declaration.typeName = \"google.protobuf.ExtensionRangeOptions.Declaration\";\nExtensionRangeOptions_Declaration.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"full_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 5, name: \"reserved\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 6, name: \"repeated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n]);\n/**\n * Describes a field within a message.\n *\n * @generated from message google.protobuf.FieldDescriptorProto\n */\nexport class FieldDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldDescriptorProto, a, b);\n    }\n}\nFieldDescriptorProto.runtime = proto2;\nFieldDescriptorProto.typeName = \"google.protobuf.FieldDescriptorProto\";\nFieldDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"label\", kind: \"enum\", T: proto2.getEnumType(FieldDescriptorProto_Label), opt: true },\n    { no: 5, name: \"type\", kind: \"enum\", T: proto2.getEnumType(FieldDescriptorProto_Type), opt: true },\n    { no: 6, name: \"type_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"extendee\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 7, name: \"default_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 9, name: \"oneof_index\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 10, name: \"json_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 8, name: \"options\", kind: \"message\", T: FieldOptions, opt: true },\n    { no: 17, name: \"proto3_optional\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n]);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Type\n */\nexport var FieldDescriptorProto_Type;\n(function (FieldDescriptorProto_Type) {\n    /**\n     * 0 is reserved for errors.\n     * Order is weird for historical reasons.\n     *\n     * @generated from enum value: TYPE_DOUBLE = 1;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    /**\n     * @generated from enum value: TYPE_FLOAT = 2;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FLOAT\"] = 2] = \"FLOAT\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT64 = 3;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT64\"] = 3] = \"INT64\";\n    /**\n     * @generated from enum value: TYPE_UINT64 = 4;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT64\"] = 4] = \"UINT64\";\n    /**\n     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n     * negative values are likely.\n     *\n     * @generated from enum value: TYPE_INT32 = 5;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"INT32\"] = 5] = \"INT32\";\n    /**\n     * @generated from enum value: TYPE_FIXED64 = 6;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED64\"] = 6] = \"FIXED64\";\n    /**\n     * @generated from enum value: TYPE_FIXED32 = 7;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"FIXED32\"] = 7] = \"FIXED32\";\n    /**\n     * @generated from enum value: TYPE_BOOL = 8;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BOOL\"] = 8] = \"BOOL\";\n    /**\n     * @generated from enum value: TYPE_STRING = 9;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"STRING\"] = 9] = \"STRING\";\n    /**\n     * Tag-delimited aggregate.\n     * Group type is deprecated and not supported after google.protobuf. However, Proto3\n     * implementations should still be able to parse the group wire format and\n     * treat group fields as unknown fields.  In Editions, the group wire format\n     * can be enabled via the `message_encoding` feature.\n     *\n     * @generated from enum value: TYPE_GROUP = 10;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"GROUP\"] = 10] = \"GROUP\";\n    /**\n     * Length-delimited aggregate.\n     *\n     * @generated from enum value: TYPE_MESSAGE = 11;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"MESSAGE\"] = 11] = \"MESSAGE\";\n    /**\n     * New in version 2.\n     *\n     * @generated from enum value: TYPE_BYTES = 12;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"BYTES\"] = 12] = \"BYTES\";\n    /**\n     * @generated from enum value: TYPE_UINT32 = 13;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"UINT32\"] = 13] = \"UINT32\";\n    /**\n     * @generated from enum value: TYPE_ENUM = 14;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"ENUM\"] = 14] = \"ENUM\";\n    /**\n     * @generated from enum value: TYPE_SFIXED32 = 15;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    /**\n     * @generated from enum value: TYPE_SFIXED64 = 16;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT32 = 17;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT32\"] = 17] = \"SINT32\";\n    /**\n     * Uses ZigZag encoding.\n     *\n     * @generated from enum value: TYPE_SINT64 = 18;\n     */\n    FieldDescriptorProto_Type[FieldDescriptorProto_Type[\"SINT64\"] = 18] = \"SINT64\";\n})(FieldDescriptorProto_Type || (FieldDescriptorProto_Type = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Type)\nproto2.util.setEnumType(FieldDescriptorProto_Type, \"google.protobuf.FieldDescriptorProto.Type\", [\n    { no: 1, name: \"TYPE_DOUBLE\" },\n    { no: 2, name: \"TYPE_FLOAT\" },\n    { no: 3, name: \"TYPE_INT64\" },\n    { no: 4, name: \"TYPE_UINT64\" },\n    { no: 5, name: \"TYPE_INT32\" },\n    { no: 6, name: \"TYPE_FIXED64\" },\n    { no: 7, name: \"TYPE_FIXED32\" },\n    { no: 8, name: \"TYPE_BOOL\" },\n    { no: 9, name: \"TYPE_STRING\" },\n    { no: 10, name: \"TYPE_GROUP\" },\n    { no: 11, name: \"TYPE_MESSAGE\" },\n    { no: 12, name: \"TYPE_BYTES\" },\n    { no: 13, name: \"TYPE_UINT32\" },\n    { no: 14, name: \"TYPE_ENUM\" },\n    { no: 15, name: \"TYPE_SFIXED32\" },\n    { no: 16, name: \"TYPE_SFIXED64\" },\n    { no: 17, name: \"TYPE_SINT32\" },\n    { no: 18, name: \"TYPE_SINT64\" },\n]);\n/**\n * @generated from enum google.protobuf.FieldDescriptorProto.Label\n */\nexport var FieldDescriptorProto_Label;\n(function (FieldDescriptorProto_Label) {\n    /**\n     * 0 is reserved for errors\n     *\n     * @generated from enum value: LABEL_OPTIONAL = 1;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /**\n     * @generated from enum value: LABEL_REPEATED = 3;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REPEATED\"] = 3] = \"REPEATED\";\n    /**\n     * The required label is only allowed in google.protobuf.  In proto3 and Editions\n     * it's explicitly prohibited.  In Editions, the `field_presence` feature\n     * can be used to get this behavior.\n     *\n     * @generated from enum value: LABEL_REQUIRED = 2;\n     */\n    FieldDescriptorProto_Label[FieldDescriptorProto_Label[\"REQUIRED\"] = 2] = \"REQUIRED\";\n})(FieldDescriptorProto_Label || (FieldDescriptorProto_Label = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldDescriptorProto_Label)\nproto2.util.setEnumType(FieldDescriptorProto_Label, \"google.protobuf.FieldDescriptorProto.Label\", [\n    { no: 1, name: \"LABEL_OPTIONAL\" },\n    { no: 3, name: \"LABEL_REPEATED\" },\n    { no: 2, name: \"LABEL_REQUIRED\" },\n]);\n/**\n * Describes a oneof.\n *\n * @generated from message google.protobuf.OneofDescriptorProto\n */\nexport class OneofDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new OneofDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new OneofDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new OneofDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(OneofDescriptorProto, a, b);\n    }\n}\nOneofDescriptorProto.runtime = proto2;\nOneofDescriptorProto.typeName = \"google.protobuf.OneofDescriptorProto\";\nOneofDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"options\", kind: \"message\", T: OneofOptions, opt: true },\n]);\n/**\n * Describes an enum type.\n *\n * @generated from message google.protobuf.EnumDescriptorProto\n */\nexport class EnumDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.EnumValueDescriptorProto value = 2;\n         */\n        this.value = [];\n        /**\n         * Range of reserved numeric values. Reserved numeric values may not be used\n         * by enum values in the same enum declaration. Reserved ranges may not\n         * overlap.\n         *\n         * @generated from field: repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4;\n         */\n        this.reservedRange = [];\n        /**\n         * Reserved enum value names, which may not be reused. A given name may only\n         * be reserved once.\n         *\n         * @generated from field: repeated string reserved_name = 5;\n         */\n        this.reservedName = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumDescriptorProto, a, b);\n    }\n}\nEnumDescriptorProto.runtime = proto2;\nEnumDescriptorProto.typeName = \"google.protobuf.EnumDescriptorProto\";\nEnumDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"value\", kind: \"message\", T: EnumValueDescriptorProto, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: EnumOptions, opt: true },\n    { no: 4, name: \"reserved_range\", kind: \"message\", T: EnumDescriptorProto_EnumReservedRange, repeated: true },\n    { no: 5, name: \"reserved_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * Range of reserved numeric values. Reserved values may not be used by\n * entries in the same enum. Reserved ranges may not overlap.\n *\n * Note that this is distinct from DescriptorProto.ReservedRange in that it\n * is inclusive such that it can appropriately represent the entire int32\n * domain.\n *\n * @generated from message google.protobuf.EnumDescriptorProto.EnumReservedRange\n */\nexport class EnumDescriptorProto_EnumReservedRange extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumDescriptorProto_EnumReservedRange().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumDescriptorProto_EnumReservedRange, a, b);\n    }\n}\nEnumDescriptorProto_EnumReservedRange.runtime = proto2;\nEnumDescriptorProto_EnumReservedRange.typeName = \"google.protobuf.EnumDescriptorProto.EnumReservedRange\";\nEnumDescriptorProto_EnumReservedRange.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"start\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n]);\n/**\n * Describes a value within an enum.\n *\n * @generated from message google.protobuf.EnumValueDescriptorProto\n */\nexport class EnumValueDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValueDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValueDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValueDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumValueDescriptorProto, a, b);\n    }\n}\nEnumValueDescriptorProto.runtime = proto2;\nEnumValueDescriptorProto.typeName = \"google.protobuf.EnumValueDescriptorProto\";\nEnumValueDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"options\", kind: \"message\", T: EnumValueOptions, opt: true },\n]);\n/**\n * Describes a service.\n *\n * @generated from message google.protobuf.ServiceDescriptorProto\n */\nexport class ServiceDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.MethodDescriptorProto method = 2;\n         */\n        this.method = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ServiceDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ServiceDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ServiceDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ServiceDescriptorProto, a, b);\n    }\n}\nServiceDescriptorProto.runtime = proto2;\nServiceDescriptorProto.typeName = \"google.protobuf.ServiceDescriptorProto\";\nServiceDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"method\", kind: \"message\", T: MethodDescriptorProto, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: ServiceOptions, opt: true },\n]);\n/**\n * Describes a method of a service.\n *\n * @generated from message google.protobuf.MethodDescriptorProto\n */\nexport class MethodDescriptorProto extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MethodDescriptorProto().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MethodDescriptorProto().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MethodDescriptorProto().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MethodDescriptorProto, a, b);\n    }\n}\nMethodDescriptorProto.runtime = proto2;\nMethodDescriptorProto.typeName = \"google.protobuf.MethodDescriptorProto\";\nMethodDescriptorProto.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"input_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"output_type\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"options\", kind: \"message\", T: MethodOptions, opt: true },\n    { no: 5, name: \"client_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 6, name: \"server_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n]);\n/**\n * @generated from message google.protobuf.FileOptions\n */\nexport class FileOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here.\n         * See the documentation for the \"Options\" section above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FileOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FileOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FileOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FileOptions, a, b);\n    }\n}\nFileOptions.runtime = proto2;\nFileOptions.typeName = \"google.protobuf.FileOptions\";\nFileOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"java_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 8, name: \"java_outer_classname\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 10, name: \"java_multiple_files\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 20, name: \"java_generate_equals_and_hash\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 27, name: \"java_string_check_utf8\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 9, name: \"optimize_for\", kind: \"enum\", T: proto2.getEnumType(FileOptions_OptimizeMode), opt: true, default: FileOptions_OptimizeMode.SPEED },\n    { no: 11, name: \"go_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 16, name: \"cc_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 17, name: \"java_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 18, name: \"py_generic_services\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 23, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 31, name: \"cc_enable_arenas\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: true },\n    { no: 36, name: \"objc_class_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 37, name: \"csharp_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 39, name: \"swift_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 40, name: \"php_class_prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 41, name: \"php_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 44, name: \"php_metadata_namespace\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 45, name: \"ruby_package\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 50, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * Generated classes can be optimized for speed or code size.\n *\n * @generated from enum google.protobuf.FileOptions.OptimizeMode\n */\nexport var FileOptions_OptimizeMode;\n(function (FileOptions_OptimizeMode) {\n    /**\n     * Generate complete code for parsing, serialization,\n     *\n     * @generated from enum value: SPEED = 1;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"SPEED\"] = 1] = \"SPEED\";\n    /**\n     * etc.\n     *\n     * Use ReflectionOps to implement these methods.\n     *\n     * @generated from enum value: CODE_SIZE = 2;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"CODE_SIZE\"] = 2] = \"CODE_SIZE\";\n    /**\n     * Generate code using MessageLite and the lite runtime.\n     *\n     * @generated from enum value: LITE_RUNTIME = 3;\n     */\n    FileOptions_OptimizeMode[FileOptions_OptimizeMode[\"LITE_RUNTIME\"] = 3] = \"LITE_RUNTIME\";\n})(FileOptions_OptimizeMode || (FileOptions_OptimizeMode = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FileOptions_OptimizeMode)\nproto2.util.setEnumType(FileOptions_OptimizeMode, \"google.protobuf.FileOptions.OptimizeMode\", [\n    { no: 1, name: \"SPEED\" },\n    { no: 2, name: \"CODE_SIZE\" },\n    { no: 3, name: \"LITE_RUNTIME\" },\n]);\n/**\n * @generated from message google.protobuf.MessageOptions\n */\nexport class MessageOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MessageOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MessageOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MessageOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MessageOptions, a, b);\n    }\n}\nMessageOptions.runtime = proto2;\nMessageOptions.typeName = \"google.protobuf.MessageOptions\";\nMessageOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"message_set_wire_format\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 2, name: \"no_standard_descriptor_accessor\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 7, name: \"map_entry\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 11, name: \"deprecated_legacy_json_field_conflicts\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 12, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.FieldOptions\n */\nexport class FieldOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FieldOptions.OptionTargetType targets = 19;\n         */\n        this.targets = [];\n        /**\n         * @generated from field: repeated google.protobuf.FieldOptions.EditionDefault edition_defaults = 20;\n         */\n        this.editionDefaults = [];\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldOptions, a, b);\n    }\n}\nFieldOptions.runtime = proto2;\nFieldOptions.typeName = \"google.protobuf.FieldOptions\";\nFieldOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"ctype\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_CType), opt: true, default: FieldOptions_CType.STRING },\n    { no: 2, name: \"packed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 6, name: \"jstype\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_JSType), opt: true, default: FieldOptions_JSType.JS_NORMAL },\n    { no: 5, name: \"lazy\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 15, name: \"unverified_lazy\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 10, name: \"weak\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 16, name: \"debug_redact\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 17, name: \"retention\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_OptionRetention), opt: true },\n    { no: 19, name: \"targets\", kind: \"enum\", T: proto2.getEnumType(FieldOptions_OptionTargetType), repeated: true },\n    { no: 20, name: \"edition_defaults\", kind: \"message\", T: FieldOptions_EditionDefault, repeated: true },\n    { no: 21, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from enum google.protobuf.FieldOptions.CType\n */\nexport var FieldOptions_CType;\n(function (FieldOptions_CType) {\n    /**\n     * Default mode.\n     *\n     * @generated from enum value: STRING = 0;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING\"] = 0] = \"STRING\";\n    /**\n     * The option [ctype=CORD] may be applied to a non-repeated field of type\n     * \"bytes\". It indicates that in C++, the data should be stored in a Cord\n     * instead of a string.  For very large strings, this may reduce memory\n     * fragmentation. It may also allow better performance when parsing from a\n     * Cord, or when parsing with aliasing enabled, as the parsed Cord may then\n     * alias the original buffer.\n     *\n     * @generated from enum value: CORD = 1;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"CORD\"] = 1] = \"CORD\";\n    /**\n     * @generated from enum value: STRING_PIECE = 2;\n     */\n    FieldOptions_CType[FieldOptions_CType[\"STRING_PIECE\"] = 2] = \"STRING_PIECE\";\n})(FieldOptions_CType || (FieldOptions_CType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_CType)\nproto2.util.setEnumType(FieldOptions_CType, \"google.protobuf.FieldOptions.CType\", [\n    { no: 0, name: \"STRING\" },\n    { no: 1, name: \"CORD\" },\n    { no: 2, name: \"STRING_PIECE\" },\n]);\n/**\n * @generated from enum google.protobuf.FieldOptions.JSType\n */\nexport var FieldOptions_JSType;\n(function (FieldOptions_JSType) {\n    /**\n     * Use the default type.\n     *\n     * @generated from enum value: JS_NORMAL = 0;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NORMAL\"] = 0] = \"JS_NORMAL\";\n    /**\n     * Use JavaScript strings.\n     *\n     * @generated from enum value: JS_STRING = 1;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_STRING\"] = 1] = \"JS_STRING\";\n    /**\n     * Use JavaScript numbers.\n     *\n     * @generated from enum value: JS_NUMBER = 2;\n     */\n    FieldOptions_JSType[FieldOptions_JSType[\"JS_NUMBER\"] = 2] = \"JS_NUMBER\";\n})(FieldOptions_JSType || (FieldOptions_JSType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_JSType)\nproto2.util.setEnumType(FieldOptions_JSType, \"google.protobuf.FieldOptions.JSType\", [\n    { no: 0, name: \"JS_NORMAL\" },\n    { no: 1, name: \"JS_STRING\" },\n    { no: 2, name: \"JS_NUMBER\" },\n]);\n/**\n * If set to RETENTION_SOURCE, the option will be omitted from the binary.\n * Note: as of January 2023, support for this is in progress and does not yet\n * have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionRetention\n */\nexport var FieldOptions_OptionRetention;\n(function (FieldOptions_OptionRetention) {\n    /**\n     * @generated from enum value: RETENTION_UNKNOWN = 0;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_UNKNOWN\"] = 0] = \"RETENTION_UNKNOWN\";\n    /**\n     * @generated from enum value: RETENTION_RUNTIME = 1;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_RUNTIME\"] = 1] = \"RETENTION_RUNTIME\";\n    /**\n     * @generated from enum value: RETENTION_SOURCE = 2;\n     */\n    FieldOptions_OptionRetention[FieldOptions_OptionRetention[\"RETENTION_SOURCE\"] = 2] = \"RETENTION_SOURCE\";\n})(FieldOptions_OptionRetention || (FieldOptions_OptionRetention = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionRetention)\nproto2.util.setEnumType(FieldOptions_OptionRetention, \"google.protobuf.FieldOptions.OptionRetention\", [\n    { no: 0, name: \"RETENTION_UNKNOWN\" },\n    { no: 1, name: \"RETENTION_RUNTIME\" },\n    { no: 2, name: \"RETENTION_SOURCE\" },\n]);\n/**\n * This indicates the types of entities that the field may apply to when used\n * as an option. If it is unset, then the field may be freely used as an\n * option on any kind of entity. Note: as of January 2023, support for this is\n * in progress and does not yet have an effect (b/264593489).\n *\n * @generated from enum google.protobuf.FieldOptions.OptionTargetType\n */\nexport var FieldOptions_OptionTargetType;\n(function (FieldOptions_OptionTargetType) {\n    /**\n     * @generated from enum value: TARGET_TYPE_UNKNOWN = 0;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_UNKNOWN\"] = 0] = \"TARGET_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FILE = 1;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FILE\"] = 1] = \"TARGET_TYPE_FILE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_EXTENSION_RANGE = 2;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_EXTENSION_RANGE\"] = 2] = \"TARGET_TYPE_EXTENSION_RANGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_MESSAGE = 3;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_MESSAGE\"] = 3] = \"TARGET_TYPE_MESSAGE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_FIELD = 4;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_FIELD\"] = 4] = \"TARGET_TYPE_FIELD\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ONEOF = 5;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ONEOF\"] = 5] = \"TARGET_TYPE_ONEOF\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM = 6;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM\"] = 6] = \"TARGET_TYPE_ENUM\";\n    /**\n     * @generated from enum value: TARGET_TYPE_ENUM_ENTRY = 7;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_ENUM_ENTRY\"] = 7] = \"TARGET_TYPE_ENUM_ENTRY\";\n    /**\n     * @generated from enum value: TARGET_TYPE_SERVICE = 8;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_SERVICE\"] = 8] = \"TARGET_TYPE_SERVICE\";\n    /**\n     * @generated from enum value: TARGET_TYPE_METHOD = 9;\n     */\n    FieldOptions_OptionTargetType[FieldOptions_OptionTargetType[\"TARGET_TYPE_METHOD\"] = 9] = \"TARGET_TYPE_METHOD\";\n})(FieldOptions_OptionTargetType || (FieldOptions_OptionTargetType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FieldOptions_OptionTargetType)\nproto2.util.setEnumType(FieldOptions_OptionTargetType, \"google.protobuf.FieldOptions.OptionTargetType\", [\n    { no: 0, name: \"TARGET_TYPE_UNKNOWN\" },\n    { no: 1, name: \"TARGET_TYPE_FILE\" },\n    { no: 2, name: \"TARGET_TYPE_EXTENSION_RANGE\" },\n    { no: 3, name: \"TARGET_TYPE_MESSAGE\" },\n    { no: 4, name: \"TARGET_TYPE_FIELD\" },\n    { no: 5, name: \"TARGET_TYPE_ONEOF\" },\n    { no: 6, name: \"TARGET_TYPE_ENUM\" },\n    { no: 7, name: \"TARGET_TYPE_ENUM_ENTRY\" },\n    { no: 8, name: \"TARGET_TYPE_SERVICE\" },\n    { no: 9, name: \"TARGET_TYPE_METHOD\" },\n]);\n/**\n * @generated from message google.protobuf.FieldOptions.EditionDefault\n */\nexport class FieldOptions_EditionDefault extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FieldOptions_EditionDefault().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldOptions_EditionDefault().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldOptions_EditionDefault().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FieldOptions_EditionDefault, a, b);\n    }\n}\nFieldOptions_EditionDefault.runtime = proto2;\nFieldOptions_EditionDefault.typeName = \"google.protobuf.FieldOptions.EditionDefault\";\nFieldOptions_EditionDefault.fields = proto2.util.newFieldList(() => [\n    { no: 3, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * @generated from message google.protobuf.OneofOptions\n */\nexport class OneofOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new OneofOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new OneofOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new OneofOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(OneofOptions, a, b);\n    }\n}\nOneofOptions.runtime = proto2;\nOneofOptions.typeName = \"google.protobuf.OneofOptions\";\nOneofOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.EnumOptions\n */\nexport class EnumOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumOptions, a, b);\n    }\n}\nEnumOptions.runtime = proto2;\nEnumOptions.typeName = \"google.protobuf.EnumOptions\";\nEnumOptions.fields = proto2.util.newFieldList(() => [\n    { no: 2, name: \"allow_alias\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 3, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 6, name: \"deprecated_legacy_json_field_conflicts\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true },\n    { no: 7, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.EnumValueOptions\n */\nexport class EnumValueOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValueOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValueOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValueOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(EnumValueOptions, a, b);\n    }\n}\nEnumValueOptions.runtime = proto2;\nEnumValueOptions.typeName = \"google.protobuf.EnumValueOptions\";\nEnumValueOptions.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 2, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 3, name: \"debug_redact\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.ServiceOptions\n */\nexport class ServiceOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new ServiceOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ServiceOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ServiceOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(ServiceOptions, a, b);\n    }\n}\nServiceOptions.runtime = proto2;\nServiceOptions.typeName = \"google.protobuf.ServiceOptions\";\nServiceOptions.fields = proto2.util.newFieldList(() => [\n    { no: 34, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 33, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.MethodOptions\n */\nexport class MethodOptions extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The parser stores options it doesn't recognize here. See above.\n         *\n         * @generated from field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999;\n         */\n        this.uninterpretedOption = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new MethodOptions().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new MethodOptions().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new MethodOptions().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(MethodOptions, a, b);\n    }\n}\nMethodOptions.runtime = proto2;\nMethodOptions.typeName = \"google.protobuf.MethodOptions\";\nMethodOptions.fields = proto2.util.newFieldList(() => [\n    { no: 33, name: \"deprecated\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, opt: true, default: false },\n    { no: 34, name: \"idempotency_level\", kind: \"enum\", T: proto2.getEnumType(MethodOptions_IdempotencyLevel), opt: true, default: MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN },\n    { no: 35, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n    { no: 999, name: \"uninterpreted_option\", kind: \"message\", T: UninterpretedOption, repeated: true },\n]);\n/**\n * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,\n * or neither? HTTP based RPC implementation may choose GET verb for safe\n * methods, and PUT verb for idempotent methods instead of the default POST.\n *\n * @generated from enum google.protobuf.MethodOptions.IdempotencyLevel\n */\nexport var MethodOptions_IdempotencyLevel;\n(function (MethodOptions_IdempotencyLevel) {\n    /**\n     * @generated from enum value: IDEMPOTENCY_UNKNOWN = 0;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = 0] = \"IDEMPOTENCY_UNKNOWN\";\n    /**\n     * implies idempotent\n     *\n     * @generated from enum value: NO_SIDE_EFFECTS = 1;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = 1] = \"NO_SIDE_EFFECTS\";\n    /**\n     * idempotent, but may have side effects\n     *\n     * @generated from enum value: IDEMPOTENT = 2;\n     */\n    MethodOptions_IdempotencyLevel[MethodOptions_IdempotencyLevel[\"IDEMPOTENT\"] = 2] = \"IDEMPOTENT\";\n})(MethodOptions_IdempotencyLevel || (MethodOptions_IdempotencyLevel = {}));\n// Retrieve enum metadata with: proto2.getEnumType(MethodOptions_IdempotencyLevel)\nproto2.util.setEnumType(MethodOptions_IdempotencyLevel, \"google.protobuf.MethodOptions.IdempotencyLevel\", [\n    { no: 0, name: \"IDEMPOTENCY_UNKNOWN\" },\n    { no: 1, name: \"NO_SIDE_EFFECTS\" },\n    { no: 2, name: \"IDEMPOTENT\" },\n]);\n/**\n * A message representing a option the parser does not recognize. This only\n * appears in options protos created by the compiler::Parser class.\n * DescriptorPool resolves these when building Descriptor objects. Therefore,\n * options protos in descriptor objects (e.g. returned by Descriptor::options(),\n * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions\n * in them.\n *\n * @generated from message google.protobuf.UninterpretedOption\n */\nexport class UninterpretedOption extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.UninterpretedOption.NamePart name = 2;\n         */\n        this.name = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UninterpretedOption().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UninterpretedOption().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UninterpretedOption().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(UninterpretedOption, a, b);\n    }\n}\nUninterpretedOption.runtime = proto2;\nUninterpretedOption.typeName = \"google.protobuf.UninterpretedOption\";\nUninterpretedOption.fields = proto2.util.newFieldList(() => [\n    { no: 2, name: \"name\", kind: \"message\", T: UninterpretedOption_NamePart, repeated: true },\n    { no: 3, name: \"identifier_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"positive_int_value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 5, name: \"negative_int_value\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */, opt: true },\n    { no: 6, name: \"double_value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, opt: true },\n    { no: 7, name: \"string_value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */, opt: true },\n    { no: 8, name: \"aggregate_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * The name of the uninterpreted option.  Each string represents a segment in\n * a dot-separated name.  is_extension is true iff a segment represents an\n * extension (denoted with parentheses in options specs in .proto files).\n * E.g.,{ [\"foo\", false], [\"bar.baz\", true], [\"moo\", false] } represents\n * \"foo.(bar.baz).moo\".\n *\n * @generated from message google.protobuf.UninterpretedOption.NamePart\n */\nexport class UninterpretedOption_NamePart extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new UninterpretedOption_NamePart().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UninterpretedOption_NamePart().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UninterpretedOption_NamePart().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(UninterpretedOption_NamePart, a, b);\n    }\n}\nUninterpretedOption_NamePart.runtime = proto2;\nUninterpretedOption_NamePart.typeName = \"google.protobuf.UninterpretedOption.NamePart\";\nUninterpretedOption_NamePart.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name_part\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, req: true },\n    { no: 2, name: \"is_extension\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, req: true },\n]);\n/**\n * TODO Enums in C++ gencode (and potentially other languages) are\n * not well scoped.  This means that each of the feature enums below can clash\n * with each other.  The short names we've chosen maximize call-site\n * readability, but leave us very open to this scenario.  A future feature will\n * be designed and implemented to handle this, hopefully before we ever hit a\n * conflict here.\n *\n * @generated from message google.protobuf.FeatureSet\n */\nexport class FeatureSet extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSet().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSet().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSet().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSet, a, b);\n    }\n}\nFeatureSet.runtime = proto2;\nFeatureSet.typeName = \"google.protobuf.FeatureSet\";\nFeatureSet.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"field_presence\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_FieldPresence), opt: true },\n    { no: 2, name: \"enum_type\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_EnumType), opt: true },\n    { no: 3, name: \"repeated_field_encoding\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_RepeatedFieldEncoding), opt: true },\n    { no: 4, name: \"utf8_validation\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_Utf8Validation), opt: true },\n    { no: 5, name: \"message_encoding\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_MessageEncoding), opt: true },\n    { no: 6, name: \"json_format\", kind: \"enum\", T: proto2.getEnumType(FeatureSet_JsonFormat), opt: true },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.FieldPresence\n */\nexport var FeatureSet_FieldPresence;\n(function (FeatureSet_FieldPresence) {\n    /**\n     * @generated from enum value: FIELD_PRESENCE_UNKNOWN = 0;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"FIELD_PRESENCE_UNKNOWN\"] = 0] = \"FIELD_PRESENCE_UNKNOWN\";\n    /**\n     * @generated from enum value: EXPLICIT = 1;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"EXPLICIT\"] = 1] = \"EXPLICIT\";\n    /**\n     * @generated from enum value: IMPLICIT = 2;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"IMPLICIT\"] = 2] = \"IMPLICIT\";\n    /**\n     * @generated from enum value: LEGACY_REQUIRED = 3;\n     */\n    FeatureSet_FieldPresence[FeatureSet_FieldPresence[\"LEGACY_REQUIRED\"] = 3] = \"LEGACY_REQUIRED\";\n})(FeatureSet_FieldPresence || (FeatureSet_FieldPresence = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_FieldPresence)\nproto2.util.setEnumType(FeatureSet_FieldPresence, \"google.protobuf.FeatureSet.FieldPresence\", [\n    { no: 0, name: \"FIELD_PRESENCE_UNKNOWN\" },\n    { no: 1, name: \"EXPLICIT\" },\n    { no: 2, name: \"IMPLICIT\" },\n    { no: 3, name: \"LEGACY_REQUIRED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.EnumType\n */\nexport var FeatureSet_EnumType;\n(function (FeatureSet_EnumType) {\n    /**\n     * @generated from enum value: ENUM_TYPE_UNKNOWN = 0;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"ENUM_TYPE_UNKNOWN\"] = 0] = \"ENUM_TYPE_UNKNOWN\";\n    /**\n     * @generated from enum value: OPEN = 1;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"OPEN\"] = 1] = \"OPEN\";\n    /**\n     * @generated from enum value: CLOSED = 2;\n     */\n    FeatureSet_EnumType[FeatureSet_EnumType[\"CLOSED\"] = 2] = \"CLOSED\";\n})(FeatureSet_EnumType || (FeatureSet_EnumType = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_EnumType)\nproto2.util.setEnumType(FeatureSet_EnumType, \"google.protobuf.FeatureSet.EnumType\", [\n    { no: 0, name: \"ENUM_TYPE_UNKNOWN\" },\n    { no: 1, name: \"OPEN\" },\n    { no: 2, name: \"CLOSED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.RepeatedFieldEncoding\n */\nexport var FeatureSet_RepeatedFieldEncoding;\n(function (FeatureSet_RepeatedFieldEncoding) {\n    /**\n     * @generated from enum value: REPEATED_FIELD_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"REPEATED_FIELD_ENCODING_UNKNOWN\"] = 0] = \"REPEATED_FIELD_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: PACKED = 1;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * @generated from enum value: EXPANDED = 2;\n     */\n    FeatureSet_RepeatedFieldEncoding[FeatureSet_RepeatedFieldEncoding[\"EXPANDED\"] = 2] = \"EXPANDED\";\n})(FeatureSet_RepeatedFieldEncoding || (FeatureSet_RepeatedFieldEncoding = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_RepeatedFieldEncoding)\nproto2.util.setEnumType(FeatureSet_RepeatedFieldEncoding, \"google.protobuf.FeatureSet.RepeatedFieldEncoding\", [\n    { no: 0, name: \"REPEATED_FIELD_ENCODING_UNKNOWN\" },\n    { no: 1, name: \"PACKED\" },\n    { no: 2, name: \"EXPANDED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.Utf8Validation\n */\nexport var FeatureSet_Utf8Validation;\n(function (FeatureSet_Utf8Validation) {\n    /**\n     * @generated from enum value: UTF8_VALIDATION_UNKNOWN = 0;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"UTF8_VALIDATION_UNKNOWN\"] = 0] = \"UTF8_VALIDATION_UNKNOWN\";\n    /**\n     * @generated from enum value: VERIFY = 2;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"VERIFY\"] = 2] = \"VERIFY\";\n    /**\n     * @generated from enum value: NONE = 3;\n     */\n    FeatureSet_Utf8Validation[FeatureSet_Utf8Validation[\"NONE\"] = 3] = \"NONE\";\n})(FeatureSet_Utf8Validation || (FeatureSet_Utf8Validation = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_Utf8Validation)\nproto2.util.setEnumType(FeatureSet_Utf8Validation, \"google.protobuf.FeatureSet.Utf8Validation\", [\n    { no: 0, name: \"UTF8_VALIDATION_UNKNOWN\" },\n    { no: 2, name: \"VERIFY\" },\n    { no: 3, name: \"NONE\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.MessageEncoding\n */\nexport var FeatureSet_MessageEncoding;\n(function (FeatureSet_MessageEncoding) {\n    /**\n     * @generated from enum value: MESSAGE_ENCODING_UNKNOWN = 0;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"MESSAGE_ENCODING_UNKNOWN\"] = 0] = \"MESSAGE_ENCODING_UNKNOWN\";\n    /**\n     * @generated from enum value: LENGTH_PREFIXED = 1;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"LENGTH_PREFIXED\"] = 1] = \"LENGTH_PREFIXED\";\n    /**\n     * @generated from enum value: DELIMITED = 2;\n     */\n    FeatureSet_MessageEncoding[FeatureSet_MessageEncoding[\"DELIMITED\"] = 2] = \"DELIMITED\";\n})(FeatureSet_MessageEncoding || (FeatureSet_MessageEncoding = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_MessageEncoding)\nproto2.util.setEnumType(FeatureSet_MessageEncoding, \"google.protobuf.FeatureSet.MessageEncoding\", [\n    { no: 0, name: \"MESSAGE_ENCODING_UNKNOWN\" },\n    { no: 1, name: \"LENGTH_PREFIXED\" },\n    { no: 2, name: \"DELIMITED\" },\n]);\n/**\n * @generated from enum google.protobuf.FeatureSet.JsonFormat\n */\nexport var FeatureSet_JsonFormat;\n(function (FeatureSet_JsonFormat) {\n    /**\n     * @generated from enum value: JSON_FORMAT_UNKNOWN = 0;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"JSON_FORMAT_UNKNOWN\"] = 0] = \"JSON_FORMAT_UNKNOWN\";\n    /**\n     * @generated from enum value: ALLOW = 1;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"ALLOW\"] = 1] = \"ALLOW\";\n    /**\n     * @generated from enum value: LEGACY_BEST_EFFORT = 2;\n     */\n    FeatureSet_JsonFormat[FeatureSet_JsonFormat[\"LEGACY_BEST_EFFORT\"] = 2] = \"LEGACY_BEST_EFFORT\";\n})(FeatureSet_JsonFormat || (FeatureSet_JsonFormat = {}));\n// Retrieve enum metadata with: proto2.getEnumType(FeatureSet_JsonFormat)\nproto2.util.setEnumType(FeatureSet_JsonFormat, \"google.protobuf.FeatureSet.JsonFormat\", [\n    { no: 0, name: \"JSON_FORMAT_UNKNOWN\" },\n    { no: 1, name: \"ALLOW\" },\n    { no: 2, name: \"LEGACY_BEST_EFFORT\" },\n]);\n/**\n * A compiled specification for the defaults of a set of features.  These\n * messages are generated from FeatureSet extensions and can be used to seed\n * feature resolution. The resolution with this object becomes a simple search\n * for the closest matching edition, followed by proto merges.\n *\n * @generated from message google.protobuf.FeatureSetDefaults\n */\nexport class FeatureSetDefaults extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault defaults = 1;\n         */\n        this.defaults = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSetDefaults().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSetDefaults().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSetDefaults().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSetDefaults, a, b);\n    }\n}\nFeatureSetDefaults.runtime = proto2;\nFeatureSetDefaults.typeName = \"google.protobuf.FeatureSetDefaults\";\nFeatureSetDefaults.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"defaults\", kind: \"message\", T: FeatureSetDefaults_FeatureSetEditionDefault, repeated: true },\n    { no: 4, name: \"minimum_edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 5, name: \"maximum_edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n]);\n/**\n * A map from every known edition with a unique set of defaults to its\n * defaults. Not all editions may be contained here.  For a given edition,\n * the defaults at the closest matching edition ordered at or before it should\n * be used.  This field must be in strict ascending order by edition.\n *\n * @generated from message google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\n */\nexport class FeatureSetDefaults_FeatureSetEditionDefault extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FeatureSetDefaults_FeatureSetEditionDefault().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(FeatureSetDefaults_FeatureSetEditionDefault, a, b);\n    }\n}\nFeatureSetDefaults_FeatureSetEditionDefault.runtime = proto2;\nFeatureSetDefaults_FeatureSetEditionDefault.typeName = \"google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault\";\nFeatureSetDefaults_FeatureSetEditionDefault.fields = proto2.util.newFieldList(() => [\n    { no: 3, name: \"edition\", kind: \"enum\", T: proto2.getEnumType(Edition), opt: true },\n    { no: 2, name: \"features\", kind: \"message\", T: FeatureSet, opt: true },\n]);\n/**\n * Encapsulates information about the original source file from which a\n * FileDescriptorProto was generated.\n *\n * @generated from message google.protobuf.SourceCodeInfo\n */\nexport class SourceCodeInfo extends Message {\n    constructor(data) {\n        super();\n        /**\n         * A Location identifies a piece of source code in a .proto file which\n         * corresponds to a particular definition.  This information is intended\n         * to be useful to IDEs, code indexers, documentation generators, and similar\n         * tools.\n         *\n         * For example, say we have a file like:\n         *   message Foo {\n         *     optional string foo = 1;\n         *   }\n         * Let's look at just the field definition:\n         *   optional string foo = 1;\n         *   ^       ^^     ^^  ^  ^^^\n         *   a       bc     de  f  ghi\n         * We have the following locations:\n         *   span   path               represents\n         *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.\n         *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).\n         *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).\n         *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).\n         *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).\n         *\n         * Notes:\n         * - A location may refer to a repeated field itself (i.e. not to any\n         *   particular index within it).  This is used whenever a set of elements are\n         *   logically enclosed in a single code segment.  For example, an entire\n         *   extend block (possibly containing multiple extension definitions) will\n         *   have an outer location whose path refers to the \"extensions\" repeated\n         *   field without an index.\n         * - Multiple locations may have the same path.  This happens when a single\n         *   logical declaration is spread out across multiple places.  The most\n         *   obvious example is the \"extend\" block again -- there may be multiple\n         *   extend blocks in the same scope, each of which will have the same path.\n         * - A location's span is not always a subset of its parent's span.  For\n         *   example, the \"extendee\" of an extension declaration appears at the\n         *   beginning of the \"extend\" block and is shared by all extensions within\n         *   the block.\n         * - Just because a location's span is a subset of some other location's span\n         *   does not mean that it is a descendant.  For example, a \"group\" defines\n         *   both a type and a field in a single declaration.  Thus, the locations\n         *   corresponding to the type and field and their components will overlap.\n         * - Code which tries to interpret locations should probably be designed to\n         *   ignore those that it doesn't understand, as more types of locations could\n         *   be recorded in the future.\n         *\n         * @generated from field: repeated google.protobuf.SourceCodeInfo.Location location = 1;\n         */\n        this.location = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceCodeInfo().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceCodeInfo().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceCodeInfo().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(SourceCodeInfo, a, b);\n    }\n}\nSourceCodeInfo.runtime = proto2;\nSourceCodeInfo.typeName = \"google.protobuf.SourceCodeInfo\";\nSourceCodeInfo.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"location\", kind: \"message\", T: SourceCodeInfo_Location, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.SourceCodeInfo.Location\n */\nexport class SourceCodeInfo_Location extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Identifies which part of the FileDescriptorProto was defined at this\n         * location.\n         *\n         * Each element is a field number or an index.  They form a path from\n         * the root FileDescriptorProto to the place where the definition appears.\n         * For example, this path:\n         *   [ 4, 3, 2, 7, 1 ]\n         * refers to:\n         *   file.message_type(3)  // 4, 3\n         *       .field(7)         // 2, 7\n         *       .name()           // 1\n         * This is because FileDescriptorProto.message_type has field number 4:\n         *   repeated DescriptorProto message_type = 4;\n         * and DescriptorProto.field has field number 2:\n         *   repeated FieldDescriptorProto field = 2;\n         * and FieldDescriptorProto.name has field number 1:\n         *   optional string name = 1;\n         *\n         * Thus, the above path gives the location of a field name.  If we removed\n         * the last element:\n         *   [ 4, 3, 2, 7 ]\n         * this path refers to the whole field declaration (from the beginning\n         * of the label to the terminating semicolon).\n         *\n         * @generated from field: repeated int32 path = 1 [packed = true];\n         */\n        this.path = [];\n        /**\n         * Always has exactly three or four elements: start line, start column,\n         * end line (optional, otherwise assumed same as start line), end column.\n         * These are packed into a single field for efficiency.  Note that line\n         * and column numbers are zero-based -- typically you will want to add\n         * 1 to each before displaying to a user.\n         *\n         * @generated from field: repeated int32 span = 2 [packed = true];\n         */\n        this.span = [];\n        /**\n         * @generated from field: repeated string leading_detached_comments = 6;\n         */\n        this.leadingDetachedComments = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceCodeInfo_Location().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceCodeInfo_Location().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceCodeInfo_Location().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(SourceCodeInfo_Location, a, b);\n    }\n}\nSourceCodeInfo_Location.runtime = proto2;\nSourceCodeInfo_Location.typeName = \"google.protobuf.SourceCodeInfo.Location\";\nSourceCodeInfo_Location.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"path\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 2, name: \"span\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 3, name: \"leading_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 4, name: \"trailing_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 6, name: \"leading_detached_comments\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n/**\n * Describes the relationship between generated code and its original source\n * file. A GeneratedCodeInfo message is associated with only one generated\n * source file, but may contain references to different source .proto files.\n *\n * @generated from message google.protobuf.GeneratedCodeInfo\n */\nexport class GeneratedCodeInfo extends Message {\n    constructor(data) {\n        super();\n        /**\n         * An Annotation connects some span of text in generated code to an element\n         * of its generating .proto file.\n         *\n         * @generated from field: repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1;\n         */\n        this.annotation = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GeneratedCodeInfo().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GeneratedCodeInfo().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GeneratedCodeInfo().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(GeneratedCodeInfo, a, b);\n    }\n}\nGeneratedCodeInfo.runtime = proto2;\nGeneratedCodeInfo.typeName = \"google.protobuf.GeneratedCodeInfo\";\nGeneratedCodeInfo.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"annotation\", kind: \"message\", T: GeneratedCodeInfo_Annotation, repeated: true },\n]);\n/**\n * @generated from message google.protobuf.GeneratedCodeInfo.Annotation\n */\nexport class GeneratedCodeInfo_Annotation extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Identifies the element in the original source .proto file. This field\n         * is formatted the same as SourceCodeInfo.Location.path.\n         *\n         * @generated from field: repeated int32 path = 1 [packed = true];\n         */\n        this.path = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new GeneratedCodeInfo_Annotation().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new GeneratedCodeInfo_Annotation().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new GeneratedCodeInfo_Annotation().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(GeneratedCodeInfo_Annotation, a, b);\n    }\n}\nGeneratedCodeInfo_Annotation.runtime = proto2;\nGeneratedCodeInfo_Annotation.typeName = \"google.protobuf.GeneratedCodeInfo.Annotation\";\nGeneratedCodeInfo_Annotation.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"path\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },\n    { no: 2, name: \"source_file\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 3, name: \"begin\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"end\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 5, name: \"semantic\", kind: \"enum\", T: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic), opt: true },\n]);\n/**\n * Represents the identified object's effect on the element in the original\n * .proto file.\n *\n * @generated from enum google.protobuf.GeneratedCodeInfo.Annotation.Semantic\n */\nexport var GeneratedCodeInfo_Annotation_Semantic;\n(function (GeneratedCodeInfo_Annotation_Semantic) {\n    /**\n     * There is no effect or the effect is indescribable.\n     *\n     * @generated from enum value: NONE = 0;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * The element is set or otherwise mutated.\n     *\n     * @generated from enum value: SET = 1;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"SET\"] = 1] = \"SET\";\n    /**\n     * An alias to the element is returned.\n     *\n     * @generated from enum value: ALIAS = 2;\n     */\n    GeneratedCodeInfo_Annotation_Semantic[GeneratedCodeInfo_Annotation_Semantic[\"ALIAS\"] = 2] = \"ALIAS\";\n})(GeneratedCodeInfo_Annotation_Semantic || (GeneratedCodeInfo_Annotation_Semantic = {}));\n// Retrieve enum metadata with: proto2.getEnumType(GeneratedCodeInfo_Annotation_Semantic)\nproto2.util.setEnumType(GeneratedCodeInfo_Annotation_Semantic, \"google.protobuf.GeneratedCodeInfo.Annotation.Semantic\", [\n    { no: 0, name: \"NONE\" },\n    { no: 1, name: \"SET\" },\n    { no: 2, name: \"ALIAS\" },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Edition, FeatureSet_RepeatedFieldEncoding, FeatureSetDefaults, FieldDescriptorProto_Label, FieldDescriptorProto_Type, FieldOptions_JSType, FileDescriptorProto, FileDescriptorSet, MethodDescriptorProto, MethodOptions_IdempotencyLevel, ServiceDescriptorProto, SourceCodeInfo, } from \"./google/protobuf/descriptor_pb.js\";\nimport { assert } from \"./private/assert.js\";\nimport { MethodIdempotency, MethodKind } from \"./service-type.js\";\nimport { fieldJsonName, findEnumSharedPrefix } from \"./private/names.js\";\nimport { parseTextFormatEnumValue, parseTextFormatScalarValue, } from \"./private/text-format.js\";\nimport { createFeatureResolver } from \"./private/feature-set.js\";\nimport { LongType, ScalarType } from \"./scalar.js\";\nimport { isMessage } from \"./is-message.js\";\n/**\n * Create a DescriptorSet, a convenient interface for working with a set of\n * google.protobuf.FileDescriptorProto.\n *\n * Note that files must be given in topological order, so each file appears\n * before any file that imports it. Protocol buffer compilers always produce\n * files in topological order.\n */\nexport function createDescriptorSet(input, options) {\n    var _a;\n    const cart = {\n        files: [],\n        enums: new Map(),\n        messages: new Map(),\n        services: new Map(),\n        extensions: new Map(),\n        mapEntries: new Map(),\n    };\n    const fileDescriptors = isMessage(input, FileDescriptorSet)\n        ? input.file\n        : input instanceof Uint8Array\n            ? FileDescriptorSet.fromBinary(input).file\n            : input;\n    const resolverByEdition = new Map();\n    for (const proto of fileDescriptors) {\n        const edition = (_a = proto.edition) !== null && _a !== void 0 ? _a : parseFileSyntax(proto.syntax, proto.edition).edition;\n        let resolveFeatures = resolverByEdition.get(edition);\n        if (resolveFeatures === undefined) {\n            resolveFeatures = createFeatureResolver(edition, options === null || options === void 0 ? void 0 : options.featureSetDefaults, options === null || options === void 0 ? void 0 : options.serializationOptions);\n            resolverByEdition.set(edition, resolveFeatures);\n        }\n        addFile(proto, cart, resolveFeatures);\n    }\n    return cart;\n}\n/**\n * Create a descriptor for a file.\n */\nfunction addFile(proto, cart, resolveFeatures) {\n    var _a, _b;\n    assert(proto.name, `invalid FileDescriptorProto: missing name`);\n    const file = Object.assign(Object.assign({ kind: \"file\", proto, deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false }, parseFileSyntax(proto.syntax, proto.edition)), { name: proto.name.replace(/\\.proto/, \"\"), dependencies: findFileDependencies(proto, cart), enums: [], messages: [], extensions: [], services: [], toString() {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions -- we asserted above\n            return `file ${this.proto.name}`;\n        },\n        getSyntaxComments() {\n            return findComments(this.proto.sourceCodeInfo, [\n                FieldNumber.FileDescriptorProto_Syntax,\n            ]);\n        },\n        getPackageComments() {\n            return findComments(this.proto.sourceCodeInfo, [\n                FieldNumber.FileDescriptorProto_Package,\n            ]);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures((_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        } });\n    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, undefined, cart, resolveFeatures);\n    }\n    for (const messageProto of proto.messageType) {\n        addMessage(messageProto, file, undefined, cart, resolveFeatures);\n    }\n    for (const serviceProto of proto.service) {\n        addService(serviceProto, file, cart, resolveFeatures);\n    }\n    addExtensions(file, cart, resolveFeatures);\n    for (const mapEntry of cart.mapEntries.values()) {\n        addFields(mapEntry, cart, resolveFeatures);\n    }\n    for (const message of file.messages) {\n        addFields(message, cart, resolveFeatures);\n        addExtensions(message, cart, resolveFeatures);\n    }\n    cart.mapEntries.clear(); // map entries are local to the file, we can safely discard\n    cart.files.push(file);\n}\n/**\n * Create descriptors for extensions, and add them to the message / file,\n * and to our cart.\n * Recurses into nested types.\n */\nfunction addExtensions(desc, cart, resolveFeatures) {\n    switch (desc.kind) {\n        case \"file\":\n            for (const proto of desc.proto.extension) {\n                const ext = newExtension(proto, desc, undefined, cart, resolveFeatures);\n                desc.extensions.push(ext);\n                cart.extensions.set(ext.typeName, ext);\n            }\n            break;\n        case \"message\":\n            for (const proto of desc.proto.extension) {\n                const ext = newExtension(proto, desc.file, desc, cart, resolveFeatures);\n                desc.nestedExtensions.push(ext);\n                cart.extensions.set(ext.typeName, ext);\n            }\n            for (const message of desc.nestedMessages) {\n                addExtensions(message, cart, resolveFeatures);\n            }\n            break;\n    }\n}\n/**\n * Create descriptors for fields and oneof groups, and add them to the message.\n * Recurses into nested types.\n */\nfunction addFields(message, cart, resolveFeatures) {\n    const allOneofs = message.proto.oneofDecl.map((proto) => newOneof(proto, message, resolveFeatures));\n    const oneofsSeen = new Set();\n    for (const proto of message.proto.field) {\n        const oneof = findOneof(proto, allOneofs);\n        const field = newField(proto, message.file, message, oneof, cart, resolveFeatures);\n        message.fields.push(field);\n        if (oneof === undefined) {\n            message.members.push(field);\n        }\n        else {\n            oneof.fields.push(field);\n            if (!oneofsSeen.has(oneof)) {\n                oneofsSeen.add(oneof);\n                message.members.push(oneof);\n            }\n        }\n    }\n    for (const oneof of allOneofs.filter((o) => oneofsSeen.has(o))) {\n        message.oneofs.push(oneof);\n    }\n    for (const child of message.nestedMessages) {\n        addFields(child, cart, resolveFeatures);\n    }\n}\n/**\n * Create a descriptor for an enumeration, and add it our cart and to the\n * parent type, if any.\n */\nfunction addEnum(proto, file, parent, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid EnumDescriptorProto: missing name`);\n    const desc = {\n        kind: \"enum\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        values: [],\n        sharedPrefix: findEnumSharedPrefix(proto.name, proto.value.map((v) => { var _a; return (_a = v.name) !== null && _a !== void 0 ? _a : \"\"; })),\n        toString() {\n            return `enum ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_EnumType,\n                    this.parent.proto.enumType.indexOf(this.proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_EnumType,\n                    this.file.proto.enumType.indexOf(this.proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a, _b;\n            return resolveFeatures((_a = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _a !== void 0 ? _a : file.getFeatures(), (_b = proto.options) === null || _b === void 0 ? void 0 : _b.features);\n        },\n    };\n    cart.enums.set(desc.typeName, desc);\n    proto.value.forEach((proto) => {\n        var _a, _b;\n        assert(proto.name, `invalid EnumValueDescriptorProto: missing name`);\n        assert(proto.number !== undefined, `invalid EnumValueDescriptorProto: missing number`);\n        desc.values.push({\n            kind: \"enum_value\",\n            proto,\n            deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n            parent: desc,\n            name: proto.name,\n            number: proto.number,\n            toString() {\n                return `enum value ${desc.typeName}.${this.name}`;\n            },\n            declarationString() {\n                var _a;\n                let str = `${this.name} = ${this.number}`;\n                if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) === true) {\n                    str += \" [deprecated = true]\";\n                }\n                return str;\n            },\n            getComments() {\n                const path = [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.EnumDescriptorProto_Value,\n                    this.parent.proto.value.indexOf(this.proto),\n                ];\n                return findComments(file.proto.sourceCodeInfo, path);\n            },\n            getFeatures() {\n                var _a;\n                return resolveFeatures(desc.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n            },\n        });\n    });\n    ((_c = parent === null || parent === void 0 ? void 0 : parent.nestedEnums) !== null && _c !== void 0 ? _c : file.enums).push(desc);\n}\n/**\n * Create a descriptor for a message, including nested types, and add it to our\n * cart. Note that this does not create descriptors fields.\n */\nfunction addMessage(proto, file, parent, cart, resolveFeatures) {\n    var _a, _b, _c, _d;\n    assert(proto.name, `invalid DescriptorProto: missing name`);\n    const desc = {\n        kind: \"message\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        parent,\n        name: proto.name,\n        typeName: makeTypeName(proto, parent, file),\n        fields: [],\n        oneofs: [],\n        members: [],\n        nestedEnums: [],\n        nestedMessages: [],\n        nestedExtensions: [],\n        toString() {\n            return `message ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_NestedType,\n                    this.parent.proto.nestedType.indexOf(this.proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_MessageType,\n                    this.file.proto.messageType.indexOf(this.proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a, _b;\n            return resolveFeatures((_a = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _a !== void 0 ? _a : file.getFeatures(), (_b = proto.options) === null || _b === void 0 ? void 0 : _b.features);\n        },\n    };\n    if (((_c = proto.options) === null || _c === void 0 ? void 0 : _c.mapEntry) === true) {\n        cart.mapEntries.set(desc.typeName, desc);\n    }\n    else {\n        ((_d = parent === null || parent === void 0 ? void 0 : parent.nestedMessages) !== null && _d !== void 0 ? _d : file.messages).push(desc);\n        cart.messages.set(desc.typeName, desc);\n    }\n    for (const enumProto of proto.enumType) {\n        addEnum(enumProto, file, desc, cart, resolveFeatures);\n    }\n    for (const messageProto of proto.nestedType) {\n        addMessage(messageProto, file, desc, cart, resolveFeatures);\n    }\n}\n/**\n * Create a descriptor for a service, including methods, and add it to our\n * cart.\n */\nfunction addService(proto, file, cart, resolveFeatures) {\n    var _a, _b;\n    assert(proto.name, `invalid ServiceDescriptorProto: missing name`);\n    const desc = {\n        kind: \"service\",\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        file,\n        name: proto.name,\n        typeName: makeTypeName(proto, undefined, file),\n        methods: [],\n        toString() {\n            return `service ${this.typeName}`;\n        },\n        getComments() {\n            const path = [\n                FieldNumber.FileDescriptorProto_Service,\n                this.file.proto.service.indexOf(this.proto),\n            ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(file.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n    file.services.push(desc);\n    cart.services.set(desc.typeName, desc);\n    for (const methodProto of proto.method) {\n        desc.methods.push(newMethod(methodProto, desc, cart, resolveFeatures));\n    }\n}\n/**\n * Create a descriptor for a method.\n */\nfunction newMethod(proto, parent, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid MethodDescriptorProto: missing name`);\n    assert(proto.inputType, `invalid MethodDescriptorProto: missing input_type`);\n    assert(proto.outputType, `invalid MethodDescriptorProto: missing output_type`);\n    let methodKind;\n    if (proto.clientStreaming === true && proto.serverStreaming === true) {\n        methodKind = MethodKind.BiDiStreaming;\n    }\n    else if (proto.clientStreaming === true) {\n        methodKind = MethodKind.ClientStreaming;\n    }\n    else if (proto.serverStreaming === true) {\n        methodKind = MethodKind.ServerStreaming;\n    }\n    else {\n        methodKind = MethodKind.Unary;\n    }\n    let idempotency;\n    switch ((_a = proto.options) === null || _a === void 0 ? void 0 : _a.idempotencyLevel) {\n        case MethodOptions_IdempotencyLevel.IDEMPOTENT:\n            idempotency = MethodIdempotency.Idempotent;\n            break;\n        case MethodOptions_IdempotencyLevel.NO_SIDE_EFFECTS:\n            idempotency = MethodIdempotency.NoSideEffects;\n            break;\n        case MethodOptions_IdempotencyLevel.IDEMPOTENCY_UNKNOWN:\n        case undefined:\n            idempotency = undefined;\n            break;\n    }\n    const input = cart.messages.get(trimLeadingDot(proto.inputType));\n    const output = cart.messages.get(trimLeadingDot(proto.outputType));\n    assert(input, `invalid MethodDescriptorProto: input_type ${proto.inputType} not found`);\n    assert(output, `invalid MethodDescriptorProto: output_type ${proto.inputType} not found`);\n    const name = proto.name;\n    return {\n        kind: \"rpc\",\n        proto,\n        deprecated: (_c = (_b = proto.options) === null || _b === void 0 ? void 0 : _b.deprecated) !== null && _c !== void 0 ? _c : false,\n        parent,\n        name,\n        methodKind,\n        input,\n        output,\n        idempotency,\n        toString() {\n            return `rpc ${parent.typeName}.${name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.ServiceDescriptorProto_Method,\n                this.parent.proto.method.indexOf(this.proto),\n            ];\n            return findComments(parent.file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n}\n/**\n * Create a descriptor for a oneof group.\n */\nfunction newOneof(proto, parent, resolveFeatures) {\n    assert(proto.name, `invalid OneofDescriptorProto: missing name`);\n    return {\n        kind: \"oneof\",\n        proto,\n        deprecated: false,\n        parent,\n        fields: [],\n        name: proto.name,\n        toString() {\n            return `oneof ${parent.typeName}.${this.name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.DescriptorProto_OneofDecl,\n                this.parent.proto.oneofDecl.indexOf(this.proto),\n            ];\n            return findComments(parent.file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n}\n/**\n * Create a descriptor for a field.\n */\nfunction newField(proto, file, parent, oneof, cart, resolveFeatures) {\n    var _a, _b, _c;\n    assert(proto.name, `invalid FieldDescriptorProto: missing name`);\n    assert(proto.number, `invalid FieldDescriptorProto: missing number`);\n    assert(proto.type, `invalid FieldDescriptorProto: missing type`);\n    const common = {\n        proto,\n        deprecated: (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.deprecated) !== null && _b !== void 0 ? _b : false,\n        name: proto.name,\n        number: proto.number,\n        parent,\n        oneof,\n        optional: isOptionalField(proto, file.syntax),\n        packedByDefault: isPackedFieldByDefault(proto, resolveFeatures),\n        packed: isPackedField(file, parent, proto, resolveFeatures),\n        jsonName: proto.jsonName === fieldJsonName(proto.name) ? undefined : proto.jsonName,\n        scalar: undefined,\n        longType: undefined,\n        message: undefined,\n        enum: undefined,\n        mapKey: undefined,\n        mapValue: undefined,\n        declarationString,\n        // toString, getComments, getFeatures are overridden in newExtension\n        toString() {\n            return `field ${this.parent.typeName}.${this.name}`;\n        },\n        getComments() {\n            const path = [\n                ...this.parent.getComments().sourcePath,\n                FieldNumber.DescriptorProto_Field,\n                this.parent.proto.field.indexOf(this.proto),\n            ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures(parent.getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        },\n    };\n    const repeated = proto.label === FieldDescriptorProto_Label.REPEATED;\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.MESSAGE:\n        case FieldDescriptorProto_Type.GROUP: {\n            assert(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);\n            const mapEntry = cart.mapEntries.get(trimLeadingDot(proto.typeName));\n            if (mapEntry !== undefined) {\n                assert(repeated, `invalid FieldDescriptorProto: expected map entry to be repeated`);\n                return Object.assign(Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"map\", repeated: false }), getMapFieldTypes(mapEntry));\n            }\n            const message = cart.messages.get(trimLeadingDot(proto.typeName));\n            assert(message !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"message\", repeated,\n                message });\n        }\n        case FieldDescriptorProto_Type.ENUM: {\n            assert(proto.typeName, `invalid FieldDescriptorProto: missing type_name`);\n            const e = cart.enums.get(trimLeadingDot(proto.typeName));\n            assert(e !== undefined, `invalid FieldDescriptorProto: type_name ${proto.typeName} not found`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"enum\", getDefaultValue,\n                repeated, enum: e });\n        }\n        default: {\n            const scalar = fieldTypeToScalarType[proto.type];\n            assert(scalar, `invalid FieldDescriptorProto: unknown type ${proto.type}`);\n            return Object.assign(Object.assign({}, common), { kind: \"field\", fieldKind: \"scalar\", getDefaultValue,\n                repeated,\n                scalar, longType: ((_c = proto.options) === null || _c === void 0 ? void 0 : _c.jstype) == FieldOptions_JSType.JS_STRING\n                    ? LongType.STRING\n                    : LongType.BIGINT });\n        }\n    }\n}\n/**\n * Create a descriptor for an extension field.\n */\nfunction newExtension(proto, file, parent, cart, resolveFeatures) {\n    assert(proto.extendee, `invalid FieldDescriptorProto: missing extendee`);\n    const field = newField(proto, file, null, // to safe us many lines of duplicated code, we trick the type system\n    undefined, cart, resolveFeatures);\n    const extendee = cart.messages.get(trimLeadingDot(proto.extendee));\n    assert(extendee, `invalid FieldDescriptorProto: extendee ${proto.extendee} not found`);\n    return Object.assign(Object.assign({}, field), { kind: \"extension\", typeName: makeTypeName(proto, parent, file), parent,\n        file,\n        extendee,\n        // Must override toString, getComments, getFeatures from newField, because we\n        // call newField with parent undefined.\n        toString() {\n            return `extension ${this.typeName}`;\n        },\n        getComments() {\n            const path = this.parent\n                ? [\n                    ...this.parent.getComments().sourcePath,\n                    FieldNumber.DescriptorProto_Extension,\n                    this.parent.proto.extension.indexOf(proto),\n                ]\n                : [\n                    FieldNumber.FileDescriptorProto_Extension,\n                    this.file.proto.extension.indexOf(proto),\n                ];\n            return findComments(file.proto.sourceCodeInfo, path);\n        },\n        getFeatures() {\n            var _a;\n            return resolveFeatures((parent !== null && parent !== void 0 ? parent : file).getFeatures(), (_a = proto.options) === null || _a === void 0 ? void 0 : _a.features);\n        } });\n}\n/**\n * Parse the \"syntax\" and \"edition\" fields, stripping test editions.\n */\nfunction parseFileSyntax(syntax, edition) {\n    let e;\n    let s;\n    switch (syntax) {\n        case undefined:\n        case \"proto2\":\n            s = \"proto2\";\n            e = Edition.EDITION_PROTO2;\n            break;\n        case \"proto3\":\n            s = \"proto3\";\n            e = Edition.EDITION_PROTO3;\n            break;\n        case \"editions\":\n            s = \"editions\";\n            switch (edition) {\n                case undefined:\n                case Edition.EDITION_1_TEST_ONLY:\n                case Edition.EDITION_2_TEST_ONLY:\n                case Edition.EDITION_99997_TEST_ONLY:\n                case Edition.EDITION_99998_TEST_ONLY:\n                case Edition.EDITION_99999_TEST_ONLY:\n                case Edition.EDITION_UNKNOWN:\n                    e = Edition.EDITION_UNKNOWN;\n                    break;\n                default:\n                    e = edition;\n                    break;\n            }\n            break;\n        default:\n            throw new Error(`invalid FileDescriptorProto: unsupported syntax: ${syntax}`);\n    }\n    if (syntax === \"editions\" && edition === Edition.EDITION_UNKNOWN) {\n        throw new Error(`invalid FileDescriptorProto: syntax ${syntax} cannot have edition ${String(edition)}`);\n    }\n    return {\n        syntax: s,\n        edition: e,\n    };\n}\n/**\n * Resolve dependencies of FileDescriptorProto to DescFile.\n */\nfunction findFileDependencies(proto, cart) {\n    return proto.dependency.map((wantName) => {\n        const dep = cart.files.find((f) => f.proto.name === wantName);\n        assert(dep);\n        return dep;\n    });\n}\n/**\n * Create a fully qualified name for a protobuf type or extension field.\n *\n * The fully qualified name for messages, enumerations, and services is\n * constructed by concatenating the package name (if present), parent\n * message names (for nested types), and the type name. We omit the leading\n * dot added by protobuf compilers. Examples:\n * - mypackage.MyMessage\n * - mypackage.MyMessage.NestedMessage\n *\n * The fully qualified name for extension fields is constructed by\n * concatenating the package name (if present), parent message names (for\n * extensions declared within a message), and the field name. Examples:\n * - mypackage.extfield\n * - mypackage.MyMessage.extfield\n */\nfunction makeTypeName(proto, parent, file) {\n    assert(proto.name, `invalid ${proto.getType().typeName}: missing name`);\n    let typeName;\n    if (parent) {\n        typeName = `${parent.typeName}.${proto.name}`;\n    }\n    else if (file.proto.package !== undefined) {\n        typeName = `${file.proto.package}.${proto.name}`;\n    }\n    else {\n        typeName = `${proto.name}`;\n    }\n    return typeName;\n}\n/**\n * Remove the leading dot from a fully qualified type name.\n */\nfunction trimLeadingDot(typeName) {\n    return typeName.startsWith(\".\") ? typeName.substring(1) : typeName;\n}\nfunction getMapFieldTypes(mapEntry) {\n    var _a, _b;\n    assert((_a = mapEntry.proto.options) === null || _a === void 0 ? void 0 : _a.mapEntry, `invalid DescriptorProto: expected ${mapEntry.toString()} to be a map entry`);\n    assert(mapEntry.fields.length === 2, `invalid DescriptorProto: map entry ${mapEntry.toString()} has ${mapEntry.fields.length} fields`);\n    const keyField = mapEntry.fields.find((f) => f.proto.number === 1);\n    assert(keyField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing key field`);\n    const mapKey = keyField.scalar;\n    assert(mapKey !== undefined &&\n        mapKey !== ScalarType.BYTES &&\n        mapKey !== ScalarType.FLOAT &&\n        mapKey !== ScalarType.DOUBLE, `invalid DescriptorProto: map entry ${mapEntry.toString()} has unexpected key type ${(_b = keyField.proto.type) !== null && _b !== void 0 ? _b : -1}`);\n    const valueField = mapEntry.fields.find((f) => f.proto.number === 2);\n    assert(valueField, `invalid DescriptorProto: map entry ${mapEntry.toString()} is missing value field`);\n    switch (valueField.fieldKind) {\n        case \"scalar\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"scalar\" }),\n            };\n        case \"message\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"message\" }),\n            };\n        case \"enum\":\n            return {\n                mapKey,\n                mapValue: Object.assign(Object.assign({}, valueField), { kind: \"enum\" }),\n            };\n        default:\n            throw new Error(\"invalid DescriptorProto: unsupported map entry value field\");\n    }\n}\n/**\n * Did the user put the field in a oneof group?\n * This handles proto3 optionals.\n */\nfunction findOneof(proto, allOneofs) {\n    var _a;\n    const oneofIndex = proto.oneofIndex;\n    if (oneofIndex === undefined) {\n        return undefined;\n    }\n    let oneof;\n    if (proto.proto3Optional !== true) {\n        oneof = allOneofs[oneofIndex];\n        assert(oneof, `invalid FieldDescriptorProto: oneof #${oneofIndex} for field #${(_a = proto.number) !== null && _a !== void 0 ? _a : -1} not found`);\n    }\n    return oneof;\n}\n/**\n * Did the user use the `optional` keyword?\n * This handles proto3 optionals.\n */\nfunction isOptionalField(proto, syntax) {\n    switch (syntax) {\n        case \"proto2\":\n            return (proto.oneofIndex === undefined &&\n                proto.label === FieldDescriptorProto_Label.OPTIONAL);\n        case \"proto3\":\n            return proto.proto3Optional === true;\n        case \"editions\":\n            return false;\n    }\n}\n/**\n * Is this field packed by default? Only valid for repeated enum fields, and\n * for repeated scalar fields except BYTES and STRING.\n *\n * In proto3 syntax, fields are packed by default. In proto2 syntax, fields\n * are unpacked by default. With editions, the default is whatever the edition\n * specifies as a default. In edition 2023, fields are packed by default.\n */\nfunction isPackedFieldByDefault(proto, resolveFeatures) {\n    const { repeatedFieldEncoding } = resolveFeatures();\n    if (repeatedFieldEncoding != FeatureSet_RepeatedFieldEncoding.PACKED) {\n        return false;\n    }\n    // From the proto3 language guide:\n    // > In proto3, repeated fields of scalar numeric types are packed by default.\n    // This information is incomplete - according to the conformance tests, BOOL\n    // and ENUM are packed by default as well. This means only STRING and BYTES\n    // are not packed by default, which makes sense because they are length-delimited.\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.STRING:\n        case FieldDescriptorProto_Type.BYTES:\n        case FieldDescriptorProto_Type.GROUP:\n        case FieldDescriptorProto_Type.MESSAGE:\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Pack this repeated field?\n *\n * Respects field type, proto2/proto3 defaults and the `packed` option, or\n * edition defaults and the edition features.repeated_field_encoding options.\n */\nfunction isPackedField(file, parent, proto, resolveFeatures) {\n    var _a, _b, _c, _d, _e, _f;\n    switch (proto.type) {\n        case FieldDescriptorProto_Type.STRING:\n        case FieldDescriptorProto_Type.BYTES:\n        case FieldDescriptorProto_Type.GROUP:\n        case FieldDescriptorProto_Type.MESSAGE:\n            // length-delimited types cannot be packed\n            return false;\n        default:\n            switch (file.edition) {\n                case Edition.EDITION_PROTO2:\n                    return (_b = (_a = proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== null && _b !== void 0 ? _b : false;\n                case Edition.EDITION_PROTO3:\n                    return (_d = (_c = proto.options) === null || _c === void 0 ? void 0 : _c.packed) !== null && _d !== void 0 ? _d : true;\n                default: {\n                    const { repeatedFieldEncoding } = resolveFeatures((_e = parent === null || parent === void 0 ? void 0 : parent.getFeatures()) !== null && _e !== void 0 ? _e : file.getFeatures(), (_f = proto.options) === null || _f === void 0 ? void 0 : _f.features);\n                    return (repeatedFieldEncoding == FeatureSet_RepeatedFieldEncoding.PACKED);\n                }\n            }\n    }\n}\n/**\n * Map from a compiler-generated field type to our ScalarType, which is a\n * subset of field types declared by protobuf enum google.protobuf.FieldDescriptorProto.\n */\nconst fieldTypeToScalarType = {\n    [FieldDescriptorProto_Type.DOUBLE]: ScalarType.DOUBLE,\n    [FieldDescriptorProto_Type.FLOAT]: ScalarType.FLOAT,\n    [FieldDescriptorProto_Type.INT64]: ScalarType.INT64,\n    [FieldDescriptorProto_Type.UINT64]: ScalarType.UINT64,\n    [FieldDescriptorProto_Type.INT32]: ScalarType.INT32,\n    [FieldDescriptorProto_Type.FIXED64]: ScalarType.FIXED64,\n    [FieldDescriptorProto_Type.FIXED32]: ScalarType.FIXED32,\n    [FieldDescriptorProto_Type.BOOL]: ScalarType.BOOL,\n    [FieldDescriptorProto_Type.STRING]: ScalarType.STRING,\n    [FieldDescriptorProto_Type.GROUP]: undefined,\n    [FieldDescriptorProto_Type.MESSAGE]: undefined,\n    [FieldDescriptorProto_Type.BYTES]: ScalarType.BYTES,\n    [FieldDescriptorProto_Type.UINT32]: ScalarType.UINT32,\n    [FieldDescriptorProto_Type.ENUM]: undefined,\n    [FieldDescriptorProto_Type.SFIXED32]: ScalarType.SFIXED32,\n    [FieldDescriptorProto_Type.SFIXED64]: ScalarType.SFIXED64,\n    [FieldDescriptorProto_Type.SINT32]: ScalarType.SINT32,\n    [FieldDescriptorProto_Type.SINT64]: ScalarType.SINT64,\n};\n/**\n * Find comments.\n */\nfunction findComments(sourceCodeInfo, sourcePath) {\n    if (!sourceCodeInfo) {\n        return {\n            leadingDetached: [],\n            sourcePath,\n        };\n    }\n    for (const location of sourceCodeInfo.location) {\n        if (location.path.length !== sourcePath.length) {\n            continue;\n        }\n        if (location.path.some((value, index) => sourcePath[index] !== value)) {\n            continue;\n        }\n        return {\n            leadingDetached: location.leadingDetachedComments,\n            leading: location.leadingComments,\n            trailing: location.trailingComments,\n            sourcePath,\n        };\n    }\n    return {\n        leadingDetached: [],\n        sourcePath,\n    };\n}\n/**\n * The following field numbers are used to find comments in\n * google.protobuf.SourceCodeInfo.\n */\nvar FieldNumber;\n(function (FieldNumber) {\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Package\"] = 2] = \"FileDescriptorProto_Package\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_MessageType\"] = 4] = \"FileDescriptorProto_MessageType\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_EnumType\"] = 5] = \"FileDescriptorProto_EnumType\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Service\"] = 6] = \"FileDescriptorProto_Service\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Extension\"] = 7] = \"FileDescriptorProto_Extension\";\n    FieldNumber[FieldNumber[\"FileDescriptorProto_Syntax\"] = 12] = \"FileDescriptorProto_Syntax\";\n    FieldNumber[FieldNumber[\"DescriptorProto_Field\"] = 2] = \"DescriptorProto_Field\";\n    FieldNumber[FieldNumber[\"DescriptorProto_NestedType\"] = 3] = \"DescriptorProto_NestedType\";\n    FieldNumber[FieldNumber[\"DescriptorProto_EnumType\"] = 4] = \"DescriptorProto_EnumType\";\n    FieldNumber[FieldNumber[\"DescriptorProto_Extension\"] = 6] = \"DescriptorProto_Extension\";\n    FieldNumber[FieldNumber[\"DescriptorProto_OneofDecl\"] = 8] = \"DescriptorProto_OneofDecl\";\n    FieldNumber[FieldNumber[\"EnumDescriptorProto_Value\"] = 2] = \"EnumDescriptorProto_Value\";\n    FieldNumber[FieldNumber[\"ServiceDescriptorProto_Method\"] = 2] = \"ServiceDescriptorProto_Method\";\n})(FieldNumber || (FieldNumber = {}));\n/**\n * Return a string that matches the definition of a field in the protobuf\n * source. Does not take custom options into account.\n */\nfunction declarationString() {\n    var _a, _b, _c;\n    const parts = [];\n    if (this.repeated) {\n        parts.push(\"repeated\");\n    }\n    if (this.optional) {\n        parts.push(\"optional\");\n    }\n    const file = this.kind === \"extension\" ? this.file : this.parent.file;\n    if (file.syntax == \"proto2\" &&\n        this.proto.label === FieldDescriptorProto_Label.REQUIRED) {\n        parts.push(\"required\");\n    }\n    let type;\n    switch (this.fieldKind) {\n        case \"scalar\":\n            type = ScalarType[this.scalar].toLowerCase();\n            break;\n        case \"enum\":\n            type = this.enum.typeName;\n            break;\n        case \"message\":\n            type = this.message.typeName;\n            break;\n        case \"map\": {\n            const k = ScalarType[this.mapKey].toLowerCase();\n            let v;\n            switch (this.mapValue.kind) {\n                case \"scalar\":\n                    v = ScalarType[this.mapValue.scalar].toLowerCase();\n                    break;\n                case \"enum\":\n                    v = this.mapValue.enum.typeName;\n                    break;\n                case \"message\":\n                    v = this.mapValue.message.typeName;\n                    break;\n            }\n            type = `map<${k}, ${v}>`;\n            break;\n        }\n    }\n    parts.push(`${type} ${this.name} = ${this.number}`);\n    const options = [];\n    if (((_a = this.proto.options) === null || _a === void 0 ? void 0 : _a.packed) !== undefined) {\n        options.push(`packed = ${this.proto.options.packed.toString()}`);\n    }\n    let defaultValue = this.proto.defaultValue;\n    if (defaultValue !== undefined) {\n        if (this.proto.type == FieldDescriptorProto_Type.BYTES ||\n            this.proto.type == FieldDescriptorProto_Type.STRING) {\n            defaultValue = '\"' + defaultValue.replace('\"', '\\\\\"') + '\"';\n        }\n        options.push(`default = ${defaultValue}`);\n    }\n    if (this.jsonName !== undefined) {\n        options.push(`json_name = \"${this.jsonName}\"`);\n    }\n    if (((_b = this.proto.options) === null || _b === void 0 ? void 0 : _b.jstype) !== undefined) {\n        options.push(`jstype = ${FieldOptions_JSType[this.proto.options.jstype]}`);\n    }\n    if (((_c = this.proto.options) === null || _c === void 0 ? void 0 : _c.deprecated) === true) {\n        options.push(`deprecated = true`);\n    }\n    if (options.length > 0) {\n        parts.push(\"[\" + options.join(\", \") + \"]\");\n    }\n    return parts.join(\" \");\n}\n/**\n * Parses a text-encoded default value (proto2) of a scalar or enum field.\n */\nfunction getDefaultValue() {\n    const d = this.proto.defaultValue;\n    if (d === undefined) {\n        return undefined;\n    }\n    switch (this.fieldKind) {\n        case \"enum\":\n            return parseTextFormatEnumValue(this.enum, d);\n        case \"scalar\":\n            return parseTextFormatScalarValue(this.scalar, d);\n        default:\n            return undefined;\n    }\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n * @generated from message google.protobuf.Timestamp\n */\nexport class Timestamp extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Represents seconds of UTC time since Unix epoch\n         * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n         * 9999-12-31T23:59:59Z inclusive.\n         *\n         * @generated from field: int64 seconds = 1;\n         */\n        this.seconds = protoInt64.zero;\n        /**\n         * Non-negative fractions of a second at nanosecond resolution. Negative\n         * second values with fractions must still have non-negative nanos values\n         * that count forward in time. Must be from 0 to 999,999,999\n         * inclusive.\n         *\n         * @generated from field: int32 nanos = 2;\n         */\n        this.nanos = 0;\n        proto3.util.initPartial(data, this);\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${proto3.json.debug(json)}`);\n        }\n        const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        const ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\n        if (Number.isNaN(ms)) {\n            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string`);\n        }\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        this.seconds = protoInt64.parse(ms / 1000);\n        this.nanos = 0;\n        if (matches[7]) {\n            this.nanos = (parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000);\n        }\n        return this;\n    }\n    toJson(options) {\n        const ms = Number(this.seconds) * 1000;\n        if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive`);\n        }\n        if (this.nanos < 0) {\n            throw new Error(`cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative`);\n        }\n        let z = \"Z\";\n        if (this.nanos > 0) {\n            const nanosStr = (this.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === \"000000\") {\n                z = \".\" + nanosStr.substring(0, 3) + \"Z\";\n            }\n            else if (nanosStr.substring(6) === \"000\") {\n                z = \".\" + nanosStr.substring(0, 6) + \"Z\";\n            }\n            else {\n                z = \".\" + nanosStr + \"Z\";\n            }\n        }\n        return new Date(ms).toISOString().replace(\".000Z\", z);\n    }\n    toDate() {\n        return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));\n    }\n    static now() {\n        return Timestamp.fromDate(new Date());\n    }\n    static fromDate(date) {\n        const ms = date.getTime();\n        return new Timestamp({\n            seconds: protoInt64.parse(Math.floor(ms / 1000)),\n            nanos: (ms % 1000) * 1000000,\n        });\n    }\n    static fromBinary(bytes, options) {\n        return new Timestamp().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Timestamp().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Timestamp().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Timestamp, a, b);\n    }\n}\nTimestamp.runtime = proto3;\nTimestamp.typeName = \"google.protobuf.Timestamp\";\nTimestamp.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"seconds\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"nanos\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A Duration represents a signed, fixed-length span of time represented\n * as a count of seconds and fractions of seconds at nanosecond\n * resolution. It is independent of any calendar and concepts like \"day\"\n * or \"month\". It is related to Timestamp in that the difference between\n * two Timestamp values is a Duration and it can be added or subtracted\n * from a Timestamp. Range is approximately +-10,000 years.\n *\n * # Examples\n *\n * Example 1: Compute Duration from two Timestamps in pseudo code.\n *\n *     Timestamp start = ...;\n *     Timestamp end = ...;\n *     Duration duration = ...;\n *\n *     duration.seconds = end.seconds - start.seconds;\n *     duration.nanos = end.nanos - start.nanos;\n *\n *     if (duration.seconds < 0 && duration.nanos > 0) {\n *       duration.seconds += 1;\n *       duration.nanos -= 1000000000;\n *     } else if (duration.seconds > 0 && duration.nanos < 0) {\n *       duration.seconds -= 1;\n *       duration.nanos += 1000000000;\n *     }\n *\n * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n *\n *     Timestamp start = ...;\n *     Duration duration = ...;\n *     Timestamp end = ...;\n *\n *     end.seconds = start.seconds + duration.seconds;\n *     end.nanos = start.nanos + duration.nanos;\n *\n *     if (end.nanos < 0) {\n *       end.seconds -= 1;\n *       end.nanos += 1000000000;\n *     } else if (end.nanos >= 1000000000) {\n *       end.seconds += 1;\n *       end.nanos -= 1000000000;\n *     }\n *\n * Example 3: Compute Duration from datetime.timedelta in Python.\n *\n *     td = datetime.timedelta(days=3, minutes=10)\n *     duration = Duration()\n *     duration.FromTimedelta(td)\n *\n * # JSON Mapping\n *\n * In JSON format, the Duration type is encoded as a string rather than an\n * object, where the string ends in the suffix \"s\" (indicating seconds) and\n * is preceded by the number of seconds, with nanoseconds expressed as\n * fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n * encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n * be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n * microsecond should be expressed in JSON format as \"3.000001s\".\n *\n *\n * @generated from message google.protobuf.Duration\n */\nexport class Duration extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Signed seconds of the span of time. Must be from -315,576,000,000\n         * to +315,576,000,000 inclusive. Note: these bounds are computed from:\n         * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n         *\n         * @generated from field: int64 seconds = 1;\n         */\n        this.seconds = protoInt64.zero;\n        /**\n         * Signed fractions of a second at nanosecond resolution of the span\n         * of time. Durations less than one second are represented with a 0\n         * `seconds` field and a positive or negative `nanos` field. For durations\n         * of one second or more, a non-zero value for the `nanos` field must be\n         * of the same sign as the `seconds` field. Must be from -999,999,999\n         * to +999,999,999 inclusive.\n         *\n         * @generated from field: int32 nanos = 2;\n         */\n        this.nanos = 0;\n        proto3.util.initPartial(data, this);\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        const match = json.match(/^(-?[0-9]+)(?:\\.([0-9]+))?s/);\n        if (match === null) {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        const longSeconds = Number(match[1]);\n        if (longSeconds > 315576000000 || longSeconds < -315576000000) {\n            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${proto3.json.debug(json)}`);\n        }\n        this.seconds = protoInt64.parse(longSeconds);\n        if (typeof match[2] == \"string\") {\n            const nanosStr = match[2] + \"0\".repeat(9 - match[2].length);\n            this.nanos = parseInt(nanosStr);\n            if (longSeconds < 0 || Object.is(longSeconds, -0)) {\n                this.nanos = -this.nanos;\n            }\n        }\n        return this;\n    }\n    toJson(options) {\n        if (Number(this.seconds) > 315576000000 || Number(this.seconds) < -315576000000) {\n            throw new Error(`cannot encode google.protobuf.Duration to JSON: value out of range`);\n        }\n        let text = this.seconds.toString();\n        if (this.nanos !== 0) {\n            let nanosStr = Math.abs(this.nanos).toString();\n            nanosStr = \"0\".repeat(9 - nanosStr.length) + nanosStr;\n            if (nanosStr.substring(3) === \"000000\") {\n                nanosStr = nanosStr.substring(0, 3);\n            }\n            else if (nanosStr.substring(6) === \"000\") {\n                nanosStr = nanosStr.substring(0, 6);\n            }\n            text += \".\" + nanosStr;\n            if (this.nanos < 0 && Number(this.seconds) == 0) {\n                text = \"-\" + text;\n            }\n        }\n        return text + \"s\";\n    }\n    static fromBinary(bytes, options) {\n        return new Duration().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Duration().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Duration().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Duration, a, b);\n    }\n}\nDuration.runtime = proto3;\nDuration.typeName = \"google.protobuf.Duration\";\nDuration.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"seconds\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n    { no: 2, name: \"nanos\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `Any` contains an arbitrary serialized protocol buffer message along with a\n * URL that describes the type of the serialized message.\n *\n * Protobuf library provides support to pack/unpack Any values in the form\n * of utility functions or additional generated methods of the Any type.\n *\n * Example 1: Pack and unpack a message in C++.\n *\n *     Foo foo = ...;\n *     Any any;\n *     any.PackFrom(foo);\n *     ...\n *     if (any.UnpackTo(&foo)) {\n *       ...\n *     }\n *\n * Example 2: Pack and unpack a message in Java.\n *\n *     Foo foo = ...;\n *     Any any = Any.pack(foo);\n *     ...\n *     if (any.is(Foo.class)) {\n *       foo = any.unpack(Foo.class);\n *     }\n *     // or ...\n *     if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n *       foo = any.unpack(Foo.getDefaultInstance());\n *     }\n *\n *  Example 3: Pack and unpack a message in Python.\n *\n *     foo = Foo(...)\n *     any = Any()\n *     any.Pack(foo)\n *     ...\n *     if any.Is(Foo.DESCRIPTOR):\n *       any.Unpack(foo)\n *       ...\n *\n *  Example 4: Pack and unpack a message in Go\n *\n *      foo := &pb.Foo{...}\n *      any, err := anypb.New(foo)\n *      if err != nil {\n *        ...\n *      }\n *      ...\n *      foo := &pb.Foo{}\n *      if err := any.UnmarshalTo(foo); err != nil {\n *        ...\n *      }\n *\n * The pack methods provided by protobuf library will by default use\n * 'type.googleapis.com/full.type.name' as the type URL and the unpack\n * methods only use the fully qualified type name after the last '/'\n * in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n * name \"y.z\".\n *\n * JSON\n * ====\n * The JSON representation of an `Any` value uses the regular\n * representation of the deserialized, embedded message, with an\n * additional field `@type` which contains the type URL. Example:\n *\n *     package google.profile;\n *     message Person {\n *       string first_name = 1;\n *       string last_name = 2;\n *     }\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.profile.Person\",\n *       \"firstName\": <string>,\n *       \"lastName\": <string>\n *     }\n *\n * If the embedded message type is well-known and has a custom JSON\n * representation, that representation will be embedded adding a field\n * `value` which holds the custom JSON in addition to the `@type`\n * field. Example (for message [google.protobuf.Duration][]):\n *\n *     {\n *       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n *       \"value\": \"1.212s\"\n *     }\n *\n *\n * @generated from message google.protobuf.Any\n */\nexport class Any extends Message {\n    constructor(data) {\n        super();\n        /**\n         * A URL/resource name that uniquely identifies the type of the serialized\n         * protocol buffer message. This string must contain at least\n         * one \"/\" character. The last segment of the URL's path must represent\n         * the fully qualified name of the type (as in\n         * `path/google.protobuf.Duration`). The name should be in a canonical form\n         * (e.g., leading \".\" is not accepted).\n         *\n         * In practice, teams usually precompile into the binary all types that they\n         * expect it to use in the context of Any. However, for URLs which use the\n         * scheme `http`, `https`, or no scheme, one can optionally set up a type\n         * server that maps type URLs to message definitions as follows:\n         *\n         * * If no scheme is provided, `https` is assumed.\n         * * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n         *   value in binary format, or produce an error.\n         * * Applications are allowed to cache lookup results based on the\n         *   URL, or have them precompiled into a binary to avoid any\n         *   lookup. Therefore, binary compatibility needs to be preserved\n         *   on changes to types. (Use versioned type names to manage\n         *   breaking changes.)\n         *\n         * Note: this functionality is not currently available in the official\n         * protobuf release, and it is not used for type URLs beginning with\n         * type.googleapis.com. As of May 2023, there are no widely used type server\n         * implementations and no plans to implement one.\n         *\n         * Schemes other than `http`, `https` (or the empty scheme) might be\n         * used with implementation specific semantics.\n         *\n         *\n         * @generated from field: string type_url = 1;\n         */\n        this.typeUrl = \"\";\n        /**\n         * Must be a valid serialized protocol buffer of the above specified type.\n         *\n         * @generated from field: bytes value = 2;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        var _a;\n        if (this.typeUrl === \"\") {\n            return {};\n        }\n        const typeName = this.typeUrlToName(this.typeUrl);\n        const messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot encode message google.protobuf.Any to JSON: \"${this.typeUrl}\" is not in the type registry`);\n        }\n        const message = messageType.fromBinary(this.value);\n        let json = message.toJson(options);\n        if (typeName.startsWith(\"google.protobuf.\") || (json === null || Array.isArray(json) || typeof json !== \"object\")) {\n            json = { value: json };\n        }\n        json[\"@type\"] = this.typeUrl;\n        return json;\n    }\n    fromJson(json, options) {\n        var _a;\n        if (json === null || Array.isArray(json) || typeof json != \"object\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? \"null\" : Array.isArray(json) ? \"array\" : typeof json}`);\n        }\n        if (Object.keys(json).length == 0) {\n            return this;\n        }\n        const typeUrl = json[\"@type\"];\n        if (typeof typeUrl != \"string\" || typeUrl == \"\") {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: \"@type\" is empty`);\n        }\n        const typeName = this.typeUrlToName(typeUrl), messageType = (_a = options === null || options === void 0 ? void 0 : options.typeRegistry) === null || _a === void 0 ? void 0 : _a.findMessage(typeName);\n        if (!messageType) {\n            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);\n        }\n        let message;\n        if (typeName.startsWith(\"google.protobuf.\") && Object.prototype.hasOwnProperty.call(json, \"value\")) {\n            message = messageType.fromJson(json[\"value\"], options);\n        }\n        else {\n            const copy = Object.assign({}, json);\n            delete copy[\"@type\"];\n            message = messageType.fromJson(copy, options);\n        }\n        this.packFrom(message);\n        return this;\n    }\n    packFrom(message) {\n        this.value = message.toBinary();\n        this.typeUrl = this.typeNameToUrl(message.getType().typeName);\n    }\n    unpackTo(target) {\n        if (!this.is(target.getType())) {\n            return false;\n        }\n        target.fromBinary(this.value);\n        return true;\n    }\n    unpack(registry) {\n        if (this.typeUrl === \"\") {\n            return undefined;\n        }\n        const messageType = registry.findMessage(this.typeUrlToName(this.typeUrl));\n        if (!messageType) {\n            return undefined;\n        }\n        return messageType.fromBinary(this.value);\n    }\n    is(type) {\n        if (this.typeUrl === '') {\n            return false;\n        }\n        const name = this.typeUrlToName(this.typeUrl);\n        let typeName = '';\n        if (typeof type === 'string') {\n            typeName = type;\n        }\n        else {\n            typeName = type.typeName;\n        }\n        return name === typeName;\n    }\n    typeNameToUrl(name) {\n        return `type.googleapis.com/${name}`;\n    }\n    typeUrlToName(url) {\n        if (!url.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        const slash = url.lastIndexOf(\"/\");\n        const name = slash >= 0 ? url.substring(slash + 1) : url;\n        if (!name.length) {\n            throw new Error(`invalid type url: ${url}`);\n        }\n        return name;\n    }\n    static pack(message) {\n        const any = new Any();\n        any.packFrom(message);\n        return any;\n    }\n    static fromBinary(bytes, options) {\n        return new Any().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Any().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Any().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Any, a, b);\n    }\n}\nAny.runtime = proto3;\nAny.typeName = \"google.protobuf.Any\";\nAny.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * A generic empty message that you can re-use to avoid defining duplicated\n * empty messages in your APIs. A typical example is to use it as the request\n * or the response type of an API method. For instance:\n *\n *     service Foo {\n *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n *     }\n *\n *\n * @generated from message google.protobuf.Empty\n */\nexport class Empty extends Message {\n    constructor(data) {\n        super();\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Empty().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Empty().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Empty().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Empty, a, b);\n    }\n}\nEmpty.runtime = proto3;\nEmpty.typeName = \"google.protobuf.Empty\";\nEmpty.fields = proto3.util.newFieldList(() => []);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `FieldMask` represents a set of symbolic field paths, for example:\n *\n *     paths: \"f.a\"\n *     paths: \"f.b.d\"\n *\n * Here `f` represents a field in some root message, `a` and `b`\n * fields in the message found in `f`, and `d` a field found in the\n * message in `f.b`.\n *\n * Field masks are used to specify a subset of fields that should be\n * returned by a get operation or modified by an update operation.\n * Field masks also have a custom JSON encoding (see below).\n *\n * # Field Masks in Projections\n *\n * When used in the context of a projection, a response message or\n * sub-message is filtered by the API to only contain those fields as\n * specified in the mask. For example, if the mask in the previous\n * example is applied to a response message as follows:\n *\n *     f {\n *       a : 22\n *       b {\n *         d : 1\n *         x : 2\n *       }\n *       y : 13\n *     }\n *     z: 8\n *\n * The result will not contain specific values for fields x,y and z\n * (their value will be set to the default, and omitted in proto text\n * output):\n *\n *\n *     f {\n *       a : 22\n *       b {\n *         d : 1\n *       }\n *     }\n *\n * A repeated field is not allowed except at the last position of a\n * paths string.\n *\n * If a FieldMask object is not present in a get operation, the\n * operation applies to all fields (as if a FieldMask of all fields\n * had been specified).\n *\n * Note that a field mask does not necessarily apply to the\n * top-level response message. In case of a REST get operation, the\n * field mask applies directly to the response, but in case of a REST\n * list operation, the mask instead applies to each individual message\n * in the returned resource list. In case of a REST custom method,\n * other definitions may be used. Where the mask applies will be\n * clearly documented together with its declaration in the API.  In\n * any case, the effect on the returned resource/resources is required\n * behavior for APIs.\n *\n * # Field Masks in Update Operations\n *\n * A field mask in update operations specifies which fields of the\n * targeted resource are going to be updated. The API is required\n * to only change the values of the fields as specified in the mask\n * and leave the others untouched. If a resource is passed in to\n * describe the updated values, the API ignores the values of all\n * fields not covered by the mask.\n *\n * If a repeated field is specified for an update operation, new values will\n * be appended to the existing repeated field in the target resource. Note that\n * a repeated field is only allowed in the last position of a `paths` string.\n *\n * If a sub-message is specified in the last position of the field mask for an\n * update operation, then new value will be merged into the existing sub-message\n * in the target resource.\n *\n * For example, given the target message:\n *\n *     f {\n *       b {\n *         d: 1\n *         x: 2\n *       }\n *       c: [1]\n *     }\n *\n * And an update message:\n *\n *     f {\n *       b {\n *         d: 10\n *       }\n *       c: [2]\n *     }\n *\n * then if the field mask is:\n *\n *  paths: [\"f.b\", \"f.c\"]\n *\n * then the result will be:\n *\n *     f {\n *       b {\n *         d: 10\n *         x: 2\n *       }\n *       c: [1, 2]\n *     }\n *\n * An implementation may provide options to override this default behavior for\n * repeated and message fields.\n *\n * In order to reset a field's value to the default, the field must\n * be in the mask and set to the default value in the provided resource.\n * Hence, in order to reset all fields of a resource, provide a default\n * instance of the resource and set all fields in the mask, or do\n * not provide a mask as described below.\n *\n * If a field mask is not present on update, the operation applies to\n * all fields (as if a field mask of all fields has been specified).\n * Note that in the presence of schema evolution, this may mean that\n * fields the client does not know and has therefore not filled into\n * the request will be reset to their default. If this is unwanted\n * behavior, a specific service may require a client to always specify\n * a field mask, producing an error if not.\n *\n * As with get operations, the location of the resource which\n * describes the updated values in the request message depends on the\n * operation kind. In any case, the effect of the field mask is\n * required to be honored by the API.\n *\n * ## Considerations for HTTP REST\n *\n * The HTTP kind of an update operation which uses a field mask must\n * be set to PATCH instead of PUT in order to satisfy HTTP semantics\n * (PUT must only be used for full updates).\n *\n * # JSON Encoding of Field Masks\n *\n * In JSON, a field mask is encoded as a single string where paths are\n * separated by a comma. Fields name in each path are converted\n * to/from lower-camel naming conventions.\n *\n * As an example, consider the following message declarations:\n *\n *     message Profile {\n *       User user = 1;\n *       Photo photo = 2;\n *     }\n *     message User {\n *       string display_name = 1;\n *       string address = 2;\n *     }\n *\n * In proto a field mask for `Profile` may look as such:\n *\n *     mask {\n *       paths: \"user.display_name\"\n *       paths: \"photo\"\n *     }\n *\n * In JSON, the same mask is represented as below:\n *\n *     {\n *       mask: \"user.displayName,photo\"\n *     }\n *\n * # Field Masks and Oneof Fields\n *\n * Field masks treat fields in oneofs just as regular fields. Consider the\n * following message:\n *\n *     message SampleMessage {\n *       oneof test_oneof {\n *         string name = 4;\n *         SubMessage sub_message = 9;\n *       }\n *     }\n *\n * The field mask can be:\n *\n *     mask {\n *       paths: \"name\"\n *     }\n *\n * Or:\n *\n *     mask {\n *       paths: \"sub_message\"\n *     }\n *\n * Note that oneof type names (\"test_oneof\" in this case) cannot be used in\n * paths.\n *\n * ## Field Mask Verification\n *\n * The implementation of any API method which has a FieldMask type field in the\n * request should verify the included field paths, and return an\n * `INVALID_ARGUMENT` error if any path is unmappable.\n *\n * @generated from message google.protobuf.FieldMask\n */\nexport class FieldMask extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The set of field mask paths.\n         *\n         * @generated from field: repeated string paths = 1;\n         */\n        this.paths = [];\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        // Converts snake_case to protoCamelCase according to the convention\n        // used by protoc to convert a field name to a JSON name.\n        function protoCamelCase(snakeCase) {\n            let capNext = false;\n            const b = [];\n            for (let i = 0; i < snakeCase.length; i++) {\n                let c = snakeCase.charAt(i);\n                switch (c) {\n                    case '_':\n                        capNext = true;\n                        break;\n                    case '0':\n                    case '1':\n                    case '2':\n                    case '3':\n                    case '4':\n                    case '5':\n                    case '6':\n                    case '7':\n                    case '8':\n                    case '9':\n                        b.push(c);\n                        capNext = false;\n                        break;\n                    default:\n                        if (capNext) {\n                            capNext = false;\n                            c = c.toUpperCase();\n                        }\n                        b.push(c);\n                        break;\n                }\n            }\n            return b.join('');\n        }\n        return this.paths.map(p => {\n            if (p.match(/_[0-9]?_/g) || p.match(/[A-Z]/g)) {\n                throw new Error(\"cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name \\\"\" + p + \"\\\" is irreversible\");\n            }\n            return protoCamelCase(p);\n        }).join(\",\");\n    }\n    fromJson(json, options) {\n        if (typeof json !== \"string\") {\n            throw new Error(\"cannot decode google.protobuf.FieldMask from JSON: \" + proto3.json.debug(json));\n        }\n        if (json === \"\") {\n            return this;\n        }\n        function camelToSnake(str) {\n            if (str.includes(\"_\")) {\n                throw new Error(\"cannot decode google.protobuf.FieldMask from JSON: path names must be lowerCamelCase\");\n            }\n            const sc = str.replace(/[A-Z]/g, letter => \"_\" + letter.toLowerCase());\n            return (sc[0] === \"_\") ? sc.substring(1) : sc;\n        }\n        this.paths = json.split(\",\").map(camelToSnake);\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new FieldMask().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FieldMask().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FieldMask().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(FieldMask, a, b);\n    }\n}\nFieldMask.runtime = proto3;\nFieldMask.typeName = \"google.protobuf.FieldMask\";\nFieldMask.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"paths\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// @generated by protoc-gen-es v1.9.0 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/struct.proto (package google.protobuf, syntax proto3)\n/* eslint-disable */\nimport { proto3 } from \"../../proto3.js\";\nimport { Message } from \"../../message.js\";\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n * The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from enum google.protobuf.NullValue\n */\nexport var NullValue;\n(function (NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from enum value: NULL_VALUE = 0;\n     */\n    NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// Retrieve enum metadata with: proto3.getEnumType(NullValue)\nproto3.util.setEnumType(NullValue, \"google.protobuf.NullValue\", [\n    { no: 0, name: \"NULL_VALUE\" },\n]);\n/**\n * `Struct` represents a structured data value, consisting of fields\n * which map to dynamically typed values. In some languages, `Struct`\n * might be supported by a native representation. For example, in\n * scripting languages like JS a struct is represented as an\n * object. The details of that representation are described together\n * with the proto support for the language.\n *\n * The JSON representation for `Struct` is JSON object.\n *\n * @generated from message google.protobuf.Struct\n */\nexport class Struct extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Unordered map of dynamically typed values.\n         *\n         * @generated from field: map<string, google.protobuf.Value> fields = 1;\n         */\n        this.fields = {};\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        const json = {};\n        for (const [k, v] of Object.entries(this.fields)) {\n            json[k] = v.toJson(options);\n        }\n        return json;\n    }\n    fromJson(json, options) {\n        if (typeof json != \"object\" || json == null || Array.isArray(json)) {\n            throw new Error(\"cannot decode google.protobuf.Struct from JSON \" + proto3.json.debug(json));\n        }\n        for (const [k, v] of Object.entries(json)) {\n            this.fields[k] = Value.fromJson(v);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Struct().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Struct().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Struct().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Struct, a, b);\n    }\n}\nStruct.runtime = proto3;\nStruct.typeName = \"google.protobuf.Struct\";\nStruct.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"fields\", kind: \"map\", K: 9 /* ScalarType.STRING */, V: { kind: \"message\", T: Value } },\n]);\n/**\n * `Value` represents a dynamically typed value which can be either\n * null, a number, a string, a boolean, a recursive struct value, or a\n * list of values. A producer of value is expected to set one of these\n * variants. Absence of any variant indicates an error.\n *\n * The JSON representation for `Value` is JSON value.\n *\n * @generated from message google.protobuf.Value\n */\nexport class Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The kind of value.\n         *\n         * @generated from oneof google.protobuf.Value.kind\n         */\n        this.kind = { case: undefined };\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        switch (this.kind.case) {\n            case \"nullValue\":\n                return null;\n            case \"numberValue\":\n                if (!Number.isFinite(this.kind.value)) {\n                    throw new Error(\"google.protobuf.Value cannot be NaN or Infinity\");\n                }\n                return this.kind.value;\n            case \"boolValue\":\n                return this.kind.value;\n            case \"stringValue\":\n                return this.kind.value;\n            case \"structValue\":\n            case \"listValue\":\n                return this.kind.value.toJson(Object.assign(Object.assign({}, options), { emitDefaultValues: true }));\n        }\n        throw new Error(\"google.protobuf.Value must have a value\");\n    }\n    fromJson(json, options) {\n        switch (typeof json) {\n            case \"number\":\n                this.kind = { case: \"numberValue\", value: json };\n                break;\n            case \"string\":\n                this.kind = { case: \"stringValue\", value: json };\n                break;\n            case \"boolean\":\n                this.kind = { case: \"boolValue\", value: json };\n                break;\n            case \"object\":\n                if (json === null) {\n                    this.kind = { case: \"nullValue\", value: NullValue.NULL_VALUE };\n                }\n                else if (Array.isArray(json)) {\n                    this.kind = { case: \"listValue\", value: ListValue.fromJson(json) };\n                }\n                else {\n                    this.kind = { case: \"structValue\", value: Struct.fromJson(json) };\n                }\n                break;\n            default:\n                throw new Error(\"cannot decode google.protobuf.Value from JSON \" + proto3.json.debug(json));\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Value, a, b);\n    }\n}\nValue.runtime = proto3;\nValue.typeName = \"google.protobuf.Value\";\nValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"null_value\", kind: \"enum\", T: proto3.getEnumType(NullValue), oneof: \"kind\" },\n    { no: 2, name: \"number_value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, oneof: \"kind\" },\n    { no: 3, name: \"string_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, oneof: \"kind\" },\n    { no: 4, name: \"bool_value\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */, oneof: \"kind\" },\n    { no: 5, name: \"struct_value\", kind: \"message\", T: Struct, oneof: \"kind\" },\n    { no: 6, name: \"list_value\", kind: \"message\", T: ListValue, oneof: \"kind\" },\n]);\n/**\n * `ListValue` is a wrapper around a repeated field of values.\n *\n * The JSON representation for `ListValue` is JSON array.\n *\n * @generated from message google.protobuf.ListValue\n */\nexport class ListValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Repeated field of dynamically typed values.\n         *\n         * @generated from field: repeated google.protobuf.Value values = 1;\n         */\n        this.values = [];\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return this.values.map(v => v.toJson());\n    }\n    fromJson(json, options) {\n        if (!Array.isArray(json)) {\n            throw new Error(\"cannot decode google.protobuf.ListValue from JSON \" + proto3.json.debug(json));\n        }\n        for (let e of json) {\n            this.values.push(Value.fromJson(e));\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new ListValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new ListValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new ListValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(ListValue, a, b);\n    }\n}\nListValue.runtime = proto3;\nListValue.typeName = \"google.protobuf.ListValue\";\nListValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"values\", kind: \"message\", T: Value, repeated: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\nimport { ScalarType } from \"../../scalar.js\";\nimport { protoInt64 } from \"../../proto-int64.js\";\n/**\n * Wrapper message for `double`.\n *\n * The JSON representation for `DoubleValue` is JSON number.\n *\n * @generated from message google.protobuf.DoubleValue\n */\nexport class DoubleValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The double value.\n         *\n         * @generated from field: double value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.DOUBLE, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.DOUBLE, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.DoubleValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new DoubleValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new DoubleValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new DoubleValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(DoubleValue, a, b);\n    }\n}\nDoubleValue.runtime = proto3;\nDoubleValue.typeName = \"google.protobuf.DoubleValue\";\nDoubleValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n]);\nDoubleValue.fieldWrapper = {\n    wrapField(value) {\n        return new DoubleValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `float`.\n *\n * The JSON representation for `FloatValue` is JSON number.\n *\n * @generated from message google.protobuf.FloatValue\n */\nexport class FloatValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The float value.\n         *\n         * @generated from field: float value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.FLOAT, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.FLOAT, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.FloatValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new FloatValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new FloatValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new FloatValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(FloatValue, a, b);\n    }\n}\nFloatValue.runtime = proto3;\nFloatValue.typeName = \"google.protobuf.FloatValue\";\nFloatValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n]);\nFloatValue.fieldWrapper = {\n    wrapField(value) {\n        return new FloatValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int64`.\n *\n * The JSON representation for `Int64Value` is JSON string.\n *\n * @generated from message google.protobuf.Int64Value\n */\nexport class Int64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int64 value.\n         *\n         * @generated from field: int64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int64Value, a, b);\n    }\n}\nInt64Value.runtime = proto3;\nInt64Value.typeName = \"google.protobuf.Int64Value\";\nInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n]);\nInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint64`.\n *\n * The JSON representation for `UInt64Value` is JSON string.\n *\n * @generated from message google.protobuf.UInt64Value\n */\nexport class UInt64Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint64 value.\n         *\n         * @generated from field: uint64 value = 1;\n         */\n        this.value = protoInt64.zero;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT64, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT64, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt64Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt64Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt64Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt64Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt64Value, a, b);\n    }\n}\nUInt64Value.runtime = proto3;\nUInt64Value.typeName = \"google.protobuf.UInt64Value\";\nUInt64Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n]);\nUInt64Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt64Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `int32`.\n *\n * The JSON representation for `Int32Value` is JSON number.\n *\n * @generated from message google.protobuf.Int32Value\n */\nexport class Int32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The int32 value.\n         *\n         * @generated from field: int32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.INT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.INT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.Int32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new Int32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Int32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Int32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Int32Value, a, b);\n    }\n}\nInt32Value.runtime = proto3;\nInt32Value.typeName = \"google.protobuf.Int32Value\";\nInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n]);\nInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new Int32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `uint32`.\n *\n * The JSON representation for `UInt32Value` is JSON number.\n *\n * @generated from message google.protobuf.UInt32Value\n */\nexport class UInt32Value extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The uint32 value.\n         *\n         * @generated from field: uint32 value = 1;\n         */\n        this.value = 0;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.UINT32, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.UINT32, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.UInt32Value from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new UInt32Value().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new UInt32Value().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new UInt32Value().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(UInt32Value, a, b);\n    }\n}\nUInt32Value.runtime = proto3;\nUInt32Value.typeName = \"google.protobuf.UInt32Value\";\nUInt32Value.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 13 /* ScalarType.UINT32 */ },\n]);\nUInt32Value.fieldWrapper = {\n    wrapField(value) {\n        return new UInt32Value({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bool`.\n *\n * The JSON representation for `BoolValue` is JSON `true` and `false`.\n *\n * @generated from message google.protobuf.BoolValue\n */\nexport class BoolValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bool value.\n         *\n         * @generated from field: bool value = 1;\n         */\n        this.value = false;\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BOOL, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BOOL, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BoolValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BoolValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BoolValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BoolValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BoolValue, a, b);\n    }\n}\nBoolValue.runtime = proto3;\nBoolValue.typeName = \"google.protobuf.BoolValue\";\nBoolValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n]);\nBoolValue.fieldWrapper = {\n    wrapField(value) {\n        return new BoolValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `string`.\n *\n * The JSON representation for `StringValue` is JSON string.\n *\n * @generated from message google.protobuf.StringValue\n */\nexport class StringValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The string value.\n         *\n         * @generated from field: string value = 1;\n         */\n        this.value = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.STRING, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.STRING, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.StringValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new StringValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new StringValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new StringValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(StringValue, a, b);\n    }\n}\nStringValue.runtime = proto3;\nStringValue.typeName = \"google.protobuf.StringValue\";\nStringValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\nStringValue.fieldWrapper = {\n    wrapField(value) {\n        return new StringValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n/**\n * Wrapper message for `bytes`.\n *\n * The JSON representation for `BytesValue` is JSON string.\n *\n * @generated from message google.protobuf.BytesValue\n */\nexport class BytesValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The bytes value.\n         *\n         * @generated from field: bytes value = 1;\n         */\n        this.value = new Uint8Array(0);\n        proto3.util.initPartial(data, this);\n    }\n    toJson(options) {\n        return proto3.json.writeScalar(ScalarType.BYTES, this.value, true);\n    }\n    fromJson(json, options) {\n        try {\n            this.value = proto3.json.readScalar(ScalarType.BYTES, json);\n        }\n        catch (e) {\n            let m = `cannot decode message google.protobuf.BytesValue from JSON\"`;\n            if (e instanceof Error && e.message.length > 0) {\n                m += `: ${e.message}`;\n            }\n            throw new Error(m);\n        }\n        return this;\n    }\n    static fromBinary(bytes, options) {\n        return new BytesValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new BytesValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new BytesValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(BytesValue, a, b);\n    }\n}\nBytesValue.runtime = proto3;\nBytesValue.typeName = \"google.protobuf.BytesValue\";\nBytesValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"value\", kind: \"scalar\", T: 12 /* ScalarType.BYTES */ },\n]);\nBytesValue.fieldWrapper = {\n    wrapField(value) {\n        return new BytesValue({ value });\n    },\n    unwrapField(value) {\n        return value.value;\n    }\n};\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { assert } from \"./private/assert.js\";\nimport { proto3 } from \"./proto3.js\";\nimport { proto2 } from \"./proto2.js\";\nimport { ScalarType } from \"./scalar.js\";\nimport { localName } from \"./private/names.js\";\nimport { Timestamp } from \"./google/protobuf/timestamp_pb.js\";\nimport { Duration } from \"./google/protobuf/duration_pb.js\";\nimport { Any } from \"./google/protobuf/any_pb.js\";\nimport { Empty } from \"./google/protobuf/empty_pb.js\";\nimport { FieldMask } from \"./google/protobuf/field_mask_pb.js\";\nimport { ListValue, NullValue, Struct, Value, } from \"./google/protobuf/struct_pb.js\";\nimport { getEnumType } from \"./private/enum.js\";\nimport { BoolValue, BytesValue, DoubleValue, FloatValue, Int32Value, Int64Value, StringValue, UInt32Value, UInt64Value, } from \"./google/protobuf/wrappers_pb.js\";\nimport { FieldDescriptorProto_Label, FieldDescriptorProto_Type, FileDescriptorSet, } from \"./google/protobuf/descriptor_pb.js\";\nimport { createDescriptorSet } from \"./create-descriptor-set.js\";\nimport { isMessage } from \"./is-message.js\";\n// well-known message types with specialized JSON representation\nconst wkMessages = [\n    Any,\n    Duration,\n    Empty,\n    FieldMask,\n    Struct,\n    Value,\n    ListValue,\n    Timestamp,\n    Duration,\n    DoubleValue,\n    FloatValue,\n    Int64Value,\n    Int32Value,\n    UInt32Value,\n    UInt64Value,\n    BoolValue,\n    StringValue,\n    BytesValue,\n];\n// well-known enum types with specialized JSON representation\nconst wkEnums = [getEnumType(NullValue)];\n/**\n * Create a registry from a set of descriptors. The types returned by this\n * registry behave exactly like types from generated code.\n *\n * This function accepts google.protobuf.FileDescriptorSet in serialized or\n * deserialized form. Alternatively, it also accepts a DescriptorSet (see\n * createDescriptorSet()).\n *\n * By default, all well-known types with a specialized JSON representation\n * are replaced with their generated counterpart in this package.\n */\nexport function createRegistryFromDescriptors(input, replaceWkt = true) {\n    const set = input instanceof Uint8Array || isMessage(input, FileDescriptorSet)\n        ? createDescriptorSet(input)\n        : input;\n    const enums = new Map();\n    const messages = new Map();\n    const extensions = new Map();\n    const extensionsByExtendee = new Map();\n    const services = {};\n    if (replaceWkt) {\n        for (const mt of wkMessages) {\n            messages.set(mt.typeName, mt);\n        }\n        for (const et of wkEnums) {\n            enums.set(et.typeName, et);\n        }\n    }\n    return {\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findEnum(typeName) {\n            const existing = enums.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.enums.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const type = runtime.makeEnumType(typeName, desc.values.map((u) => ({\n                no: u.number,\n                name: u.name,\n                localName: localName(u),\n            })), {});\n            enums.set(typeName, type);\n            return type;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findMessage(typeName) {\n            const existing = messages.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.messages.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const fields = [];\n            const type = runtime.makeMessageType(typeName, () => fields, {\n                localName: localName(desc),\n            });\n            messages.set(typeName, type);\n            for (const field of desc.fields) {\n                fields.push(makeFieldInfo(field, this));\n            }\n            return type;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findService(typeName) {\n            const existing = services[typeName];\n            if (existing) {\n                return existing;\n            }\n            const desc = set.services.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const methods = {};\n            for (const method of desc.methods) {\n                const I = resolve(method.input, this, method);\n                const O = resolve(method.output, this, method);\n                methods[localName(method)] = {\n                    name: method.name,\n                    I,\n                    O,\n                    kind: method.methodKind,\n                    idempotency: method.idempotency,\n                    // We do not surface options at this time\n                    // options: {},\n                };\n            }\n            return (services[typeName] = {\n                typeName: desc.typeName,\n                methods,\n            });\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findExtensionFor(typeName, no) {\n            var _a;\n            if (!set.messages.has(typeName)) {\n                return undefined;\n            }\n            let extensionsByNo = extensionsByExtendee.get(typeName);\n            if (!extensionsByNo) {\n                // maintain a lookup for extension desc by number\n                extensionsByNo = new Map();\n                extensionsByExtendee.set(typeName, extensionsByNo);\n                for (const desc of set.extensions.values()) {\n                    if (desc.extendee.typeName == typeName) {\n                        extensionsByNo.set(desc.number, desc);\n                    }\n                }\n            }\n            const desc = (_a = extensionsByExtendee.get(typeName)) === null || _a === void 0 ? void 0 : _a.get(no);\n            return desc ? this.findExtension(desc.typeName) : undefined;\n        },\n        /**\n         * May raise an error on invalid descriptors.\n         */\n        findExtension(typeName) {\n            const existing = extensions.get(typeName);\n            if (existing) {\n                return existing;\n            }\n            const desc = set.extensions.get(typeName);\n            if (!desc) {\n                return undefined;\n            }\n            const extendee = resolve(desc.extendee, this, desc);\n            const runtime = desc.file.syntax == \"proto3\" ? proto3 : proto2;\n            const ext = runtime.makeExtension(typeName, extendee, makeFieldInfo(desc, this));\n            extensions.set(typeName, ext);\n            return ext;\n        },\n    };\n}\nfunction makeFieldInfo(desc, registry) {\n    var _a;\n    const f = {\n        kind: desc.fieldKind,\n        no: desc.number,\n        name: desc.name,\n        jsonName: desc.jsonName,\n        delimited: desc.proto.type == FieldDescriptorProto_Type.GROUP,\n        repeated: desc.repeated,\n        packed: desc.packed,\n        oneof: (_a = desc.oneof) === null || _a === void 0 ? void 0 : _a.name,\n        opt: desc.optional,\n        req: desc.proto.label === FieldDescriptorProto_Label.REQUIRED,\n    };\n    switch (desc.fieldKind) {\n        case \"map\": {\n            assert(desc.kind == \"field\"); // maps are not allowed for extensions\n            let T;\n            switch (desc.mapValue.kind) {\n                case \"scalar\":\n                    T = desc.mapValue.scalar;\n                    break;\n                case \"enum\": {\n                    T = resolve(desc.mapValue.enum, registry, desc);\n                    break;\n                }\n                case \"message\": {\n                    T = resolve(desc.mapValue.message, registry, desc);\n                    break;\n                }\n            }\n            f.K = desc.mapKey;\n            f.V = {\n                kind: desc.mapValue.kind,\n                T,\n            };\n            break;\n        }\n        case \"message\": {\n            f.T = resolve(desc.message, registry, desc);\n            break;\n        }\n        case \"enum\": {\n            f.T = resolve(desc.enum, registry, desc);\n            f.default = desc.getDefaultValue();\n            break;\n        }\n        case \"scalar\": {\n            f.L = desc.longType;\n            f.T = desc.scalar;\n            f.default = desc.getDefaultValue();\n            break;\n        }\n    }\n    return f;\n}\nfunction resolve(desc, registry, context) {\n    const type = desc.kind == \"message\"\n        ? registry.findMessage(desc.typeName)\n        : registry.findEnum(desc.typeName);\n    assert(type, `${desc.toString()}\" for ${context.toString()} not found`);\n    return type;\n}\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../../message.js\";\nimport { proto2 } from \"../../../proto2.js\";\nimport { FileDescriptorProto, GeneratedCodeInfo } from \"../descriptor_pb.js\";\n/**\n * The version number of protocol compiler.\n *\n * @generated from message google.protobuf.compiler.Version\n */\nexport class Version extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Version().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Version().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Version().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(Version, a, b);\n    }\n}\nVersion.runtime = proto2;\nVersion.typeName = \"google.protobuf.compiler.Version\";\nVersion.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"major\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 2, name: \"minor\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 3, name: \"patch\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"suffix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n]);\n/**\n * An encoded CodeGeneratorRequest is written to the plugin's stdin.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorRequest\n */\nexport class CodeGeneratorRequest extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The .proto files that were explicitly listed on the command-line.  The\n         * code generator should generate code only for these files.  Each file's\n         * descriptor will be included in proto_file, below.\n         *\n         * @generated from field: repeated string file_to_generate = 1;\n         */\n        this.fileToGenerate = [];\n        /**\n         * FileDescriptorProtos for all files in files_to_generate and everything\n         * they import.  The files will appear in topological order, so each file\n         * appears before any file that imports it.\n         *\n         * Note: the files listed in files_to_generate will include runtime-retention\n         * options only, but all other files will include source-retention options.\n         * The source_file_descriptors field below is available in case you need\n         * source-retention options for files_to_generate.\n         *\n         * protoc guarantees that all proto_files will be written after\n         * the fields above, even though this is not technically guaranteed by the\n         * protobuf wire format.  This theoretically could allow a plugin to stream\n         * in the FileDescriptorProtos and handle them one by one rather than read\n         * the entire set into memory at once.  However, as of this writing, this\n         * is not similarly optimized on protoc's end -- it will store all fields in\n         * memory at once before sending them to the plugin.\n         *\n         * Type names of fields and extensions in the FileDescriptorProto are always\n         * fully qualified.\n         *\n         * @generated from field: repeated google.protobuf.FileDescriptorProto proto_file = 15;\n         */\n        this.protoFile = [];\n        /**\n         * File descriptors with all options, including source-retention options.\n         * These descriptors are only provided for the files listed in\n         * files_to_generate.\n         *\n         * @generated from field: repeated google.protobuf.FileDescriptorProto source_file_descriptors = 17;\n         */\n        this.sourceFileDescriptors = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorRequest().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorRequest().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorRequest().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorRequest, a, b);\n    }\n}\nCodeGeneratorRequest.runtime = proto2;\nCodeGeneratorRequest.typeName = \"google.protobuf.compiler.CodeGeneratorRequest\";\nCodeGeneratorRequest.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"file_to_generate\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 2, name: \"parameter\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 15, name: \"proto_file\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n    { no: 17, name: \"source_file_descriptors\", kind: \"message\", T: FileDescriptorProto, repeated: true },\n    { no: 3, name: \"compiler_version\", kind: \"message\", T: Version, opt: true },\n]);\n/**\n * The plugin writes an encoded CodeGeneratorResponse to stdout.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorResponse\n */\nexport class CodeGeneratorResponse extends Message {\n    constructor(data) {\n        super();\n        /**\n         * @generated from field: repeated google.protobuf.compiler.CodeGeneratorResponse.File file = 15;\n         */\n        this.file = [];\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorResponse().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorResponse().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorResponse().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorResponse, a, b);\n    }\n}\nCodeGeneratorResponse.runtime = proto2;\nCodeGeneratorResponse.typeName = \"google.protobuf.compiler.CodeGeneratorResponse\";\nCodeGeneratorResponse.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"error\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"supported_features\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, opt: true },\n    { no: 3, name: \"minimum_edition\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 4, name: \"maximum_edition\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */, opt: true },\n    { no: 15, name: \"file\", kind: \"message\", T: CodeGeneratorResponse_File, repeated: true },\n]);\n/**\n * Sync with code_generator.h.\n *\n * @generated from enum google.protobuf.compiler.CodeGeneratorResponse.Feature\n */\nexport var CodeGeneratorResponse_Feature;\n(function (CodeGeneratorResponse_Feature) {\n    /**\n     * @generated from enum value: FEATURE_NONE = 0;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * @generated from enum value: FEATURE_PROTO3_OPTIONAL = 1;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"PROTO3_OPTIONAL\"] = 1] = \"PROTO3_OPTIONAL\";\n    /**\n     * @generated from enum value: FEATURE_SUPPORTS_EDITIONS = 2;\n     */\n    CodeGeneratorResponse_Feature[CodeGeneratorResponse_Feature[\"SUPPORTS_EDITIONS\"] = 2] = \"SUPPORTS_EDITIONS\";\n})(CodeGeneratorResponse_Feature || (CodeGeneratorResponse_Feature = {}));\n// Retrieve enum metadata with: proto2.getEnumType(CodeGeneratorResponse_Feature)\nproto2.util.setEnumType(CodeGeneratorResponse_Feature, \"google.protobuf.compiler.CodeGeneratorResponse.Feature\", [\n    { no: 0, name: \"FEATURE_NONE\" },\n    { no: 1, name: \"FEATURE_PROTO3_OPTIONAL\" },\n    { no: 2, name: \"FEATURE_SUPPORTS_EDITIONS\" },\n]);\n/**\n * Represents a single generated file.\n *\n * @generated from message google.protobuf.compiler.CodeGeneratorResponse.File\n */\nexport class CodeGeneratorResponse_File extends Message {\n    constructor(data) {\n        super();\n        proto2.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new CodeGeneratorResponse_File().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new CodeGeneratorResponse_File().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new CodeGeneratorResponse_File().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto2.util.equals(CodeGeneratorResponse_File, a, b);\n    }\n}\nCodeGeneratorResponse_File.runtime = proto2;\nCodeGeneratorResponse_File.typeName = \"google.protobuf.compiler.CodeGeneratorResponse.File\";\nCodeGeneratorResponse_File.fields = proto2.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 2, name: \"insertion_point\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 15, name: \"content\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, opt: true },\n    { no: 16, name: \"generated_code_info\", kind: \"message\", T: GeneratedCodeInfo, opt: true },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * `SourceContext` represents information about the source of a\n * protobuf element, like the file in which it is defined.\n *\n * @generated from message google.protobuf.SourceContext\n */\nexport class SourceContext extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The path-qualified name of the .proto file that contained the associated\n         * protobuf element.  For example: `\"google/protobuf/source_context.proto\"`.\n         *\n         * @generated from field: string file_name = 1;\n         */\n        this.fileName = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new SourceContext().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new SourceContext().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new SourceContext().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(SourceContext, a, b);\n    }\n}\nSourceContext.runtime = proto3;\nSourceContext.typeName = \"google.protobuf.SourceContext\";\nSourceContext.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"file_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// @generated by protoc-gen-es v1.9.0 with parameter \"bootstrap_wkt=true,ts_nocheck=false,target=ts\"\n// @generated from file google/protobuf/type.proto (package google.protobuf, syntax proto3)\n/* eslint-disable */\nimport { proto3 } from \"../../proto3.js\";\nimport { Message } from \"../../message.js\";\nimport { SourceContext } from \"./source_context_pb.js\";\nimport { Any } from \"./any_pb.js\";\n/**\n * The syntax in which a protocol buffer element is defined.\n *\n * @generated from enum google.protobuf.Syntax\n */\nexport var Syntax;\n(function (Syntax) {\n    /**\n     * Syntax `proto2`.\n     *\n     * @generated from enum value: SYNTAX_PROTO2 = 0;\n     */\n    Syntax[Syntax[\"PROTO2\"] = 0] = \"PROTO2\";\n    /**\n     * Syntax `proto3`.\n     *\n     * @generated from enum value: SYNTAX_PROTO3 = 1;\n     */\n    Syntax[Syntax[\"PROTO3\"] = 1] = \"PROTO3\";\n    /**\n     * Syntax `editions`.\n     *\n     * @generated from enum value: SYNTAX_EDITIONS = 2;\n     */\n    Syntax[Syntax[\"EDITIONS\"] = 2] = \"EDITIONS\";\n})(Syntax || (Syntax = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Syntax)\nproto3.util.setEnumType(Syntax, \"google.protobuf.Syntax\", [\n    { no: 0, name: \"SYNTAX_PROTO2\" },\n    { no: 1, name: \"SYNTAX_PROTO3\" },\n    { no: 2, name: \"SYNTAX_EDITIONS\" },\n]);\n/**\n * A protocol buffer message type.\n *\n * @generated from message google.protobuf.Type\n */\nexport class Type extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified message name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * The list of fields.\n         *\n         * @generated from field: repeated google.protobuf.Field fields = 2;\n         */\n        this.fields = [];\n        /**\n         * The list of types appearing in `oneof` definitions in this type.\n         *\n         * @generated from field: repeated string oneofs = 3;\n         */\n        this.oneofs = [];\n        /**\n         * The protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 4;\n         */\n        this.options = [];\n        /**\n         * The source syntax.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 6;\n         */\n        this.syntax = Syntax.PROTO2;\n        /**\n         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.\n         *\n         * @generated from field: string edition = 7;\n         */\n        this.edition = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Type().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Type().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Type().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Type, a, b);\n    }\n}\nType.runtime = proto3;\nType.typeName = \"google.protobuf.Type\";\nType.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"fields\", kind: \"message\", T: Field, repeated: true },\n    { no: 3, name: \"oneofs\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 4, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 5, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 6, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n    { no: 7, name: \"edition\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * A single field of a message type.\n *\n * @generated from message google.protobuf.Field\n */\nexport class Field extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The field type.\n         *\n         * @generated from field: google.protobuf.Field.Kind kind = 1;\n         */\n        this.kind = Field_Kind.TYPE_UNKNOWN;\n        /**\n         * The field cardinality.\n         *\n         * @generated from field: google.protobuf.Field.Cardinality cardinality = 2;\n         */\n        this.cardinality = Field_Cardinality.UNKNOWN;\n        /**\n         * The field number.\n         *\n         * @generated from field: int32 number = 3;\n         */\n        this.number = 0;\n        /**\n         * The field name.\n         *\n         * @generated from field: string name = 4;\n         */\n        this.name = \"\";\n        /**\n         * The field type URL, without the scheme, for message or enumeration\n         * types. Example: `\"type.googleapis.com/google.protobuf.Timestamp\"`.\n         *\n         * @generated from field: string type_url = 6;\n         */\n        this.typeUrl = \"\";\n        /**\n         * The index of the field type in `Type.oneofs`, for message or enumeration\n         * types. The first type has index 1; zero means the type is not in the list.\n         *\n         * @generated from field: int32 oneof_index = 7;\n         */\n        this.oneofIndex = 0;\n        /**\n         * Whether to use alternative packed wire representation.\n         *\n         * @generated from field: bool packed = 8;\n         */\n        this.packed = false;\n        /**\n         * The protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 9;\n         */\n        this.options = [];\n        /**\n         * The field JSON name.\n         *\n         * @generated from field: string json_name = 10;\n         */\n        this.jsonName = \"\";\n        /**\n         * The string value of the default value of this field. Proto2 syntax only.\n         *\n         * @generated from field: string default_value = 11;\n         */\n        this.defaultValue = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Field().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Field().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Field().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Field, a, b);\n    }\n}\nField.runtime = proto3;\nField.typeName = \"google.protobuf.Field\";\nField.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"kind\", kind: \"enum\", T: proto3.getEnumType(Field_Kind) },\n    { no: 2, name: \"cardinality\", kind: \"enum\", T: proto3.getEnumType(Field_Cardinality) },\n    { no: 3, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 4, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 6, name: \"type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"oneof_index\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 8, name: \"packed\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 9, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 10, name: \"json_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 11, name: \"default_value\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * Basic field types.\n *\n * @generated from enum google.protobuf.Field.Kind\n */\nexport var Field_Kind;\n(function (Field_Kind) {\n    /**\n     * Field type unknown.\n     *\n     * @generated from enum value: TYPE_UNKNOWN = 0;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UNKNOWN\"] = 0] = \"TYPE_UNKNOWN\";\n    /**\n     * Field type double.\n     *\n     * @generated from enum value: TYPE_DOUBLE = 1;\n     */\n    Field_Kind[Field_Kind[\"TYPE_DOUBLE\"] = 1] = \"TYPE_DOUBLE\";\n    /**\n     * Field type float.\n     *\n     * @generated from enum value: TYPE_FLOAT = 2;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FLOAT\"] = 2] = \"TYPE_FLOAT\";\n    /**\n     * Field type int64.\n     *\n     * @generated from enum value: TYPE_INT64 = 3;\n     */\n    Field_Kind[Field_Kind[\"TYPE_INT64\"] = 3] = \"TYPE_INT64\";\n    /**\n     * Field type uint64.\n     *\n     * @generated from enum value: TYPE_UINT64 = 4;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UINT64\"] = 4] = \"TYPE_UINT64\";\n    /**\n     * Field type int32.\n     *\n     * @generated from enum value: TYPE_INT32 = 5;\n     */\n    Field_Kind[Field_Kind[\"TYPE_INT32\"] = 5] = \"TYPE_INT32\";\n    /**\n     * Field type fixed64.\n     *\n     * @generated from enum value: TYPE_FIXED64 = 6;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FIXED64\"] = 6] = \"TYPE_FIXED64\";\n    /**\n     * Field type fixed32.\n     *\n     * @generated from enum value: TYPE_FIXED32 = 7;\n     */\n    Field_Kind[Field_Kind[\"TYPE_FIXED32\"] = 7] = \"TYPE_FIXED32\";\n    /**\n     * Field type bool.\n     *\n     * @generated from enum value: TYPE_BOOL = 8;\n     */\n    Field_Kind[Field_Kind[\"TYPE_BOOL\"] = 8] = \"TYPE_BOOL\";\n    /**\n     * Field type string.\n     *\n     * @generated from enum value: TYPE_STRING = 9;\n     */\n    Field_Kind[Field_Kind[\"TYPE_STRING\"] = 9] = \"TYPE_STRING\";\n    /**\n     * Field type group. Proto2 syntax only, and deprecated.\n     *\n     * @generated from enum value: TYPE_GROUP = 10;\n     */\n    Field_Kind[Field_Kind[\"TYPE_GROUP\"] = 10] = \"TYPE_GROUP\";\n    /**\n     * Field type message.\n     *\n     * @generated from enum value: TYPE_MESSAGE = 11;\n     */\n    Field_Kind[Field_Kind[\"TYPE_MESSAGE\"] = 11] = \"TYPE_MESSAGE\";\n    /**\n     * Field type bytes.\n     *\n     * @generated from enum value: TYPE_BYTES = 12;\n     */\n    Field_Kind[Field_Kind[\"TYPE_BYTES\"] = 12] = \"TYPE_BYTES\";\n    /**\n     * Field type uint32.\n     *\n     * @generated from enum value: TYPE_UINT32 = 13;\n     */\n    Field_Kind[Field_Kind[\"TYPE_UINT32\"] = 13] = \"TYPE_UINT32\";\n    /**\n     * Field type enum.\n     *\n     * @generated from enum value: TYPE_ENUM = 14;\n     */\n    Field_Kind[Field_Kind[\"TYPE_ENUM\"] = 14] = \"TYPE_ENUM\";\n    /**\n     * Field type sfixed32.\n     *\n     * @generated from enum value: TYPE_SFIXED32 = 15;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SFIXED32\"] = 15] = \"TYPE_SFIXED32\";\n    /**\n     * Field type sfixed64.\n     *\n     * @generated from enum value: TYPE_SFIXED64 = 16;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SFIXED64\"] = 16] = \"TYPE_SFIXED64\";\n    /**\n     * Field type sint32.\n     *\n     * @generated from enum value: TYPE_SINT32 = 17;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SINT32\"] = 17] = \"TYPE_SINT32\";\n    /**\n     * Field type sint64.\n     *\n     * @generated from enum value: TYPE_SINT64 = 18;\n     */\n    Field_Kind[Field_Kind[\"TYPE_SINT64\"] = 18] = \"TYPE_SINT64\";\n})(Field_Kind || (Field_Kind = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Field_Kind)\nproto3.util.setEnumType(Field_Kind, \"google.protobuf.Field.Kind\", [\n    { no: 0, name: \"TYPE_UNKNOWN\" },\n    { no: 1, name: \"TYPE_DOUBLE\" },\n    { no: 2, name: \"TYPE_FLOAT\" },\n    { no: 3, name: \"TYPE_INT64\" },\n    { no: 4, name: \"TYPE_UINT64\" },\n    { no: 5, name: \"TYPE_INT32\" },\n    { no: 6, name: \"TYPE_FIXED64\" },\n    { no: 7, name: \"TYPE_FIXED32\" },\n    { no: 8, name: \"TYPE_BOOL\" },\n    { no: 9, name: \"TYPE_STRING\" },\n    { no: 10, name: \"TYPE_GROUP\" },\n    { no: 11, name: \"TYPE_MESSAGE\" },\n    { no: 12, name: \"TYPE_BYTES\" },\n    { no: 13, name: \"TYPE_UINT32\" },\n    { no: 14, name: \"TYPE_ENUM\" },\n    { no: 15, name: \"TYPE_SFIXED32\" },\n    { no: 16, name: \"TYPE_SFIXED64\" },\n    { no: 17, name: \"TYPE_SINT32\" },\n    { no: 18, name: \"TYPE_SINT64\" },\n]);\n/**\n * Whether a field is optional, required, or repeated.\n *\n * @generated from enum google.protobuf.Field.Cardinality\n */\nexport var Field_Cardinality;\n(function (Field_Cardinality) {\n    /**\n     * For fields with unknown cardinality.\n     *\n     * @generated from enum value: CARDINALITY_UNKNOWN = 0;\n     */\n    Field_Cardinality[Field_Cardinality[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    /**\n     * For optional fields.\n     *\n     * @generated from enum value: CARDINALITY_OPTIONAL = 1;\n     */\n    Field_Cardinality[Field_Cardinality[\"OPTIONAL\"] = 1] = \"OPTIONAL\";\n    /**\n     * For required fields. Proto2 syntax only.\n     *\n     * @generated from enum value: CARDINALITY_REQUIRED = 2;\n     */\n    Field_Cardinality[Field_Cardinality[\"REQUIRED\"] = 2] = \"REQUIRED\";\n    /**\n     * For repeated fields.\n     *\n     * @generated from enum value: CARDINALITY_REPEATED = 3;\n     */\n    Field_Cardinality[Field_Cardinality[\"REPEATED\"] = 3] = \"REPEATED\";\n})(Field_Cardinality || (Field_Cardinality = {}));\n// Retrieve enum metadata with: proto3.getEnumType(Field_Cardinality)\nproto3.util.setEnumType(Field_Cardinality, \"google.protobuf.Field.Cardinality\", [\n    { no: 0, name: \"CARDINALITY_UNKNOWN\" },\n    { no: 1, name: \"CARDINALITY_OPTIONAL\" },\n    { no: 2, name: \"CARDINALITY_REQUIRED\" },\n    { no: 3, name: \"CARDINALITY_REPEATED\" },\n]);\n/**\n * Enum type definition.\n *\n * @generated from message google.protobuf.Enum\n */\nexport class Enum extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Enum type name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * Enum value definitions.\n         *\n         * @generated from field: repeated google.protobuf.EnumValue enumvalue = 2;\n         */\n        this.enumvalue = [];\n        /**\n         * Protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        /**\n         * The source syntax.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 5;\n         */\n        this.syntax = Syntax.PROTO2;\n        /**\n         * The source edition string, only valid when syntax is SYNTAX_EDITIONS.\n         *\n         * @generated from field: string edition = 6;\n         */\n        this.edition = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Enum().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Enum().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Enum().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Enum, a, b);\n    }\n}\nEnum.runtime = proto3;\nEnum.typeName = \"google.protobuf.Enum\";\nEnum.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"enumvalue\", kind: \"message\", T: EnumValue, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 4, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 5, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n    { no: 6, name: \"edition\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n/**\n * Enum value definition.\n *\n * @generated from message google.protobuf.EnumValue\n */\nexport class EnumValue extends Message {\n    constructor(data) {\n        super();\n        /**\n         * Enum value name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * Enum value number.\n         *\n         * @generated from field: int32 number = 2;\n         */\n        this.number = 0;\n        /**\n         * Protocol buffer options.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new EnumValue().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new EnumValue().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new EnumValue().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(EnumValue, a, b);\n    }\n}\nEnumValue.runtime = proto3;\nEnumValue.typeName = \"google.protobuf.EnumValue\";\nEnumValue.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"number\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n]);\n/**\n * A protocol buffer option, which can be attached to a message, field,\n * enumeration, etc.\n *\n * @generated from message google.protobuf.Option\n */\nexport class Option extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The option's name. For protobuf built-in options (options defined in\n         * descriptor.proto), this is the short name. For example, `\"map_entry\"`.\n         * For custom options, it should be the fully-qualified name. For example,\n         * `\"google.api.http\"`.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Option().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Option().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Option().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Option, a, b);\n    }\n}\nOption.runtime = proto3;\nOption.typeName = \"google.protobuf.Option\";\nOption.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"value\", kind: \"message\", T: Any },\n]);\n", "// Copyright 2021-2024 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"../../message.js\";\nimport { Option, Syntax } from \"./type_pb.js\";\nimport { SourceContext } from \"./source_context_pb.js\";\nimport { proto3 } from \"../../proto3.js\";\n/**\n * Api is a light-weight descriptor for an API Interface.\n *\n * Interfaces are also described as \"protocol buffer services\" in some contexts,\n * such as by the \"service\" keyword in a .proto file, but they are different\n * from API Services, which represent a concrete implementation of an interface\n * as opposed to simply a description of methods and bindings. They are also\n * sometimes simply referred to as \"APIs\" in other contexts, such as the name of\n * this message itself. See https://cloud.google.com/apis/design/glossary for\n * detailed terminology.\n *\n * @generated from message google.protobuf.Api\n */\nexport class Api extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified name of this interface, including package name\n         * followed by the interface's simple name.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * The methods of this interface, in unspecified order.\n         *\n         * @generated from field: repeated google.protobuf.Method methods = 2;\n         */\n        this.methods = [];\n        /**\n         * Any metadata attached to the interface.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 3;\n         */\n        this.options = [];\n        /**\n         * A version string for this interface. If specified, must have the form\n         * `major-version.minor-version`, as in `1.10`. If the minor version is\n         * omitted, it defaults to zero. If the entire version field is empty, the\n         * major version is derived from the package name, as outlined below. If the\n         * field is not empty, the version in the package name will be verified to be\n         * consistent with what is provided here.\n         *\n         * The versioning schema uses [semantic\n         * versioning](http://semver.org) where the major version number\n         * indicates a breaking change and the minor version an additive,\n         * non-breaking change. Both version numbers are signals to users\n         * what to expect from different versions, and should be carefully\n         * chosen based on the product plan.\n         *\n         * The major version is also reflected in the package name of the\n         * interface, which must end in `v<major-version>`, as in\n         * `google.feature.v1`. For major versions 0 and 1, the suffix can\n         * be omitted. Zero major versions must only be used for\n         * experimental, non-GA interfaces.\n         *\n         *\n         * @generated from field: string version = 4;\n         */\n        this.version = \"\";\n        /**\n         * Included interfaces. See [Mixin][].\n         *\n         * @generated from field: repeated google.protobuf.Mixin mixins = 6;\n         */\n        this.mixins = [];\n        /**\n         * The source syntax of the service.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 7;\n         */\n        this.syntax = Syntax.PROTO2;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Api().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Api().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Api().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Api, a, b);\n    }\n}\nApi.runtime = proto3;\nApi.typeName = \"google.protobuf.Api\";\nApi.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"methods\", kind: \"message\", T: Method, repeated: true },\n    { no: 3, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 4, name: \"version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"source_context\", kind: \"message\", T: SourceContext },\n    { no: 6, name: \"mixins\", kind: \"message\", T: Mixin, repeated: true },\n    { no: 7, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n]);\n/**\n * Method represents a method of an API interface.\n *\n * @generated from message google.protobuf.Method\n */\nexport class Method extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The simple name of this method.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * A URL of the input message type.\n         *\n         * @generated from field: string request_type_url = 2;\n         */\n        this.requestTypeUrl = \"\";\n        /**\n         * If true, the request is streamed.\n         *\n         * @generated from field: bool request_streaming = 3;\n         */\n        this.requestStreaming = false;\n        /**\n         * The URL of the output message type.\n         *\n         * @generated from field: string response_type_url = 4;\n         */\n        this.responseTypeUrl = \"\";\n        /**\n         * If true, the response is streamed.\n         *\n         * @generated from field: bool response_streaming = 5;\n         */\n        this.responseStreaming = false;\n        /**\n         * Any metadata attached to the method.\n         *\n         * @generated from field: repeated google.protobuf.Option options = 6;\n         */\n        this.options = [];\n        /**\n         * The source syntax of this method.\n         *\n         * @generated from field: google.protobuf.Syntax syntax = 7;\n         */\n        this.syntax = Syntax.PROTO2;\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Method().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Method().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Method().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Method, a, b);\n    }\n}\nMethod.runtime = proto3;\nMethod.typeName = \"google.protobuf.Method\";\nMethod.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"request_type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"request_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 4, name: \"response_type_url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"response_streaming\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n    { no: 6, name: \"options\", kind: \"message\", T: Option, repeated: true },\n    { no: 7, name: \"syntax\", kind: \"enum\", T: proto3.getEnumType(Syntax) },\n]);\n/**\n * Declares an API Interface to be included in this interface. The including\n * interface must redeclare all the methods from the included interface, but\n * documentation and options are inherited as follows:\n *\n * - If after comment and whitespace stripping, the documentation\n *   string of the redeclared method is empty, it will be inherited\n *   from the original method.\n *\n * - Each annotation belonging to the service config (http,\n *   visibility) which is not set in the redeclared method will be\n *   inherited.\n *\n * - If an http annotation is inherited, the path pattern will be\n *   modified as follows. Any version prefix will be replaced by the\n *   version of the including interface plus the [root][] path if\n *   specified.\n *\n * Example of a simple mixin:\n *\n *     package google.acl.v1;\n *     service AccessControl {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v1/{resource=**}:getAcl\";\n *       }\n *     }\n *\n *     package google.storage.v2;\n *     service Storage {\n *       rpc GetAcl(GetAclRequest) returns (Acl);\n *\n *       // Get a data record.\n *       rpc GetData(GetDataRequest) returns (Data) {\n *         option (google.api.http).get = \"/v2/{resource=**}\";\n *       }\n *     }\n *\n * Example of a mixin configuration:\n *\n *     apis:\n *     - name: google.storage.v2.Storage\n *       mixins:\n *       - name: google.acl.v1.AccessControl\n *\n * The mixin construct implies that all methods in `AccessControl` are\n * also declared with same name and request/response types in\n * `Storage`. A documentation generator or annotation processor will\n * see the effective `Storage.GetAcl` method after inherting\n * documentation and annotations as follows:\n *\n *     service Storage {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v2/{resource=**}:getAcl\";\n *       }\n *       ...\n *     }\n *\n * Note how the version in the path pattern changed from `v1` to `v2`.\n *\n * If the `root` field in the mixin is specified, it should be a\n * relative path under which inherited HTTP paths are placed. Example:\n *\n *     apis:\n *     - name: google.storage.v2.Storage\n *       mixins:\n *       - name: google.acl.v1.AccessControl\n *         root: acls\n *\n * This implies the following inherited HTTP annotation:\n *\n *     service Storage {\n *       // Get the underlying ACL object.\n *       rpc GetAcl(GetAclRequest) returns (Acl) {\n *         option (google.api.http).get = \"/v2/acls/{resource=**}:getAcl\";\n *       }\n *       ...\n *     }\n *\n * @generated from message google.protobuf.Mixin\n */\nexport class Mixin extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The fully qualified name of the interface which is included.\n         *\n         * @generated from field: string name = 1;\n         */\n        this.name = \"\";\n        /**\n         * If non-empty specifies a path under which inherited HTTP paths\n         * are rooted.\n         *\n         * @generated from field: string root = 2;\n         */\n        this.root = \"\";\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Mixin().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Mixin().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Mixin().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Mixin, a, b);\n    }\n}\nMixin.runtime = proto3;\nMixin.typeName = \"google.protobuf.Mixin\";\nMixin.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"root\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n]);\n", "// Copyright Exafunction, Inc.\n\n// @generated by protoc-gen-es v1.4.2 with parameter \"target=ts\"\n// @generated from file exa/codeium_common_pb/codeium_common.proto (package exa.codeium_common_pb, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from enum exa.codeium_common_pb.ExperimentKey\n */\nexport enum ExperimentKey {\n  /**\n   * @generated from enum value: UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: JUPYTER_FORMAT = 77;\n   */\n  JUPYTER_FORMAT = 77,\n}\n// Retrieve enum metadata with: proto3.getEnumType(ExperimentKey)\nproto3.util.setEnumType(ExperimentKey, \"exa.codeium_common_pb.ExperimentKey\", [\n  { no: 0, name: \"UNSPECIFIED\" },\n  { no: 77, name: \"JUPYTER_FORMAT\" },\n]);\n\n/**\n * Authentication source for users on the cloud service.\n *\n * @generated from enum exa.codeium_common_pb.AuthSource\n */\nexport enum AuthSource {\n  /**\n   * @generated from enum value: AUTH_SOURCE_CODEIUM = 0;\n   */\n  CODEIUM = 0,\n}\n// Retrieve enum metadata with: proto3.getEnumType(AuthSource)\nproto3.util.setEnumType(AuthSource, \"exa.codeium_common_pb.AuthSource\", [\n  { no: 0, name: \"AUTH_SOURCE_CODEIUM\" },\n]);\n\n/**\n * @generated from enum exa.codeium_common_pb.EventType\n */\nexport enum EventType {\n  /**\n   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: EVENT_TYPE_ENABLE_CODEIUM = 1;\n   */\n  ENABLE_CODEIUM = 1,\n\n  /**\n   * @generated from enum value: EVENT_TYPE_DISABLE_CODEIUM = 2;\n   */\n  DISABLE_CODEIUM = 2,\n\n  /**\n   * @generated from enum value: EVENT_TYPE_SHOW_PREVIOUS_COMPLETION = 3;\n   */\n  SHOW_PREVIOUS_COMPLETION = 3,\n\n  /**\n   * @generated from enum value: EVENT_TYPE_SHOW_NEXT_COMPLETION = 4;\n   */\n  SHOW_NEXT_COMPLETION = 4,\n}\n// Retrieve enum metadata with: proto3.getEnumType(EventType)\nproto3.util.setEnumType(EventType, \"exa.codeium_common_pb.EventType\", [\n  { no: 0, name: \"EVENT_TYPE_UNSPECIFIED\" },\n  { no: 1, name: \"EVENT_TYPE_ENABLE_CODEIUM\" },\n  { no: 2, name: \"EVENT_TYPE_DISABLE_CODEIUM\" },\n  { no: 3, name: \"EVENT_TYPE_SHOW_PREVIOUS_COMPLETION\" },\n  { no: 4, name: \"EVENT_TYPE_SHOW_NEXT_COMPLETION\" },\n]);\n\n/**\n * @generated from enum exa.codeium_common_pb.CompletionSource\n */\nexport enum CompletionSource {\n  /**\n   * @generated from enum value: COMPLETION_SOURCE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: COMPLETION_SOURCE_TYPING_AS_SUGGESTED = 1;\n   */\n  TYPING_AS_SUGGESTED = 1,\n\n  /**\n   * @generated from enum value: COMPLETION_SOURCE_CACHE = 2;\n   */\n  CACHE = 2,\n\n  /**\n   * @generated from enum value: COMPLETION_SOURCE_NETWORK = 3;\n   */\n  NETWORK = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(CompletionSource)\nproto3.util.setEnumType(CompletionSource, \"exa.codeium_common_pb.CompletionSource\", [\n  { no: 0, name: \"COMPLETION_SOURCE_UNSPECIFIED\" },\n  { no: 1, name: \"COMPLETION_SOURCE_TYPING_AS_SUGGESTED\" },\n  { no: 2, name: \"COMPLETION_SOURCE_CACHE\" },\n  { no: 3, name: \"COMPLETION_SOURCE_NETWORK\" },\n]);\n\n/**\n * Every time this list is updated, we should be redeploying the API server\n * since it uses the string representation for BQ.\n *\n * @generated from enum exa.codeium_common_pb.Language\n */\nexport enum Language {\n  /**\n   * @generated from enum value: LANGUAGE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: LANGUAGE_C = 1;\n   */\n  C = 1,\n\n  /**\n   * @generated from enum value: LANGUAGE_CLOJURE = 2;\n   */\n  CLOJURE = 2,\n\n  /**\n   * @generated from enum value: LANGUAGE_COFFEESCRIPT = 3;\n   */\n  COFFEESCRIPT = 3,\n\n  /**\n   * @generated from enum value: LANGUAGE_CPP = 4;\n   */\n  CPP = 4,\n\n  /**\n   * @generated from enum value: LANGUAGE_CSHARP = 5;\n   */\n  CSHARP = 5,\n\n  /**\n   * @generated from enum value: LANGUAGE_CSS = 6;\n   */\n  CSS = 6,\n\n  /**\n   * @generated from enum value: LANGUAGE_CUDACPP = 7;\n   */\n  CUDACPP = 7,\n\n  /**\n   * @generated from enum value: LANGUAGE_DOCKERFILE = 8;\n   */\n  DOCKERFILE = 8,\n\n  /**\n   * @generated from enum value: LANGUAGE_GO = 9;\n   */\n  GO = 9,\n\n  /**\n   * @generated from enum value: LANGUAGE_GROOVY = 10;\n   */\n  GROOVY = 10,\n\n  /**\n   * @generated from enum value: LANGUAGE_HANDLEBARS = 11;\n   */\n  HANDLEBARS = 11,\n\n  /**\n   * @generated from enum value: LANGUAGE_HASKELL = 12;\n   */\n  HASKELL = 12,\n\n  /**\n   * @generated from enum value: LANGUAGE_HCL = 13;\n   */\n  HCL = 13,\n\n  /**\n   * @generated from enum value: LANGUAGE_HTML = 14;\n   */\n  HTML = 14,\n\n  /**\n   * @generated from enum value: LANGUAGE_INI = 15;\n   */\n  INI = 15,\n\n  /**\n   * @generated from enum value: LANGUAGE_JAVA = 16;\n   */\n  JAVA = 16,\n\n  /**\n   * @generated from enum value: LANGUAGE_JAVASCRIPT = 17;\n   */\n  JAVASCRIPT = 17,\n\n  /**\n   * @generated from enum value: LANGUAGE_JSON = 18;\n   */\n  JSON = 18,\n\n  /**\n   * @generated from enum value: LANGUAGE_JULIA = 19;\n   */\n  JULIA = 19,\n\n  /**\n   * @generated from enum value: LANGUAGE_KOTLIN = 20;\n   */\n  KOTLIN = 20,\n\n  /**\n   * @generated from enum value: LANGUAGE_LATEX = 21;\n   */\n  LATEX = 21,\n\n  /**\n   * @generated from enum value: LANGUAGE_LESS = 22;\n   */\n  LESS = 22,\n\n  /**\n   * @generated from enum value: LANGUAGE_LUA = 23;\n   */\n  LUA = 23,\n\n  /**\n   * @generated from enum value: LANGUAGE_MAKEFILE = 24;\n   */\n  MAKEFILE = 24,\n\n  /**\n   * @generated from enum value: LANGUAGE_MARKDOWN = 25;\n   */\n  MARKDOWN = 25,\n\n  /**\n   * @generated from enum value: LANGUAGE_OBJECTIVEC = 26;\n   */\n  OBJECTIVEC = 26,\n\n  /**\n   * @generated from enum value: LANGUAGE_OBJECTIVECPP = 27;\n   */\n  OBJECTIVECPP = 27,\n\n  /**\n   * @generated from enum value: LANGUAGE_PERL = 28;\n   */\n  PERL = 28,\n\n  /**\n   * @generated from enum value: LANGUAGE_PHP = 29;\n   */\n  PHP = 29,\n\n  /**\n   * @generated from enum value: LANGUAGE_PLAINTEXT = 30;\n   */\n  PLAINTEXT = 30,\n\n  /**\n   * @generated from enum value: LANGUAGE_PROTOBUF = 31;\n   */\n  PROTOBUF = 31,\n\n  /**\n   * @generated from enum value: LANGUAGE_PBTXT = 32;\n   */\n  PBTXT = 32,\n\n  /**\n   * @generated from enum value: LANGUAGE_PYTHON = 33;\n   */\n  PYTHON = 33,\n\n  /**\n   * @generated from enum value: LANGUAGE_R = 34;\n   */\n  R = 34,\n\n  /**\n   * @generated from enum value: LANGUAGE_RUBY = 35;\n   */\n  RUBY = 35,\n\n  /**\n   * @generated from enum value: LANGUAGE_RUST = 36;\n   */\n  RUST = 36,\n\n  /**\n   * @generated from enum value: LANGUAGE_SASS = 37;\n   */\n  SASS = 37,\n\n  /**\n   * @generated from enum value: LANGUAGE_SCALA = 38;\n   */\n  SCALA = 38,\n\n  /**\n   * @generated from enum value: LANGUAGE_SCSS = 39;\n   */\n  SCSS = 39,\n\n  /**\n   * @generated from enum value: LANGUAGE_SHELL = 40;\n   */\n  SHELL = 40,\n\n  /**\n   * @generated from enum value: LANGUAGE_SQL = 41;\n   */\n  SQL = 41,\n\n  /**\n   * @generated from enum value: LANGUAGE_STARLARK = 42;\n   */\n  STARLARK = 42,\n\n  /**\n   * @generated from enum value: LANGUAGE_SWIFT = 43;\n   */\n  SWIFT = 43,\n\n  /**\n   * @generated from enum value: LANGUAGE_TSX = 44;\n   */\n  TSX = 44,\n\n  /**\n   * @generated from enum value: LANGUAGE_TYPESCRIPT = 45;\n   */\n  TYPESCRIPT = 45,\n\n  /**\n   * @generated from enum value: LANGUAGE_VISUALBASIC = 46;\n   */\n  VISUALBASIC = 46,\n\n  /**\n   * @generated from enum value: LANGUAGE_VUE = 47;\n   */\n  VUE = 47,\n\n  /**\n   * @generated from enum value: LANGUAGE_XML = 48;\n   */\n  XML = 48,\n\n  /**\n   * @generated from enum value: LANGUAGE_XSL = 49;\n   */\n  XSL = 49,\n\n  /**\n   * @generated from enum value: LANGUAGE_YAML = 50;\n   */\n  YAML = 50,\n\n  /**\n   * @generated from enum value: LANGUAGE_SVELTE = 51;\n   */\n  SVELTE = 51,\n\n  /**\n   * @generated from enum value: LANGUAGE_TOML = 52;\n   */\n  TOML = 52,\n\n  /**\n   * @generated from enum value: LANGUAGE_DART = 53;\n   */\n  DART = 53,\n\n  /**\n   * @generated from enum value: LANGUAGE_RST = 54;\n   */\n  RST = 54,\n\n  /**\n   * @generated from enum value: LANGUAGE_OCAML = 55;\n   */\n  OCAML = 55,\n\n  /**\n   * @generated from enum value: LANGUAGE_CMAKE = 56;\n   */\n  CMAKE = 56,\n\n  /**\n   * @generated from enum value: LANGUAGE_PASCAL = 57;\n   */\n  PASCAL = 57,\n\n  /**\n   * @generated from enum value: LANGUAGE_ELIXIR = 58;\n   */\n  ELIXIR = 58,\n\n  /**\n   * @generated from enum value: LANGUAGE_FSHARP = 59;\n   */\n  FSHARP = 59,\n\n  /**\n   * @generated from enum value: LANGUAGE_LISP = 60;\n   */\n  LISP = 60,\n\n  /**\n   * @generated from enum value: LANGUAGE_MATLAB = 61;\n   */\n  MATLAB = 61,\n\n  /**\n   * @generated from enum value: LANGUAGE_POWERSHELL = 62;\n   */\n  POWERSHELL = 62,\n\n  /**\n   * @generated from enum value: LANGUAGE_SOLIDITY = 63;\n   */\n  SOLIDITY = 63,\n\n  /**\n   * @generated from enum value: LANGUAGE_ADA = 64;\n   */\n  ADA = 64,\n\n  /**\n   * @generated from enum value: LANGUAGE_OCAML_INTERFACE = 65;\n   */\n  OCAML_INTERFACE = 65,\n}\n// Retrieve enum metadata with: proto3.getEnumType(Language)\nproto3.util.setEnumType(Language, \"exa.codeium_common_pb.Language\", [\n  { no: 0, name: \"LANGUAGE_UNSPECIFIED\" },\n  { no: 1, name: \"LANGUAGE_C\" },\n  { no: 2, name: \"LANGUAGE_CLOJURE\" },\n  { no: 3, name: \"LANGUAGE_COFFEESCRIPT\" },\n  { no: 4, name: \"LANGUAGE_CPP\" },\n  { no: 5, name: \"LANGUAGE_CSHARP\" },\n  { no: 6, name: \"LANGUAGE_CSS\" },\n  { no: 7, name: \"LANGUAGE_CUDACPP\" },\n  { no: 8, name: \"LANGUAGE_DOCKERFILE\" },\n  { no: 9, name: \"LANGUAGE_GO\" },\n  { no: 10, name: \"LANGUAGE_GROOVY\" },\n  { no: 11, name: \"LANGUAGE_HANDLEBARS\" },\n  { no: 12, name: \"LANGUAGE_HASKELL\" },\n  { no: 13, name: \"LANGUAGE_HCL\" },\n  { no: 14, name: \"LANGUAGE_HTML\" },\n  { no: 15, name: \"LANGUAGE_INI\" },\n  { no: 16, name: \"LANGUAGE_JAVA\" },\n  { no: 17, name: \"LANGUAGE_JAVASCRIPT\" },\n  { no: 18, name: \"LANGUAGE_JSON\" },\n  { no: 19, name: \"LANGUAGE_JULIA\" },\n  { no: 20, name: \"LANGUAGE_KOTLIN\" },\n  { no: 21, name: \"LANGUAGE_LATEX\" },\n  { no: 22, name: \"LANGUAGE_LESS\" },\n  { no: 23, name: \"LANGUAGE_LUA\" },\n  { no: 24, name: \"LANGUAGE_MAKEFILE\" },\n  { no: 25, name: \"LANGUAGE_MARKDOWN\" },\n  { no: 26, name: \"LANGUAGE_OBJECTIVEC\" },\n  { no: 27, name: \"LANGUAGE_OBJECTIVECPP\" },\n  { no: 28, name: \"LANGUAGE_PERL\" },\n  { no: 29, name: \"LANGUAGE_PHP\" },\n  { no: 30, name: \"LANGUAGE_PLAINTEXT\" },\n  { no: 31, name: \"LANGUAGE_PROTOBUF\" },\n  { no: 32, name: \"LANGUAGE_PBTXT\" },\n  { no: 33, name: \"LANGUAGE_PYTHON\" },\n  { no: 34, name: \"LANGUAGE_R\" },\n  { no: 35, name: \"LANGUAGE_RUBY\" },\n  { no: 36, name: \"LANGUAGE_RUST\" },\n  { no: 37, name: \"LANGUAGE_SASS\" },\n  { no: 38, name: \"LANGUAGE_SCALA\" },\n  { no: 39, name: \"LANGUAGE_SCSS\" },\n  { no: 40, name: \"LANGUAGE_SHELL\" },\n  { no: 41, name: \"LANGUAGE_SQL\" },\n  { no: 42, name: \"LANGUAGE_STARLARK\" },\n  { no: 43, name: \"LANGUAGE_SWIFT\" },\n  { no: 44, name: \"LANGUAGE_TSX\" },\n  { no: 45, name: \"LANGUAGE_TYPESCRIPT\" },\n  { no: 46, name: \"LANGUAGE_VISUALBASIC\" },\n  { no: 47, name: \"LANGUAGE_VUE\" },\n  { no: 48, name: \"LANGUAGE_XML\" },\n  { no: 49, name: \"LANGUAGE_XSL\" },\n  { no: 50, name: \"LANGUAGE_YAML\" },\n  { no: 51, name: \"LANGUAGE_SVELTE\" },\n  { no: 52, name: \"LANGUAGE_TOML\" },\n  { no: 53, name: \"LANGUAGE_DART\" },\n  { no: 54, name: \"LANGUAGE_RST\" },\n  { no: 55, name: \"LANGUAGE_OCAML\" },\n  { no: 56, name: \"LANGUAGE_CMAKE\" },\n  { no: 57, name: \"LANGUAGE_PASCAL\" },\n  { no: 58, name: \"LANGUAGE_ELIXIR\" },\n  { no: 59, name: \"LANGUAGE_FSHARP\" },\n  { no: 60, name: \"LANGUAGE_LISP\" },\n  { no: 61, name: \"LANGUAGE_MATLAB\" },\n  { no: 62, name: \"LANGUAGE_POWERSHELL\" },\n  { no: 63, name: \"LANGUAGE_SOLIDITY\" },\n  { no: 64, name: \"LANGUAGE_ADA\" },\n  { no: 65, name: \"LANGUAGE_OCAML_INTERFACE\" },\n]);\n\n/**\n * Next ID: 12, Previous field: entropy.\n *\n * @generated from message exa.codeium_common_pb.Completion\n */\nexport class Completion extends Message<Completion> {\n  /**\n   * @generated from field: string completion_id = 1;\n   */\n  completionId = \"\";\n\n  /**\n   * @generated from field: string text = 2;\n   */\n  text = \"\";\n\n  /**\n   * @generated from field: string prefix = 3;\n   */\n  prefix = \"\";\n\n  /**\n   * @generated from field: string stop = 4;\n   */\n  stop = \"\";\n\n  /**\n   * @generated from field: double score = 5;\n   */\n  score = 0;\n\n  /**\n   * @generated from field: repeated uint64 tokens = 6;\n   */\n  tokens: bigint[] = [];\n\n  /**\n   * @generated from field: repeated string decoded_tokens = 7;\n   */\n  decodedTokens: string[] = [];\n\n  /**\n   * @generated from field: repeated double probabilities = 8;\n   */\n  probabilities: number[] = [];\n\n  /**\n   * @generated from field: repeated double adjusted_probabilities = 9;\n   */\n  adjustedProbabilities: number[] = [];\n\n  /**\n   * @generated from field: uint64 generated_length = 10;\n   */\n  generatedLength = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Completion>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.codeium_common_pb.Completion\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"completion_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"stop\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"score\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */ },\n    { no: 6, name: \"tokens\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */, repeated: true },\n    { no: 7, name: \"decoded_tokens\", kind: \"scalar\", T: 9 /* ScalarType.STRING */, repeated: true },\n    { no: 8, name: \"probabilities\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, repeated: true },\n    { no: 9, name: \"adjusted_probabilities\", kind: \"scalar\", T: 1 /* ScalarType.DOUBLE */, repeated: true },\n    { no: 10, name: \"generated_length\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Completion {\n    return new Completion().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Completion {\n    return new Completion().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Completion {\n    return new Completion().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Completion | PlainMessage<Completion> | undefined, b: Completion | PlainMessage<Completion> | undefined): boolean {\n    return proto3.util.equals(Completion, a, b);\n  }\n}\n\n/**\n * Next ID: 15, Previous field: url.\n *\n * @generated from message exa.codeium_common_pb.Metadata\n */\nexport class Metadata extends Message<Metadata> {\n  /**\n   * @generated from field: string ide_name = 1;\n   */\n  ideName = \"\";\n\n  /**\n   * @generated from field: string ide_version = 7;\n   */\n  ideVersion = \"\";\n\n  /**\n   * @generated from field: string extension_name = 12;\n   */\n  extensionName = \"\";\n\n  /**\n   * @generated from field: string extension_version = 2;\n   */\n  extensionVersion = \"\";\n\n  /**\n   * @generated from field: string api_key = 3;\n   */\n  apiKey = \"\";\n\n  /**\n   * Regex derived from https://stackoverflow.com/a/48300605.\n   * TODO(prem): Should this be mandatory?\n   *\n   * @generated from field: string locale = 4;\n   */\n  locale = \"\";\n\n  /**\n   * UID identifying a single session for the given user.\n   *\n   * @generated from field: string session_id = 10;\n   */\n  sessionId = \"\";\n\n  /**\n   * Used purely in language server to cancel in flight requests.\n   * If request_id is 0, then the request is not cancelable.\n   * This should be a strictly monotonically increasing number\n   * for the duration of a session.\n   *\n   * @generated from field: uint64 request_id = 9;\n   */\n  requestId = protoInt64.zero;\n\n  /**\n   * Browser-specific information.\n   *\n   * @generated from field: string user_agent = 13;\n   */\n  userAgent = \"\";\n\n  /**\n   * @generated from field: string url = 14;\n   */\n  url = \"\";\n\n  /**\n   * Authentication source information.\n   *\n   * @generated from field: exa.codeium_common_pb.AuthSource auth_source = 15;\n   */\n  authSource = AuthSource.CODEIUM;\n\n  constructor(data?: PartialMessage<Metadata>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.codeium_common_pb.Metadata\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"ide_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 7, name: \"ide_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 12, name: \"extension_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"extension_version\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"api_key\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"locale\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 10, name: \"session_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 9, name: \"request_id\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 13, name: \"user_agent\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 14, name: \"url\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 15, name: \"auth_source\", kind: \"enum\", T: proto3.getEnumType(AuthSource) },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metadata {\n    return new Metadata().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metadata {\n    return new Metadata().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metadata {\n    return new Metadata().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Metadata | PlainMessage<Metadata> | undefined, b: Metadata | PlainMessage<Metadata> | undefined): boolean {\n    return proto3.util.equals(Metadata, a, b);\n  }\n}\n\n/**\n * Next ID: 3, Previous field: insert_spaces.\n *\n * @generated from message exa.codeium_common_pb.EditorOptions\n */\nexport class EditorOptions extends Message<EditorOptions> {\n  /**\n   * @generated from field: uint64 tab_size = 1;\n   */\n  tabSize = protoInt64.zero;\n\n  /**\n   * @generated from field: bool insert_spaces = 2;\n   */\n  insertSpaces = false;\n\n  constructor(data?: PartialMessage<EditorOptions>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.codeium_common_pb.EditorOptions\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"tab_size\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"insert_spaces\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditorOptions {\n    return new EditorOptions().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditorOptions {\n    return new EditorOptions().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditorOptions {\n    return new EditorOptions().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: EditorOptions | PlainMessage<EditorOptions> | undefined, b: EditorOptions | PlainMessage<EditorOptions> | undefined): boolean {\n    return proto3.util.equals(EditorOptions, a, b);\n  }\n}\n\n/**\n * @generated from message exa.codeium_common_pb.Event\n */\nexport class Event extends Message<Event> {\n  /**\n   * @generated from field: exa.codeium_common_pb.EventType event_type = 1;\n   */\n  eventType = EventType.UNSPECIFIED;\n\n  /**\n   * @generated from field: string event_json = 2;\n   */\n  eventJson = \"\";\n\n  /**\n   * @generated from field: int64 timestamp_unix_ms = 3;\n   */\n  timestampUnixMs = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Event>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.codeium_common_pb.Event\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"event_type\", kind: \"enum\", T: proto3.getEnumType(EventType) },\n    { no: 2, name: \"event_json\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"timestamp_unix_ms\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {\n    return new Event().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {\n    return new Event().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {\n    return new Event().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {\n    return proto3.util.equals(Event, a, b);\n  }\n}\n\n", "import { WidgetType } from \"@codemirror/view\";\n\n/**\n * Shown at the end of a suggestion if there are multiple\n * suggestions to cycle through.\n */\nexport class DefaultCycleWidget extends WidgetType {\n  index: number;\n  total: number;\n\n  constructor(index: number, total: number) {\n    super();\n    this.index = index;\n    this.total = total;\n  }\n\n  toDOM() {\n    const wrap = document.createElement(\"span\");\n    wrap.setAttribute(\"aria-hidden\", \"true\");\n    wrap.className = \"cm-codeium-cycle\";\n    const words = wrap.appendChild(document.createElement(\"span\"));\n    words.className = \"cm-codeium-cycle-explanation\";\n    words.innerText = `${this.index + 1}/${this.total}`;\n    const key = wrap.appendChild(document.createElement(\"button\"));\n    key.className = \"cm-codeium-cycle-key\";\n    key.innerText = \"→ (Ctrl ])\";\n    key.dataset.action = \"codeium-cycle\";\n    return wrap;\n  }\n\n  ignoreEvent() {\n    return false;\n  }\n}\n", "import { CompletionContext, completionStatus } from \"@codemirror/autocomplete\";\nimport { ChangeSet, Transaction } from \"@codemirror/state\";\nimport { EditorView, type ViewUpdate } from \"@codemirror/view\";\nimport { completionsToChangeSpec, getCodeiumCompletions } from \"./codeium.js\";\nimport {\n  acceptSuggestion,\n  addSuggestions,\n  clearSuggestion,\n} from \"./effects.js\";\nimport { completionDecoration } from \"./completionDecoration.js\";\nimport { copilotEvent, copilotIgnore } from \"./annotations.js\";\nimport { codeiumConfig, codeiumOtherDocumentsConfig } from \"./config.js\";\n\n/**\n * To request a completion, the document needs to have been\n * updated and the update should not have been because\n * of accepting or clearing a suggestion.\n */\nfunction shouldRequestCompletion(update: ViewUpdate) {\n  return (\n    update.docChanged &&\n    !update.transactions.some((tr) =>\n      tr.effects.some((e) => e.is(acceptSuggestion) || e.is(clearSuggestion)),\n    )\n  );\n}\n\n/**\n * Don't request a completion if we've already\n * done so, or it's a copilot event we're responding\n * to, or if the view is not focused.\n */\nfunction shouldIgnoreUpdate(update: ViewUpdate) {\n  // not focused\n  if (!update.view.hasFocus) return true;\n\n  // contains ghost text\n  if (update.state.field(completionDecoration)) return true;\n\n  // is autocompleting\n  if (completionStatus(update.state) === \"active\") return true;\n\n  // bad update\n  for (const tr of update.transactions) {\n    if (tr.annotation(copilotEvent) !== undefined) {\n      return true;\n    }\n  }\n}\n\n/**\n * A view plugin that requests completions from the server after a delay\n */\nexport function completionRequester() {\n  let timeout: number | null = null;\n  let lastPos = 0;\n\n  return EditorView.updateListener.of((update: ViewUpdate) => {\n    const config = update.view.state.facet(codeiumConfig);\n    const { override } = update.view.state.facet(codeiumOtherDocumentsConfig);\n\n    if (!shouldRequestCompletion(update)) return;\n\n    // Cancel the previous timeout\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    if (shouldIgnoreUpdate(update)) {\n      return;\n    }\n\n    // Get the current position and source\n    const state = update.state;\n    const pos = state.selection.main.head;\n\n    // If we've configured a custom rule for when to show completions\n    // and that rule says no, don't offer completions.\n    if (\n      config.shouldComplete &&\n      !config.shouldComplete(\n        new CompletionContext(update.view.state, pos, false),\n      )\n    ) {\n      return;\n    }\n\n    const source = state.doc.toString();\n\n    // Set a new timeout to request completion\n    timeout = setTimeout(async () => {\n      // Check if the position has changed\n      if (pos !== lastPos) return;\n\n      const otherDocuments = await override();\n\n      // Request completion from the server\n      try {\n        const completionResult = await getCodeiumCompletions({\n          text: source,\n          cursorOffset: pos,\n          config,\n          otherDocuments,\n        });\n\n        if (\n          !completionResult ||\n          completionResult.completionItems.length === 0\n        ) {\n          return;\n        }\n\n        // Check if the position is still the same. If\n        // it has changed, ignore the code that we just\n        // got from the API and don't show anything.\n        if (\n          !(\n            pos === lastPos &&\n            completionStatus(update.view.state) !== \"active\" &&\n            update.view.hasFocus\n          )\n        ) {\n          return;\n        }\n\n        // Dispatch an effect to add the suggestion\n        // If the completion starts before the end of the line,\n        // check the end of the line with the end of the completion\n        const changeSpecs = completionsToChangeSpec(completionResult);\n\n        const index = 0;\n        const firstSpec = changeSpecs.at(index);\n        if (!firstSpec) return;\n        const insertChangeSet = ChangeSet.of(firstSpec, state.doc.length);\n        const reverseChangeSet = insertChangeSet.invert(state.doc);\n\n        update.view.dispatch({\n          changes: insertChangeSet,\n          effects: addSuggestions.of({\n            index,\n            reverseChangeSet,\n            changeSpecs,\n          }),\n          annotations: [\n            copilotIgnore.of(null),\n            copilotEvent.of(null),\n            Transaction.addToHistory.of(false),\n          ],\n        });\n      } catch (error) {\n        console.warn(\"copilot completion failed\", error);\n        // Javascript wait for 500ms for some reason is necessary here.\n        // TODO - FIGURE OUT WHY THIS RESOLVES THE BUG\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n      }\n    }, config.timeout);\n    // Update the last position\n    lastPos = pos;\n  });\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Connect represents categories of errors as codes, and each code maps to a\n * specific HTTP status code. The codes and their semantics were chosen to\n * match gRPC. Only the codes below are valid \u2014 there are no user-defined\n * codes.\n *\n * See the specification at https://connectrpc.com/docs/protocol#error-codes\n * for details.\n */\nexport var Code;\n(function (Code) {\n    /**\n     * Canceled, usually be the user\n     */\n    Code[Code[\"Canceled\"] = 1] = \"Canceled\";\n    /**\n     * Unknown error\n     */\n    Code[Code[\"Unknown\"] = 2] = \"Unknown\";\n    /**\n     * Argument invalid regardless of system state\n     */\n    Code[Code[\"InvalidArgument\"] = 3] = \"InvalidArgument\";\n    /**\n     * Operation expired, may or may not have completed.\n     */\n    Code[Code[\"DeadlineExceeded\"] = 4] = \"DeadlineExceeded\";\n    /**\n     * Entity not found.\n     */\n    Code[Code[\"NotFound\"] = 5] = \"NotFound\";\n    /**\n     * Entity already exists.\n     */\n    Code[Code[\"AlreadyExists\"] = 6] = \"AlreadyExists\";\n    /**\n     * Operation not authorized.\n     */\n    Code[Code[\"PermissionDenied\"] = 7] = \"PermissionDenied\";\n    /**\n     * Quota exhausted.\n     */\n    Code[Code[\"ResourceExhausted\"] = 8] = \"ResourceExhausted\";\n    /**\n     * Argument invalid in current system state.\n     */\n    Code[Code[\"FailedPrecondition\"] = 9] = \"FailedPrecondition\";\n    /**\n     * Operation aborted.\n     */\n    Code[Code[\"Aborted\"] = 10] = \"Aborted\";\n    /**\n     * Out of bounds, use instead of FailedPrecondition.\n     */\n    Code[Code[\"OutOfRange\"] = 11] = \"OutOfRange\";\n    /**\n     * Operation not implemented or disabled.\n     */\n    Code[Code[\"Unimplemented\"] = 12] = \"Unimplemented\";\n    /**\n     * Internal error, reserved for \"serious errors\".\n     */\n    Code[Code[\"Internal\"] = 13] = \"Internal\";\n    /**\n     * Unavailable, client should back off and retry.\n     */\n    Code[Code[\"Unavailable\"] = 14] = \"Unavailable\";\n    /**\n     * Unrecoverable data loss or corruption.\n     */\n    Code[Code[\"DataLoss\"] = 15] = \"DataLoss\";\n    /**\n     * Request isn't authenticated.\n     */\n    Code[Code[\"Unauthenticated\"] = 16] = \"Unauthenticated\";\n})(Code || (Code = {}));\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * codeToString returns the string representation of a Code.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeToString(value) {\n    const name = Code[value];\n    if (typeof name != \"string\") {\n        return value.toString();\n    }\n    return (name[0].toLowerCase() +\n        name.substring(1).replace(/[A-Z]/g, (c) => \"_\" + c.toLowerCase()));\n}\nlet stringToCode;\n/**\n * codeFromString parses the string representation of a Code in snake_case.\n * For example, the string \"permission_denied\" parses into Code.PermissionDenied.\n *\n * If the given string cannot be parsed, the function returns undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromString(value) {\n    if (!stringToCode) {\n        stringToCode = {};\n        for (const value of Object.values(Code)) {\n            if (typeof value == \"string\") {\n                continue;\n            }\n            stringToCode[codeToString(value)] = value;\n        }\n    }\n    return stringToCode[value];\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"./code.js\";\nimport { codeToString } from \"./protocol-connect/code-string.js\";\n/**\n * ConnectError captures four pieces of information: a Code, an error\n * message, an optional cause of the error, and an optional collection of\n * arbitrary Protobuf messages called  \"details\".\n *\n * Because developer tools typically show just the error message, we prefix\n * it with the status code, so that the most important information is always\n * visible immediately.\n *\n * Error details are wrapped with google.protobuf.Any on the wire, so that\n * a server or middleware can attach arbitrary data to an error. Use the\n * method findDetails() to retrieve the details.\n */\nexport class ConnectError extends Error {\n    /**\n     * Create a new ConnectError.\n     * If no code is provided, code \"unknown\" is used.\n     * Outgoing details are only relevant for the server side - a service may\n     * raise an error with details, and it is up to the protocol implementation\n     * to encode and send the details along with error.\n     */\n    constructor(message, code = Code.Unknown, metadata, outgoingDetails, cause) {\n        super(createMessage(message, code));\n        this.name = \"ConnectError\";\n        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#example\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.rawMessage = message;\n        this.code = code;\n        this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});\n        this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];\n        this.cause = cause;\n    }\n    /**\n     * Convert any value - typically a caught error into a ConnectError,\n     * following these rules:\n     * - If the value is already a ConnectError, return it as is.\n     * - If the value is an AbortError from the fetch API, return the message\n     *   of the AbortError with code Canceled.\n     * - For other Errors, return the error message with code Unknown by default.\n     * - For other values, return the values String representation as a message,\n     *   with the code Unknown by default.\n     * The original value will be used for the \"cause\" property for the new\n     * ConnectError.\n     */\n    static from(reason, code = Code.Unknown) {\n        if (reason instanceof ConnectError) {\n            return reason;\n        }\n        if (reason instanceof Error) {\n            if (reason.name == \"AbortError\") {\n                // Fetch requests can only be canceled with an AbortController.\n                // We detect that condition by looking at the name of the raised\n                // error object, and translate to the appropriate status code.\n                return new ConnectError(reason.message, Code.Canceled);\n            }\n            return new ConnectError(reason.message, code, undefined, undefined, reason);\n        }\n        return new ConnectError(String(reason), code, undefined, undefined, reason);\n    }\n    static [Symbol.hasInstance](v) {\n        if (!(v instanceof Error)) {\n            return false;\n        }\n        if (Object.getPrototypeOf(v) === ConnectError.prototype) {\n            return true;\n        }\n        return (v.name === \"ConnectError\" &&\n            \"code\" in v &&\n            typeof v.code === \"number\" &&\n            \"metadata\" in v &&\n            \"details\" in v &&\n            Array.isArray(v.details) &&\n            \"rawMessage\" in v &&\n            typeof v.rawMessage == \"string\" &&\n            \"cause\" in v);\n    }\n    findDetails(typeOrRegistry) {\n        const registry = \"typeName\" in typeOrRegistry\n            ? {\n                findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : undefined,\n            }\n            : typeOrRegistry;\n        const details = [];\n        for (const data of this.details) {\n            if (\"getType\" in data) {\n                if (registry.findMessage(data.getType().typeName)) {\n                    details.push(data);\n                }\n                continue;\n            }\n            const type = registry.findMessage(data.type);\n            if (type) {\n                try {\n                    details.push(type.fromBinary(data.value));\n                }\n                catch (_) {\n                    // We silently give up if we are unable to parse the detail, because\n                    // that appears to be the least worst behavior.\n                    // It is very unlikely that a user surrounds a catch body handling the\n                    // error with another try-catch statement, and we do not want to\n                    // recommend doing so.\n                }\n            }\n        }\n        return details;\n    }\n}\n/**\n * Create an error message, prefixing the given code.\n */\nfunction createMessage(message, code) {\n    return message.length\n        ? `[${codeToString(code)}] ${message}`\n        : `[${codeToString(code)}]`;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { protoBase64 } from \"@bufbuild/protobuf\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\n/**\n * Encode a single binary header value according to the Connect\n * and gRPC specifications.\n *\n * This function accepts raw binary data from a buffer, a string\n * with UTF-8 text, or a protobuf message. It encodes the input\n * with unpadded base64 and returns a string that can be used for\n * a header whose name ends with `-bin`.\n */\nexport function encodeBinaryHeader(value) {\n    let bytes;\n    if (typeof value == \"object\" && \"getType\" in value) {\n        bytes = value.toBinary();\n    }\n    else if (typeof value == \"string\") {\n        bytes = new TextEncoder().encode(value);\n    }\n    else {\n        bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    }\n    return protoBase64.enc(bytes).replace(/=+$/, \"\");\n}\nexport function decodeBinaryHeader(value, type, options) {\n    try {\n        const bytes = protoBase64.dec(value);\n        if (type) {\n            return type.fromBinary(bytes, options);\n        }\n        return bytes;\n    }\n    catch (e) {\n        throw ConnectError.from(e, Code.DataLoss);\n    }\n}\n/**\n * Merge two or more Headers objects by appending all fields from\n * all inputs to a new Headers object.\n */\nexport function appendHeaders(...headers) {\n    const h = new Headers();\n    for (const e of headers) {\n        e.forEach((value, key) => {\n            h.append(key, value);\n        });\n    }\n    return h;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create any client for the given service.\n *\n * The given createMethod function is called for each method definition\n * of the service. The function it returns is added to the client object\n * as a method.\n */\nexport function makeAnyClient(service, createMethod) {\n    const client = {};\n    for (const [localName, methodInfo] of Object.entries(service.methods)) {\n        const method = createMethod(Object.assign(Object.assign({}, methodInfo), { localName,\n            service }));\n        if (method != null) {\n            client[localName] = method;\n        }\n    }\n    return client;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { compressedFlag } from \"./compression.js\";\n/**\n * Create a WHATWG ReadableStream of enveloped messages from a ReadableStream\n * of bytes.\n *\n * Ideally, this would simply be a TransformStream, but ReadableStream.pipeThrough\n * does not have the necessary availability at this time.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createEnvelopeReadableStream(stream) {\n    let reader;\n    let buffer = new Uint8Array(0);\n    function append(chunk) {\n        const n = new Uint8Array(buffer.length + chunk.length);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        buffer = n;\n    }\n    return new ReadableStream({\n        start() {\n            reader = stream.getReader();\n        },\n        async pull(controller) {\n            let header = undefined;\n            for (;;) {\n                if (header === undefined && buffer.byteLength >= 5) {\n                    let length = 0;\n                    for (let i = 1; i < 5; i++) {\n                        length = (length << 8) + buffer[i];\n                    }\n                    header = { flags: buffer[0], length };\n                }\n                if (header !== undefined && buffer.byteLength >= header.length + 5) {\n                    break;\n                }\n                const result = await reader.read();\n                if (result.done) {\n                    break;\n                }\n                append(result.value);\n            }\n            if (header === undefined) {\n                if (buffer.byteLength == 0) {\n                    controller.close();\n                    return;\n                }\n                controller.error(new ConnectError(\"premature end of stream\", Code.DataLoss));\n                return;\n            }\n            const data = buffer.subarray(5, 5 + header.length);\n            buffer = buffer.subarray(5 + header.length);\n            controller.enqueue({\n                flags: header.flags,\n                data,\n            });\n        },\n    });\n}\n/**\n * Compress an EnvelopedMessage.\n *\n * Raises Internal if an enveloped message is already compressed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeCompress(envelope, compression, compressMinBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        throw new ConnectError(\"invalid envelope, already compressed\", Code.Internal);\n    }\n    if (compression && data.byteLength >= compressMinBytes) {\n        data = await compression.compress(data);\n        flags = flags | compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Decompress an EnvelopedMessage.\n *\n * Raises InvalidArgument if an envelope is compressed, but compression is null.\n *\n * Relies on the provided Compression to raise ResourceExhausted if the\n * *decompressed* message size is larger than readMaxBytes. If the envelope is\n * not compressed, readMaxBytes is not honored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function envelopeDecompress(envelope, compression, readMaxBytes) {\n    let { flags, data } = envelope;\n    if ((flags & compressedFlag) === compressedFlag) {\n        if (!compression) {\n            throw new ConnectError(\"received compressed envelope, but do not know how to decompress\", Code.InvalidArgument);\n        }\n        data = await compression.decompress(data, readMaxBytes);\n        flags = flags ^ compressedFlag;\n    }\n    return { data, flags };\n}\n/**\n * Encode a single enveloped message.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelope(flags, data) {\n    const bytes = new Uint8Array(data.length + 5);\n    bytes.set(data, 5);\n    const v = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    v.setUint8(0, flags); // first byte is flags\n    v.setUint32(1, data.length); // 4 bytes message length\n    return bytes;\n}\n/**\n * Encode a set of enveloped messages.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function encodeEnvelopes(...envelopes) {\n    const len = envelopes.reduce((previousValue, currentValue) => previousValue + currentValue.data.length + 5, 0);\n    const bytes = new Uint8Array(len);\n    const v = new DataView(bytes.buffer);\n    let offset = 0;\n    for (const e of envelopes) {\n        v.setUint8(offset, e.flags); // first byte is flags\n        v.setUint32(offset + 1, e.data.length); // 4 bytes message length\n        bytes.set(e.data, offset + 5);\n        offset += e.data.length + 5;\n    }\n    return bytes;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nimport { Code } from \"../code.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { encodeEnvelope, envelopeCompress, envelopeDecompress, } from \"./envelope.js\";\nimport { assertReadMaxBytes } from \"./limit-io.js\";\nexport function pipeTo(source, ...rest) {\n    const [transforms, sink, opt] = pickTransformsAndSink(rest);\n    let iterable = source;\n    let abortable;\n    if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n        iterable = abortable = makeIterableAbortable(iterable);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    iterable = pipe(iterable, ...transforms, { propagateDownStreamError: false });\n    return sink(iterable).catch((reason) => {\n        if (abortable) {\n            return abortable.abort(reason).then(() => Promise.reject(reason));\n        }\n        return Promise.reject(reason);\n    });\n}\n// pick transforms, the sink, and options from the pipeTo() rest parameter\nfunction pickTransformsAndSink(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    const sink = rest.pop();\n    return [rest, sink, opt];\n}\n/**\n * Creates an AsyncIterableSink that concatenates all elements from the input.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAll() {\n    return async function (iterable) {\n        var _a, e_1, _b, _c;\n        const all = [];\n        try {\n            for (var _d = true, iterable_1 = __asyncValues(iterable), iterable_1_1; iterable_1_1 = await iterable_1.next(), _a = iterable_1_1.done, !_a; _d = true) {\n                _c = iterable_1_1.value;\n                _d = false;\n                const chunk = _c;\n                all.push(chunk);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_d && !_a && (_b = iterable_1.return)) await _b.call(iterable_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return all;\n    };\n}\n/**\n * Creates an AsyncIterableSink that concatenates all chunks from the input into\n * a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function sinkAllBytes(readMaxBytes, lengthHint) {\n    return async function (iterable) {\n        return await readAllBytes(iterable, readMaxBytes, lengthHint);\n    };\n}\nexport function pipe(source, ...rest) {\n    var _a;\n    return __asyncGenerator(this, arguments, function* pipe_1() {\n        const [transforms, opt] = pickTransforms(rest);\n        let abortable;\n        const sourceIt = source[Symbol.asyncIterator]();\n        const cachedSource = {\n            [Symbol.asyncIterator]() {\n                return sourceIt;\n            },\n        };\n        let iterable = cachedSource;\n        if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n            iterable = abortable = makeIterableAbortable(iterable);\n        }\n        for (const t of transforms) {\n            iterable = t(iterable);\n        }\n        const it = iterable[Symbol.asyncIterator]();\n        try {\n            for (;;) {\n                const r = yield __await(it.next());\n                if (r.done === true) {\n                    break;\n                }\n                if (!abortable) {\n                    yield yield __await(r.value);\n                    continue;\n                }\n                try {\n                    yield yield __await(r.value);\n                }\n                catch (e) {\n                    yield __await(abortable.abort(e)); // propagate downstream error to the source\n                    throw e;\n                }\n            }\n        }\n        finally {\n            if ((opt === null || opt === void 0 ? void 0 : opt.propagateDownStreamError) === true) {\n                // Call return on the source iterable to indicate\n                // that we will no longer consume it and it should\n                // cleanup any allocated resources.\n                (_a = sourceIt.return) === null || _a === void 0 ? void 0 : _a.call(sourceIt).catch(() => {\n                    // return returns a promise, which we don't care about.\n                    //\n                    // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                    // this is to ensure error is caught and ignored.\n                });\n            }\n        }\n    });\n}\nfunction pickTransforms(rest) {\n    let opt;\n    if (typeof rest[rest.length - 1] != \"function\") {\n        opt = rest.pop();\n    }\n    return [rest, opt];\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given catchError function.\n *\n * The catchError function may return a final value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatch(catchError) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    const caught = yield __await(catchError(e));\n                    if (caught !== undefined) {\n                        yield yield __await(caught);\n                    }\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that catches any error from the input, and\n * passes it to the given function. Unlike transformCatch(), the given function\n * is also called when no error is raised.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCatchFinally(catchFinally) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            // we deliberate avoid a for-await loop because we only want to catch upstream\n            // errors, not downstream errors (yield).\n            let err;\n            const it = iterable[Symbol.asyncIterator]();\n            for (;;) {\n                let r;\n                try {\n                    r = yield __await(it.next());\n                }\n                catch (e) {\n                    err = e;\n                    break;\n                }\n                if (r.done === true) {\n                    break;\n                }\n                yield yield __await(r.value);\n            }\n            const caught = yield __await(catchFinally(err));\n            if (caught !== undefined) {\n                yield yield __await(caught);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that appends a value.\n *\n * The element to append is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformAppend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_2, _b, _c;\n            try {\n                for (var _d = true, iterable_2 = __asyncValues(iterable), iterable_2_1; iterable_2_1 = yield __await(iterable_2.next()), _a = iterable_2_1.done, !_a; _d = true) {\n                    _c = iterable_2_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_2.return)) yield __await(_b.call(iterable_2));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            const append = yield __await(provide());\n            if (append !== undefined) {\n                yield yield __await(append);\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that prepends an element.\n *\n * The element to prepend is provided by a function. If the function returns\n * undefined, no element is appended.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformPrepend(provide) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_3, _b, _c;\n            const prepend = yield __await(provide());\n            if (prepend !== undefined) {\n                yield yield __await(prepend);\n            }\n            try {\n                for (var _d = true, iterable_3 = __asyncValues(iterable), iterable_3_1; iterable_3_1 = yield __await(iterable_3.next()), _a = iterable_3_1.done, !_a; _d = true) {\n                    _c = iterable_3_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    yield yield __await(chunk);\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_3.return)) yield __await(_b.call(iterable_3));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that reads all bytes from the input, and\n * concatenates them to a single Uint8Array.\n *\n * The iterable raises an error if the more than readMaxBytes are read.\n *\n * An optional length hint can be provided to optimize allocation and validation.\n * If more or less bytes are present in the source that the length hint indicates,\n * and error is raised.\n * If the length hint is larger than readMaxBytes, an error is raised.\n * If the length hint is not a positive integer, it is ignored.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformReadAllBytes(readMaxBytes, lengthHint) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            yield yield __await(yield __await(readAllBytes(iterable, readMaxBytes, lengthHint)));\n        });\n    };\n}\nexport function transformSerializeEnvelope(serialization, endStreamFlag, endSerialization) {\n    if (endStreamFlag === undefined || endSerialization === undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_4, _b, _c;\n                try {\n                    for (var _d = true, iterable_4 = __asyncValues(iterable), iterable_4_1; iterable_4_1 = yield __await(iterable_4.next()), _a = iterable_4_1.done, !_a; _d = true) {\n                        _c = iterable_4_1.value;\n                        _d = false;\n                        const chunk = _c;\n                        const data = serialization.serialize(chunk);\n                        yield yield __await({ flags: 0, data });\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_4.return)) yield __await(_b.call(iterable_4));\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            });\n        };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_5, _b, _c;\n            try {\n                for (var _d = true, iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), _a = iterable_5_1.done, !_a; _d = true) {\n                    _c = iterable_5_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    let data;\n                    let flags = 0;\n                    if (chunk.end) {\n                        flags = flags | endStreamFlag;\n                        data = endSerialization.serialize(chunk.value);\n                    }\n                    else {\n                        data = serialization.serialize(chunk.value);\n                    }\n                    yield yield __await({ flags, data });\n                }\n            }\n            catch (e_5_1) { e_5 = { error: e_5_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_5.return)) yield __await(_b.call(iterable_5));\n                }\n                finally { if (e_5) throw e_5.error; }\n            }\n        });\n    };\n}\nexport function transformParseEnvelope(serialization, endStreamFlag, endSerialization) {\n    // code path always yields ParsedEnvelopedMessage<T, E>\n    if (endSerialization && endStreamFlag !== undefined) {\n        return function (iterable) {\n            return __asyncGenerator(this, arguments, function* () {\n                var _a, e_6, _b, _c;\n                try {\n                    for (var _d = true, iterable_6 = __asyncValues(iterable), iterable_6_1; iterable_6_1 = yield __await(iterable_6.next()), _a = iterable_6_1.done, !_a; _d = true) {\n                        _c = iterable_6_1.value;\n                        _d = false;\n                        const { flags, data } = _c;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            yield yield __await({ value: endSerialization.parse(data), end: true });\n                        }\n                        else {\n                            yield yield __await({ value: serialization.parse(data), end: false });\n                        }\n                    }\n                }\n                catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                finally {\n                    try {\n                        if (!_d && !_a && (_b = iterable_6.return)) yield __await(_b.call(iterable_6));\n                    }\n                    finally { if (e_6) throw e_6.error; }\n                }\n            });\n        };\n    }\n    // code path always yields T\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_7, _b, _c;\n            try {\n                for (var _d = true, iterable_7 = __asyncValues(iterable), iterable_7_1; iterable_7_1 = yield __await(iterable_7.next()), _a = iterable_7_1.done, !_a; _d = true) {\n                    _c = iterable_7_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    if (endStreamFlag !== undefined &&\n                        (flags & endStreamFlag) === endStreamFlag) {\n                        if (endSerialization === null) {\n                            throw new ConnectError(\"unexpected end flag\", Code.InvalidArgument);\n                        }\n                        // skips end-of-stream envelope\n                        continue;\n                    }\n                    yield yield __await(serialization.parse(data));\n                }\n            }\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_7.return)) yield __await(_b.call(iterable_7));\n                }\n                finally { if (e_7) throw e_7.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and compresses them if they are larger than compressMinBytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformCompressEnvelope(compression, compressMinBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_8, _b, _c;\n            try {\n                for (var _d = true, iterable_8 = __asyncValues(iterable), iterable_8_1; iterable_8_1 = yield __await(iterable_8.next()), _a = iterable_8_1.done, !_a; _d = true) {\n                    _c = iterable_8_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeCompress(env, compression, compressMinBytes)));\n                }\n            }\n            catch (e_8_1) { e_8 = { error: e_8_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_8.return)) yield __await(_b.call(iterable_8));\n                }\n                finally { if (e_8) throw e_8.error; }\n            }\n        });\n    };\n}\n/**\n * Creates an AsyncIterableTransform that takes enveloped messages as a source,\n * and decompresses them using the given compression.\n *\n * The iterable raises an error if the decompressed payload of an enveloped\n * message is larger than readMaxBytes, or if no compression is provided.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformDecompressEnvelope(compression, readMaxBytes) {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_9, _b, _c;\n            try {\n                for (var _d = true, iterable_9 = __asyncValues(iterable), iterable_9_1; iterable_9_1 = yield __await(iterable_9.next()), _a = iterable_9_1.done, !_a; _d = true) {\n                    _c = iterable_9_1.value;\n                    _d = false;\n                    const env = _c;\n                    yield yield __await(yield __await(envelopeDecompress(env, compression, readMaxBytes)));\n                }\n            }\n            catch (e_9_1) { e_9 = { error: e_9_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_9.return)) yield __await(_b.call(iterable_9));\n                }\n                finally { if (e_9) throw e_9.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes enveloped messages as a source,\n * and joins them into a stream of raw bytes.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformJoinEnvelopes() {\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_10, _b, _c;\n            try {\n                for (var _d = true, iterable_10 = __asyncValues(iterable), iterable_10_1; iterable_10_1 = yield __await(iterable_10.next()), _a = iterable_10_1.done, !_a; _d = true) {\n                    _c = iterable_10_1.value;\n                    _d = false;\n                    const { flags, data } = _c;\n                    yield yield __await(encodeEnvelope(flags, data));\n                }\n            }\n            catch (e_10_1) { e_10 = { error: e_10_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_10.return)) yield __await(_b.call(iterable_10));\n                }\n                finally { if (e_10) throw e_10.error; }\n            }\n        });\n    };\n}\n/**\n * Create an AsyncIterableTransform that takes raw bytes as a source, and splits\n * them into enveloped messages.\n *\n * The iterable raises an error\n * - if the payload of an enveloped message is larger than readMaxBytes,\n * - if the stream ended before an enveloped message fully arrived,\n * - or if the stream ended with extraneous data.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformSplitEnvelope(readMaxBytes) {\n    // append chunk to buffer, returning updated buffer\n    function append(buffer, chunk) {\n        const n = new Uint8Array(buffer.byteLength + chunk.byteLength);\n        n.set(buffer);\n        n.set(chunk, buffer.length);\n        return n;\n    }\n    // tuple 0: envelope, or undefined if incomplete\n    // tuple 1: remainder of the buffer\n    function shiftEnvelope(buffer, header) {\n        if (buffer.byteLength < 5 + header.length) {\n            return [undefined, buffer];\n        }\n        return [\n            { flags: header.flags, data: buffer.subarray(5, 5 + header.length) },\n            buffer.subarray(5 + header.length),\n        ];\n    }\n    // undefined: header is incomplete\n    function peekHeader(buffer) {\n        if (buffer.byteLength < 5) {\n            return undefined;\n        }\n        const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        const length = view.getUint32(1); // 4 bytes message length\n        const flags = view.getUint8(0); // first byte is flags\n        return { length, flags };\n    }\n    return function (iterable) {\n        return __asyncGenerator(this, arguments, function* () {\n            var _a, e_11, _b, _c;\n            let buffer = new Uint8Array(0);\n            try {\n                for (var _d = true, iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = yield __await(iterable_11.next()), _a = iterable_11_1.done, !_a; _d = true) {\n                    _c = iterable_11_1.value;\n                    _d = false;\n                    const chunk = _c;\n                    buffer = append(buffer, chunk);\n                    for (;;) {\n                        const header = peekHeader(buffer);\n                        if (!header) {\n                            break;\n                        }\n                        assertReadMaxBytes(readMaxBytes, header.length, true);\n                        let env;\n                        [env, buffer] = shiftEnvelope(buffer, header);\n                        if (!env) {\n                            break;\n                        }\n                        yield yield __await(env);\n                    }\n                }\n            }\n            catch (e_11_1) { e_11 = { error: e_11_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = iterable_11.return)) yield __await(_b.call(iterable_11));\n                }\n                finally { if (e_11) throw e_11.error; }\n            }\n            if (buffer.byteLength > 0) {\n                const header = peekHeader(buffer);\n                let message = \"protocol error: incomplete envelope\";\n                if (header) {\n                    message = `protocol error: promised ${header.length} bytes in enveloped message, got ${buffer.byteLength - 5} bytes`;\n                }\n                throw new ConnectError(message, Code.InvalidArgument);\n            }\n        });\n    };\n}\n/**\n * Reads all bytes from the source, and concatenates them to a single Uint8Array.\n *\n * Raises an error if:\n * - more than readMaxBytes are read\n * - lengthHint is a positive integer, but larger than readMaxBytes\n * - lengthHint is a positive integer, and the source contains more or less bytes\n *   than promised\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function readAllBytes(iterable, readMaxBytes, lengthHint) {\n    var _a, e_12, _b, _c, _d, e_13, _e, _f;\n    const [ok, hint] = parseLengthHint(lengthHint);\n    if (ok) {\n        if (hint > readMaxBytes) {\n            assertReadMaxBytes(readMaxBytes, hint, true);\n        }\n        const buffer = new Uint8Array(hint);\n        let offset = 0;\n        try {\n            for (var _g = true, iterable_12 = __asyncValues(iterable), iterable_12_1; iterable_12_1 = await iterable_12.next(), _a = iterable_12_1.done, !_a; _g = true) {\n                _c = iterable_12_1.value;\n                _g = false;\n                const chunk = _c;\n                if (offset + chunk.byteLength > hint) {\n                    throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset + chunk.byteLength}`, Code.InvalidArgument);\n                }\n                buffer.set(chunk, offset);\n                offset += chunk.byteLength;\n            }\n        }\n        catch (e_12_1) { e_12 = { error: e_12_1 }; }\n        finally {\n            try {\n                if (!_g && !_a && (_b = iterable_12.return)) await _b.call(iterable_12);\n            }\n            finally { if (e_12) throw e_12.error; }\n        }\n        if (offset < hint) {\n            throw new ConnectError(`protocol error: promised ${hint} bytes, received ${offset}`, Code.InvalidArgument);\n        }\n        return buffer;\n    }\n    const chunks = [];\n    let count = 0;\n    try {\n        for (var _h = true, iterable_13 = __asyncValues(iterable), iterable_13_1; iterable_13_1 = await iterable_13.next(), _d = iterable_13_1.done, !_d; _h = true) {\n            _f = iterable_13_1.value;\n            _h = false;\n            const chunk = _f;\n            count += chunk.byteLength;\n            assertReadMaxBytes(readMaxBytes, count);\n            chunks.push(chunk);\n        }\n    }\n    catch (e_13_1) { e_13 = { error: e_13_1 }; }\n    finally {\n        try {\n            if (!_h && !_d && (_e = iterable_13.return)) await _e.call(iterable_13);\n        }\n        finally { if (e_13) throw e_13.error; }\n    }\n    const all = new Uint8Array(count);\n    let offset = 0;\n    for (let chunk = chunks.shift(); chunk; chunk = chunks.shift()) {\n        all.set(chunk, offset);\n        offset += chunk.byteLength;\n    }\n    return all;\n}\n// parse the lengthHint argument of readAllBytes()\nfunction parseLengthHint(lengthHint) {\n    if (lengthHint === undefined || lengthHint === null) {\n        return [false, 0];\n    }\n    const n = typeof lengthHint == \"string\" ? parseInt(lengthHint, 10) : lengthHint;\n    if (!Number.isSafeInteger(n) || n < 0) {\n        return [false, n];\n    }\n    return [true, n];\n}\n/**\n * Wait for the first element of an iterable without modifying the iterable.\n * This consumes the first element, but pushes it back on the stack.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport async function untilFirst(iterable) {\n    const it = iterable[Symbol.asyncIterator]();\n    let first = await it.next();\n    return {\n        [Symbol.asyncIterator]() {\n            const w = {\n                async next() {\n                    if (first !== null) {\n                        const n = first;\n                        first = null;\n                        return n;\n                    }\n                    return await it.next();\n                },\n            };\n            if (it.throw !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- can't handle mutated object sensibly\n                w.throw = (e) => it.throw(e);\n            }\n            if (it.return !== undefined) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion,@typescript-eslint/no-explicit-any -- can't handle mutated object sensibly\n                w.return = (value) => it.return(value);\n            }\n            return w;\n        },\n    };\n}\n/**\n * Wrap the given iterable and return an iterable with an abort() method.\n *\n * This function exists purely for convenience. Where one would typically have\n * to access the iterator directly, advance through all elements, and call\n * AsyncIterator.throw() to notify the upstream iterable, this function allows\n * to use convenient for-await loops and still notify the upstream iterable:\n *\n * ```ts\n * const abortable = makeIterableAbortable(iterable);\n * for await (const ele of abortable) {\n *   await abortable.abort(\"ERR\");\n * }\n * ```\n * There are a couple of limitations of this function:\n * - the given async iterable must implement throw\n * - the async iterable cannot be re-use\n * - if source catches errors and yields values for them, they are ignored, and\n *   the source may still dangle\n *\n * There are four possible ways an async function* can handle yield errors:\n * 1. don't catch errors at all - Abortable.abort() will resolve \"rethrown\"\n * 2. catch errors and rethrow - Abortable.abort() will resolve \"rethrown\"\n * 3. catch errors and return - Abortable.abort() will resolve \"completed\"\n * 4. catch errors and yield a value - Abortable.abort() will resolve \"caught\"\n *\n * Note that catching errors and yielding a value is problematic, and it should\n * be documented that this may leave the source in a dangling state.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function makeIterableAbortable(iterable) {\n    const innerCandidate = iterable[Symbol.asyncIterator]();\n    if (innerCandidate.throw === undefined) {\n        throw new Error(\"AsyncIterable does not implement throw\");\n    }\n    const inner = innerCandidate;\n    let aborted;\n    let resultPromise;\n    let it = {\n        next() {\n            resultPromise = inner.next().finally(() => {\n                resultPromise = undefined;\n            });\n            return resultPromise;\n        },\n        throw(e) {\n            return inner.throw(e);\n        },\n    };\n    if (innerCandidate.return !== undefined) {\n        it = Object.assign(Object.assign({}, it), { return(value) {\n                return inner.return(value);\n            } });\n    }\n    let used = false;\n    return {\n        abort(reason) {\n            if (aborted) {\n                return aborted.state;\n            }\n            const f = () => {\n                return inner.throw(reason).then((r) => (r.done === true ? \"completed\" : \"caught\"), () => \"rethrown\");\n            };\n            if (resultPromise) {\n                aborted = { reason, state: resultPromise.then(f, f) };\n                return aborted.state;\n            }\n            aborted = { reason, state: f() };\n            return aborted.state;\n        },\n        [Symbol.asyncIterator]() {\n            if (used) {\n                throw new Error(\"AsyncIterable cannot be re-used\");\n            }\n            used = true;\n            return it;\n        },\n    };\n}\n/**\n * Create a new WritableIterable.\n */\nexport function createWritableIterable() {\n    // We start with two queues to capture the read and write attempts.\n    //\n    // The writes and reads each check of their counterpart is\n    // already available and either interact/add themselves to the queue.\n    const readQueue = [];\n    const writeQueue = [];\n    let err = undefined;\n    let nextResolve;\n    let nextReject;\n    let nextPromise = new Promise((resolve, reject) => {\n        nextResolve = resolve;\n        nextReject = reject;\n    });\n    let closed = false;\n    // drain the readQueue in case of error/writer is closed by sending a\n    // done result.\n    function drain() {\n        for (const next of readQueue.splice(0, readQueue.length)) {\n            next({ done: true, value: undefined });\n        }\n    }\n    return {\n        close() {\n            closed = true;\n            drain();\n        },\n        async write(payload) {\n            if (closed) {\n                throw err !== null && err !== void 0 ? err : new Error(\"cannot write, WritableIterable already closed\");\n            }\n            const read = readQueue.shift();\n            if (read === undefined) {\n                // We didn't find a pending read so we add the payload to the write queue.\n                writeQueue.push(payload);\n            }\n            else {\n                // We found a pending read so we respond with the payload.\n                read({ done: false, value: payload });\n                if (readQueue.length > 0) {\n                    // If there are more in the read queue we can mark the write as complete.\n                    // as the error reporting is not guaranteed to be sequential and therefore cannot\n                    // to linked to a specific write.\n                    return;\n                }\n            }\n            // We await the next call for as many times as there are items in the queue + 1\n            //\n            // If there are no items in the write queue that means write happened and we just have\n            // to wait for one more call likewise if we are the nth write in the queue we\n            // have to wait for n writes to complete and one more.\n            const limit = writeQueue.length + 1;\n            for (let i = 0; i < limit; i++) {\n                await nextPromise;\n            }\n        },\n        [Symbol.asyncIterator]() {\n            return {\n                next() {\n                    // Resolve the nextPromise to indicate\n                    // pending writes that a read attempt has been made\n                    // after their write.\n                    //\n                    // We also need to reset the promise for future writes.\n                    nextResolve();\n                    nextPromise = new Promise((resolve, reject) => {\n                        nextResolve = resolve;\n                        nextReject = reject;\n                    });\n                    const write = writeQueue.shift();\n                    if (write !== undefined) {\n                        // We found a pending write so response with the payload.\n                        return Promise.resolve({ done: false, value: write });\n                    }\n                    if (closed) {\n                        return Promise.resolve({ done: true, value: undefined });\n                    }\n                    // We return a promise immediately that is either resolved/rejected\n                    // as writes happen.\n                    let readResolve;\n                    const readPromise = new Promise((resolve) => (readResolve = resolve));\n                    readQueue.push(readResolve); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                    return readPromise;\n                },\n                throw(throwErr) {\n                    err = throwErr;\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    // This will reject all pending writes.\n                    nextReject(err);\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n                return() {\n                    closed = true;\n                    writeQueue.splice(0, writeQueue.length);\n                    // Resolve once for the write awaiting confirmation.\n                    nextResolve();\n                    // Reject all future writes.\n                    nextPromise = Promise.reject(new Error(\"cannot write, consumer called return\"));\n                    nextPromise.catch(() => {\n                        // To make sure that the nextPromise is always resolved.\n                    });\n                    drain();\n                    return Promise.resolve({ done: true, value: undefined });\n                },\n            };\n        },\n    };\n}\n/**\n * Create an asynchronous iterable from an array.\n *\n * @private Internal code, does not follow semantic versioning.\n */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport function createAsyncIterable(items) {\n    return __asyncGenerator(this, arguments, function* createAsyncIterable_1() {\n        yield __await(yield* __asyncDelegator(__asyncValues(items)));\n    });\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncDelegator = (this && this.__asyncDelegator) || function (o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n};\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodKind } from \"@bufbuild/protobuf\";\nimport { makeAnyClient } from \"./any-client.js\";\nimport { ConnectError } from \"./connect-error.js\";\nimport { Code } from \"./code.js\";\nimport { createAsyncIterable } from \"./protocol/async-iterable.js\";\n/**\n * Create a PromiseClient for the given service, invoking RPCs through the\n * given transport.\n */\nexport function createPromiseClient(service, transport) {\n    return makeAnyClient(service, (method) => {\n        switch (method.kind) {\n            case MethodKind.Unary:\n                return createUnaryFn(transport, service, method);\n            case MethodKind.ServerStreaming:\n                return createServerStreamingFn(transport, service, method);\n            case MethodKind.ClientStreaming:\n                return createClientStreamingFn(transport, service, method);\n            case MethodKind.BiDiStreaming:\n                return createBiDiStreamingFn(transport, service, method);\n            default:\n                return null;\n        }\n    });\n}\nexport function createUnaryFn(transport, service, method) {\n    return async function (input, options) {\n        var _a, _b;\n        const response = await transport.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        return response.message;\n    };\n}\nexport function createServerStreamingFn(transport, service, method) {\n    return function (input, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([input]), options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nexport function createClientStreamingFn(transport, service, method) {\n    return async function (request, options) {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        const response = await transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues);\n        (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);\n        let singleMessage;\n        try {\n            for (var _f = true, _g = __asyncValues(response.message), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                _c = _h.value;\n                _f = false;\n                const message = _c;\n                singleMessage = message;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (!singleMessage) {\n            throw new ConnectError(\"protocol error: missing response message\", Code.Internal);\n        }\n        (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);\n        return singleMessage;\n    };\n}\nexport function createBiDiStreamingFn(transport, service, method) {\n    return function (request, options) {\n        return handleStreamResponse(transport.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, request, options === null || options === void 0 ? void 0 : options.contextValues), options);\n    };\n}\nfunction handleStreamResponse(stream, options) {\n    const it = (function () {\n        var _a, _b;\n        return __asyncGenerator(this, arguments, function* () {\n            const response = yield __await(stream);\n            (_a = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a === void 0 ? void 0 : _a.call(options, response.header);\n            yield __await(yield* __asyncDelegator(__asyncValues(response.message)));\n            (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);\n        });\n    })()[Symbol.asyncIterator]();\n    // Create a new iterable to omit throw/return.\n    return {\n        [Symbol.asyncIterator]: () => ({\n            next: () => it.next(),\n        }),\n    };\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * Create an AbortController that is automatically aborted if one of the given\n * signals is aborted.\n *\n * For convenience, the linked AbortSignals can be undefined.\n *\n * If the controller or any of the signals is aborted, all event listeners are\n * removed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createLinkedAbortController(...signals) {\n    const controller = new AbortController();\n    const sa = signals\n        .filter((s) => s !== undefined)\n        .concat(controller.signal);\n    for (const signal of sa) {\n        if (signal.aborted) {\n            onAbort.apply(signal);\n            break;\n        }\n        signal.addEventListener(\"abort\", onAbort);\n    }\n    function onAbort() {\n        if (!controller.signal.aborted) {\n            controller.abort(getAbortSignalReason(this));\n        }\n        for (const signal of sa) {\n            signal.removeEventListener(\"abort\", onAbort);\n        }\n    }\n    return controller;\n}\n/**\n * Create a deadline signal. The returned object contains an AbortSignal, but\n * also a cleanup function to stop the timer, which must be called once the\n * calling code is no longer interested in the signal.\n *\n * Ideally, we would simply use AbortSignal.timeout(), but it is not widely\n * available yet.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createDeadlineSignal(timeoutMs) {\n    const controller = new AbortController();\n    const listener = () => {\n        controller.abort(new ConnectError(\"the operation timed out\", Code.DeadlineExceeded));\n    };\n    let timeoutId;\n    if (timeoutMs !== undefined) {\n        if (timeoutMs <= 0)\n            listener();\n        else\n            timeoutId = setTimeout(listener, timeoutMs);\n    }\n    return {\n        signal: controller.signal,\n        cleanup: () => clearTimeout(timeoutId),\n    };\n}\n/**\n * Returns the reason why an AbortSignal was aborted. Returns undefined if the\n * signal has not been aborted.\n *\n * The property AbortSignal.reason is not widely available. This function\n * returns an AbortError if the signal is aborted, but reason is undefined.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function getAbortSignalReason(signal) {\n    if (!signal.aborted) {\n        return undefined;\n    }\n    if (signal.reason !== undefined) {\n        return signal.reason;\n    }\n    // AbortSignal.reason is available in Node.js v16, v18, and later,\n    // and in all browsers since early 2022.\n    const e = new Error(\"This operation was aborted\");\n    e.name = \"AbortError\";\n    return e;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * createContextValues creates a new ContextValues.\n */\nexport function createContextValues() {\n    return {\n        get(key) {\n            return key.id in this ? this[key.id] : key.defaultValue;\n        },\n        set(key, value) {\n            this[key.id] = value;\n            return this;\n        },\n        delete(key) {\n            delete this[key.id];\n            return this;\n        },\n    };\n}\n/**\n * createContextKey creates a new ContextKey.\n */\nexport function createContextKey(defaultValue, options) {\n    return { id: Symbol(options === null || options === void 0 ? void 0 : options.description), defaultValue };\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Any, Message, proto3 } from \"@bufbuild/protobuf\";\n/**\n * The `Status` type defines a logical error model that is suitable for different\n * programming environments, including REST APIs and RPC APIs. It is used by\n * [gRPC](https://github.com/grpc). The error model is designed to be:\n *\n * - Simple to use and understand for most users\n * - Flexible enough to meet unexpected needs\n *\n * # Overview\n *\n * The `Status` message contains three pieces of data: error code, error message,\n * and error details. The error code should be an enum value of\n * [google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The\n * error message should be a developer-facing English message that helps\n * developers *understand* and *resolve* the error. If a localized user-facing\n * error message is needed, put the localized message in the error details or\n * localize it in the client. The optional error details may contain arbitrary\n * information about the error. There is a predefined set of error detail types\n * in the package `google.rpc` which can be used for common error conditions.\n *\n * # Language mapping\n *\n * The `Status` message is the logical representation of the error model, but it\n * is not necessarily the actual wire format. When the `Status` message is\n * exposed in different client libraries and different wire protocols, it can be\n * mapped differently. For example, it will likely be mapped to some exceptions\n * in Java, but more likely mapped to some error codes in C.\n *\n * # Other uses\n *\n * The error model and the `Status` message can be used in a variety of\n * environments, either with or without APIs, to provide a\n * consistent developer experience across different environments.\n *\n * Example uses of this error model include:\n *\n * - Partial errors. If a service needs to return partial errors to the client,\n *     it may embed the `Status` in the normal response to indicate the partial\n *     errors.\n *\n * - Workflow errors. A typical workflow has multiple steps. Each step may\n *     have a `Status` message for error reporting purpose.\n *\n * - Batch operations. If a client uses batch request and batch response, the\n *     `Status` message should be used directly inside batch response, one for\n *     each error sub-response.\n *\n * - Asynchronous operations. If an API call embeds asynchronous operation\n *     results in its response, the status of those operations should be\n *     represented directly using the `Status` message.\n *\n * - Logging. If some API errors are stored in logs, the message `Status` could\n *     be used directly after any stripping needed for security/privacy reasons.\n *\n * @generated from message google.rpc.Status\n */\nexport class Status extends Message {\n    constructor(data) {\n        super();\n        /**\n         * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].\n         *\n         * @generated from field: int32 code = 1;\n         */\n        this.code = 0;\n        /**\n         * A developer-facing error message, which should be in English. Any\n         * user-facing error message should be localized and sent in the\n         * [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.\n         *\n         * @generated from field: string message = 2;\n         */\n        this.message = \"\";\n        /**\n         * A list of messages that carry the error details.  There will be a\n         * common set of message types for APIs to use.\n         *\n         * @generated from field: repeated google.protobuf.Any details = 3;\n         */\n        this.details = [];\n        proto3.util.initPartial(data, this);\n    }\n    static fromBinary(bytes, options) {\n        return new Status().fromBinary(bytes, options);\n    }\n    static fromJson(jsonValue, options) {\n        return new Status().fromJson(jsonValue, options);\n    }\n    static fromJsonString(jsonString, options) {\n        return new Status().fromJsonString(jsonString, options);\n    }\n    static equals(a, b) {\n        return proto3.util.equals(Status, a, b);\n    }\n}\nStatus.runtime = proto3;\nStatus.typeName = \"google.rpc.Status\";\nStatus.fields = proto3.util.newFieldList(() => [\n    { no: 1, name: \"code\", kind: \"scalar\", T: 5 /* ScalarType.INT32 */ },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"details\", kind: \"message\", T: Any, repeated: true },\n]);\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Create a URL for the given RPC. This simply adds the qualified\n * service name, a slash, and the method name to the path of the given\n * baseUrl.\n *\n * For example, the baseUri https://example.com and method \"Say\" from\n * the service example.ElizaService results in:\n * https://example.com/example.ElizaService/Say\n *\n * This format is used by the protocols Connect, gRPC and Twirp.\n *\n * Note that this function also accepts a protocol-relative baseUrl.\n * If given an empty string or \"/\" as a baseUrl, it returns just the\n * path.\n */\nexport function createMethodUrl(baseUrl, service, method) {\n    const s = typeof service == \"string\" ? service : service.typeName;\n    const m = typeof method == \"string\" ? method : method.name;\n    return baseUrl.toString().replace(/\\/?$/, `/${s}/${m}`);\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message } from \"@bufbuild/protobuf\";\n/**\n *  Takes a partial protobuf messages of the\n *  specified message type as input, and returns full instances.\n */\nexport function normalize(type, message) {\n    return message instanceof type\n        ? message\n        : new type(message);\n}\n/**\n * Takes an AsyncIterable of partial protobuf messages of the\n * specified message type as input, and yields full instances.\n */\nexport function normalizeIterable(messageType, input) {\n    function transform(result) {\n        if (result.done === true) {\n            return result;\n        }\n        return {\n            done: result.done,\n            value: normalize(messageType, result.value),\n        };\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            const it = input[Symbol.asyncIterator]();\n            const res = {\n                next: () => it.next().then(transform),\n            };\n            if (it.throw !== undefined) {\n                res.throw = (e) => it.throw(e).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            if (it.return !== undefined) {\n                res.return = (v) => it.return(v).then(transform); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n            }\n            return res;\n        },\n    };\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * applyInterceptors takes the given UnaryFn or ServerStreamingFn, and wraps\n * it with each of the given interceptors, returning a new UnaryFn or\n * ServerStreamingFn.\n */\nexport function applyInterceptors(next, interceptors) {\n    var _a;\n    return ((_a = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    (n, i) => i(n), next)) !== null && _a !== void 0 ? _a : next);\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\nimport { assertReadMaxBytes, assertWriteMaxBytes } from \"./limit-io.js\";\n/**\n * Sets default JSON serialization options for connect-es.\n *\n * With standard protobuf JSON serialization, unknown JSON fields are\n * rejected by default. In connect-es, unknown JSON fields are ignored\n * by default.\n */\nexport function getJsonOptions(options) {\n    var _a;\n    const o = Object.assign({}, options);\n    (_a = o.ignoreUnknownFields) !== null && _a !== void 0 ? _a : (o.ignoreUnknownFields = true);\n    return o;\n}\n/**\n * Create an object that provides convenient access to request and response\n * message serialization for a given method.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createMethodSerializationLookup(method, binaryOptions, jsonOptions, limitOptions) {\n    const inputBinary = limitSerialization(createBinarySerialization(method.I, binaryOptions), limitOptions);\n    const inputJson = limitSerialization(createJsonSerialization(method.I, jsonOptions), limitOptions);\n    const outputBinary = limitSerialization(createBinarySerialization(method.O, binaryOptions), limitOptions);\n    const outputJson = limitSerialization(createJsonSerialization(method.O, jsonOptions), limitOptions);\n    return {\n        getI(useBinaryFormat) {\n            return useBinaryFormat ? inputBinary : inputJson;\n        },\n        getO(useBinaryFormat) {\n            return useBinaryFormat ? outputBinary : outputJson;\n        },\n    };\n}\n/**\n * Returns functions to normalize and serialize the input message\n * of an RPC, and to parse the output message of an RPC.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {\n    const input = useBinaryFormat\n        ? createBinarySerialization(method.I, binaryOptions)\n        : createJsonSerialization(method.I, jsonOptions);\n    const output = useBinaryFormat\n        ? createBinarySerialization(method.O, binaryOptions)\n        : createJsonSerialization(method.O, jsonOptions);\n    return { parse: output.parse, serialize: input.serialize };\n}\n/**\n * Apply I/O limits to a Serialization object, returning a new object.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function limitSerialization(serialization, limitOptions) {\n    return {\n        serialize(data) {\n            const bytes = serialization.serialize(data);\n            assertWriteMaxBytes(limitOptions.writeMaxBytes, bytes.byteLength);\n            return bytes;\n        },\n        parse(data) {\n            assertReadMaxBytes(limitOptions.readMaxBytes, data.byteLength, true);\n            return serialization.parse(data);\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf binary format.\n */\nexport function createBinarySerialization(messageType, options) {\n    return {\n        parse(data) {\n            try {\n                return messageType.fromBinary(data, options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`parse binary: ${m}`, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                return data.toBinary(options);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`serialize binary: ${m}`, Code.Internal);\n            }\n        },\n    };\n}\n/**\n * Creates a Serialization object for serializing the given protobuf message\n * with the protobuf canonical JSON encoding.\n *\n * By default, unknown fields are ignored.\n */\nexport function createJsonSerialization(messageType, options) {\n    var _a, _b;\n    const textEncoder = (_a = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a !== void 0 ? _a : new TextEncoder();\n    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();\n    const o = getJsonOptions(options);\n    return {\n        parse(data) {\n            try {\n                const json = textDecoder.decode(data);\n                return messageType.fromJsonString(json, o);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.InvalidArgument);\n            }\n        },\n        serialize(data) {\n            try {\n                const json = data.toJsonString(o);\n                return textEncoder.encode(json);\n            }\n            catch (e) {\n                throw ConnectError.from(e, Code.Internal);\n            }\n        },\n    };\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Regular Expression that matches any valid Connect Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeRegExp = /^application\\/(connect\\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;\n/**\n * Regular Expression that matches a Connect unary Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeUnaryRegExp = /^application\\/(?:json(?:; ?charset=utf-?8)?|proto)$/i;\n/**\n * Regular Expression that matches a Connect streaming Content-Type header value.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const contentTypeStreamRegExp = /^application\\/connect\\+?(?:json(?:; ?charset=utf-?8)?|proto)$/i;\nexport const contentTypeUnaryProto = \"application/proto\";\nexport const contentTypeUnaryJson = \"application/json\";\nexport const contentTypeStreamProto = \"application/connect+proto\";\nexport const contentTypeStreamJson = \"application/connect+json\";\nconst encodingProto = \"proto\";\nconst encodingJson = \"json\";\n/**\n * Parse a Connect Content-Type header.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function parseContentType(contentType) {\n    const match = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);\n    if (!match) {\n        return undefined;\n    }\n    const stream = !!match[1];\n    const binary = !!match[3];\n    return { stream, binary };\n}\n/**\n * Parse a Connect Get encoding query parameter.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function parseEncodingQuery(encoding) {\n    switch (encoding) {\n        case encodingProto:\n            return { stream: false, binary: true };\n        case encodingJson:\n            return { stream: false, binary: false };\n        default:\n            return undefined;\n    }\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { protoBase64 } from \"@bufbuild/protobuf\";\nimport { Code } from \"../code.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { codeFromString, codeToString } from \"./code-string.js\";\n/**\n * Parse a Connect error from a JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorFromJson(jsonValue, metadata, fallback) {\n    if (metadata) {\n        new Headers(metadata).forEach((value, key) => fallback.metadata.append(key, value));\n    }\n    if (typeof jsonValue !== \"object\" ||\n        jsonValue == null ||\n        Array.isArray(jsonValue) ||\n        !(\"code\" in jsonValue) ||\n        typeof jsonValue.code !== \"string\") {\n        throw fallback;\n    }\n    const code = codeFromString(jsonValue.code);\n    if (code === undefined) {\n        throw fallback;\n    }\n    const message = jsonValue.message;\n    if (message != null && typeof message !== \"string\") {\n        throw fallback;\n    }\n    const error = new ConnectError(message !== null && message !== void 0 ? message : \"\", code, metadata);\n    if (\"details\" in jsonValue && Array.isArray(jsonValue.details)) {\n        for (const detail of jsonValue.details) {\n            if (detail === null ||\n                typeof detail != \"object\" ||\n                Array.isArray(detail) ||\n                typeof detail.type != \"string\" ||\n                typeof detail.value != \"string\" ||\n                (\"debug\" in detail && typeof detail.debug != \"object\")) {\n                throw fallback;\n            }\n            try {\n                error.details.push({\n                    type: detail.type,\n                    value: protoBase64.dec(detail.value),\n                    debug: detail.debug,\n                });\n            }\n            catch (e) {\n                throw fallback;\n            }\n        }\n    }\n    return error;\n}\n/**\n * Parse a Connect error from a serialized JSON value.\n * Will return a ConnectError, and throw the provided fallback if parsing failed.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorFromJsonBytes(bytes, metadata, fallback) {\n    let jsonValue;\n    try {\n        jsonValue = JSON.parse(new TextDecoder().decode(bytes));\n    }\n    catch (e) {\n        throw fallback;\n    }\n    return errorFromJson(jsonValue, metadata, fallback);\n}\n/**\n * Serialize the given error to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation in the \"debug\" key if the detail uses\n * google.protobuf.Any. If serialization of the \"debug\" value fails, it\n * is silently disregarded.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorToJson(error, jsonWriteOptions) {\n    const o = {\n        code: codeToString(error.code),\n    };\n    if (error.rawMessage.length > 0) {\n        o.message = error.rawMessage;\n    }\n    if (error.details.length > 0) {\n        o.details = error.details\n            .map((value) => {\n            if (\"getType\" in value) {\n                const i = {\n                    type: value.getType().typeName,\n                    value: value.toBinary(),\n                };\n                try {\n                    i.debug = value.toJson(jsonWriteOptions);\n                }\n                catch (e) {\n                    // We deliberately ignore errors that may occur when serializing\n                    // a message to JSON (the message contains an Any).\n                    // The rationale is that we are only trying to provide optional\n                    // debug information.\n                }\n                return i;\n            }\n            return value;\n        })\n            .map((_a) => {\n            var { value } = _a, rest = __rest(_a, [\"value\"]);\n            return (Object.assign(Object.assign({}, rest), { value: protoBase64.enc(value) }));\n        });\n    }\n    return o;\n}\n/**\n * Serialize the given error to JSON. This calls errorToJson(), but stringifies\n * the result, and converts it into a UInt8Array.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function errorToJsonBytes(error, jsonWriteOptions) {\n    const textEncoder = new TextEncoder();\n    try {\n        const jsonObject = errorToJson(error, jsonWriteOptions);\n        const jsonString = JSON.stringify(jsonObject);\n        return textEncoder.encode(jsonString);\n    }\n    catch (e) {\n        const m = e instanceof Error ? e.message : String(e);\n        throw new ConnectError(`failed to serialize Connect Error: ${m}`, Code.Internal);\n    }\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { errorFromJson, errorToJson } from \"./error-json.js\";\nimport { appendHeaders } from \"../http-headers.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * endStreamFlag indicates that the data in a EnvelopedMessage\n * is a EndStreamResponse of the Connect protocol.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const endStreamFlag = 0b00000010;\n/**\n * Parse an EndStreamResponse of the Connect protocol.\n * Throws a ConnectError on malformed input.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function endStreamFromJson(data) {\n    const parseErr = new ConnectError(\"invalid end stream\", Code.InvalidArgument);\n    let jsonValue;\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        jsonValue = JSON.parse(typeof data == \"string\" ? data : new TextDecoder().decode(data));\n    }\n    catch (e) {\n        throw parseErr;\n    }\n    if (typeof jsonValue != \"object\" ||\n        jsonValue == null ||\n        Array.isArray(jsonValue)) {\n        throw parseErr;\n    }\n    const metadata = new Headers();\n    if (\"metadata\" in jsonValue) {\n        if (typeof jsonValue.metadata != \"object\" ||\n            jsonValue.metadata == null ||\n            Array.isArray(jsonValue.metadata)) {\n            throw parseErr;\n        }\n        for (const [key, values] of Object.entries(jsonValue.metadata)) {\n            if (!Array.isArray(values) ||\n                values.some((value) => typeof value != \"string\")) {\n                throw parseErr;\n            }\n            for (const value of values) {\n                metadata.append(key, value);\n            }\n        }\n    }\n    const error = \"error\" in jsonValue\n        ? errorFromJson(jsonValue.error, metadata, parseErr)\n        : undefined;\n    return { metadata, error };\n}\n/**\n * Serialize the given EndStreamResponse to JSON.\n *\n * The JSON serialization options are required to produce the optional\n * human-readable representation of error details if the detail uses\n * google.protobuf.Any.\n *\n * See https://connectrpc.com/docs/protocol#error-end-stream\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function endStreamToJson(metadata, error, jsonWriteOptions) {\n    const es = {};\n    if (error !== undefined) {\n        es.error = errorToJson(error, jsonWriteOptions);\n        metadata = appendHeaders(metadata, error.metadata);\n    }\n    let hasMetadata = false;\n    const md = {};\n    metadata.forEach((value, key) => {\n        hasMetadata = true;\n        md[key] = [value];\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (hasMetadata) {\n        es.metadata = md;\n    }\n    return es;\n}\n/**\n * Create a Serialization object that serializes a Connect EndStreamResponse.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function createEndStreamSerialization(options) {\n    const textEncoder = new TextEncoder();\n    return {\n        serialize(data) {\n            try {\n                const jsonObject = endStreamToJson(data.metadata, data.error, options);\n                const jsonString = JSON.stringify(jsonObject);\n                return textEncoder.encode(jsonString);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`failed to serialize EndStreamResponse: ${m}`, Code.Internal);\n            }\n        },\n        parse(data) {\n            try {\n                return endStreamFromJson(data);\n            }\n            catch (e) {\n                const m = e instanceof Error ? e.message : String(e);\n                throw new ConnectError(`failed to parse EndStreamResponse: ${m}`, Code.InvalidArgument);\n            }\n        },\n    };\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport const headerContentType = \"Content-Type\";\nexport const headerUnaryContentLength = \"Content-Length\";\nexport const headerUnaryEncoding = \"Content-Encoding\";\nexport const headerStreamEncoding = \"Connect-Content-Encoding\";\nexport const headerUnaryAcceptEncoding = \"Accept-Encoding\";\nexport const headerStreamAcceptEncoding = \"Connect-Accept-Encoding\";\nexport const headerTimeout = \"Connect-Timeout-Ms\";\nexport const headerProtocolVersion = \"Connect-Protocol-Version\";\nexport const headerUserAgent = \"User-Agent\";\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Code } from \"../code.js\";\n/**\n * Determine the Connect error code for the given HTTP status code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeFromHttpStatus(httpStatus) {\n    switch (httpStatus) {\n        case 400: // Bad Request\n            return Code.InvalidArgument;\n        case 401: // Unauthorized\n            return Code.Unauthenticated;\n        case 403: // Forbidden\n            return Code.PermissionDenied;\n        case 404: // Not Found\n            return Code.Unimplemented;\n        case 408: // Request Timeout\n            return Code.DeadlineExceeded;\n        case 409: // Conflict\n            return Code.Aborted;\n        case 412: // Precondition Failed\n            return Code.FailedPrecondition;\n        case 413: // Payload Too Large\n            return Code.ResourceExhausted;\n        case 415: // Unsupported Media Type\n            return Code.Internal;\n        case 429: // Too Many Requests\n            return Code.Unavailable;\n        case 431: // Request Header Fields Too Large\n            return Code.ResourceExhausted;\n        case 502: // Bad Gateway\n            return Code.Unavailable;\n        case 503: // Service Unavailable\n            return Code.Unavailable;\n        case 504: // Gateway Timeout\n            return Code.Unavailable;\n        default:\n            return Code.Unknown;\n    }\n}\n/**\n * Returns a HTTP status code for the given Connect code.\n * See https://connectrpc.com/docs/protocol#error-codes\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function codeToHttpStatus(code) {\n    switch (code) {\n        case Code.Canceled:\n            return 408; // Request Timeout\n        case Code.Unknown:\n            return 500; // Internal Server Error\n        case Code.InvalidArgument:\n            return 400; // Bad Request\n        case Code.DeadlineExceeded:\n            return 408; // Request Timeout\n        case Code.NotFound:\n            return 404; // Not Found\n        case Code.AlreadyExists:\n            return 409; // Conflict\n        case Code.PermissionDenied:\n            return 403; // Forbidden\n        case Code.ResourceExhausted:\n            return 429; // Too Many Requests\n        case Code.FailedPrecondition:\n            return 412; // Precondition Failed\n        case Code.Aborted:\n            return 409; // Conflict\n        case Code.OutOfRange:\n            return 400; // Bad Request\n        case Code.Unimplemented:\n            return 404; // Not Found\n        case Code.Internal:\n            return 500; // Internal Server Error\n        case Code.Unavailable:\n            return 503; // Service Unavailable\n        case Code.DataLoss:\n            return 500; // Internal Server Error\n        case Code.Unauthenticated:\n            return 401; // Unauthorized\n        default:\n            return 500; // same as CodeUnknown\n    }\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function demuxes headers and trailers into two separate Headers\n * objects.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerDemux(header) {\n    const h = new Headers(), t = new Headers();\n    header.forEach((value, key) => {\n        if (key.toLowerCase().startsWith(\"trailer-\")) {\n            t.set(key.substring(8), value);\n        }\n        else {\n            h.set(key, value);\n        }\n    });\n    return [h, t];\n}\n/**\n * In unary RPCs, Connect transports trailing metadata as response header\n * fields, prefixed with \"trailer-\".\n *\n * This function muxes a header and a trailer into a single Headers object.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function trailerMux(header, trailer) {\n    const h = new Headers(header);\n    trailer.forEach((value, key) => {\n        h.set(`trailer-${key}`, value);\n    });\n    return h;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { headerProtocolVersion } from \"./headers.js\";\nimport { paramConnectVersion } from \"./query-params.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { Code } from \"../code.js\";\n/**\n * The only know value for the header Connect-Protocol-Version.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport const protocolVersion = \"1\";\n/**\n * Requires the Connect-Protocol-Version header to be present with the expected\n * value. Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requireProtocolVersionHeader(requestHeader) {\n    const v = requestHeader.get(headerProtocolVersion);\n    if (v === null) {\n        throw new ConnectError(`missing required header: set ${headerProtocolVersion} to \"${protocolVersion}\"`, Code.InvalidArgument);\n    }\n    else if (v !== protocolVersion) {\n        throw new ConnectError(`${headerProtocolVersion} must be \"${protocolVersion}\": got \"${v}\"`, Code.InvalidArgument);\n    }\n}\n/**\n * Requires the connect query parameter to be present with the expected value.\n * Raises a ConnectError with Code.InvalidArgument otherwise.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requireProtocolVersionParam(queryParams) {\n    const v = queryParams.get(paramConnectVersion);\n    if (v === null) {\n        throw new ConnectError(`missing required parameter: set ${paramConnectVersion} to \"v${protocolVersion}\"`, Code.InvalidArgument);\n    }\n    else if (v !== `v${protocolVersion}`) {\n        throw new ConnectError(`${paramConnectVersion} must be \"v${protocolVersion}\": got \"${v}\"`, Code.InvalidArgument);\n    }\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { MethodKind } from \"@bufbuild/protobuf\";\nimport { headerContentType, headerStreamAcceptEncoding, headerStreamEncoding, headerUnaryAcceptEncoding, headerUnaryEncoding, headerTimeout, headerProtocolVersion, headerUserAgent, } from \"./headers.js\";\nimport { protocolVersion } from \"./version.js\";\nimport { contentTypeStreamJson, contentTypeStreamProto, contentTypeUnaryJson, contentTypeUnaryProto, } from \"./content-type.js\";\n/**\n * Creates headers for a Connect request.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent) {\n    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});\n    if (timeoutMs !== undefined) {\n        result.set(headerTimeout, `${timeoutMs}`);\n    }\n    result.set(headerContentType, methodKind == MethodKind.Unary\n        ? useBinaryFormat\n            ? contentTypeUnaryProto\n            : contentTypeUnaryJson\n        : useBinaryFormat\n            ? contentTypeStreamProto\n            : contentTypeStreamJson);\n    result.set(headerProtocolVersion, protocolVersion);\n    if (setUserAgent) {\n        result.set(headerUserAgent, \"connect-es/1.4.0\");\n    }\n    return result;\n}\n/**\n * Creates headers for a Connect request with compression.\n *\n * Note that we always set the Content-Encoding header for unary methods.\n * It is up to the caller to decide whether to apply compression - and remove\n * the header if compression is not used, for example because the payload is\n * too small to make compression effective.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function requestHeaderWithCompression(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, acceptCompression, sendCompression, setUserAgent) {\n    const result = requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders, setUserAgent);\n    if (sendCompression != null) {\n        const name = methodKind == MethodKind.Unary\n            ? headerUnaryEncoding\n            : headerStreamEncoding;\n        result.set(name, sendCompression.name);\n    }\n    if (acceptCompression.length > 0) {\n        const name = methodKind == MethodKind.Unary\n            ? headerUnaryAcceptEncoding\n            : headerStreamAcceptEncoding;\n        result.set(name, acceptCompression.map((c) => c.name).join(\",\"));\n    }\n    return result;\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { MethodKind } from \"@bufbuild/protobuf\";\nimport { Code } from \"../code.js\";\nimport { codeFromHttpStatus } from \"./http-status.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { parseContentType } from \"./content-type.js\";\nimport { headerStreamEncoding, headerUnaryEncoding } from \"./headers.js\";\n/**\n * Validates response status and header for the Connect protocol.\n * Throws a ConnectError if the header indicates an error, or if\n * the content type is unexpected, with the following exception:\n * For unary RPCs with an HTTP error status, this returns an error\n * derived from the HTTP status instead of throwing it, giving an\n * implementation a chance to parse a Connect error from the wire.\n *\n * @private Internal code, does not follow semantic versioning.\n */\nexport function validateResponse(methodKind, status, headers) {\n    const mimeType = headers.get(\"Content-Type\");\n    const parsedType = parseContentType(mimeType);\n    if (status !== 200) {\n        const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);\n        // If parsedType is defined and it is not binary, then this is a unary JSON response\n        if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {\n            return { isUnaryError: true, unaryError: errorFromStatus };\n        }\n        throw errorFromStatus;\n    }\n    return { isUnaryError: false };\n}\n/**\n * Validates response status and header for the Connect protocol.\n * This function is identical to validateResponse(), but also verifies\n * that a given encoding header is acceptable.\n *\n * @private\n */\nexport function validateResponseWithCompression(methodKind, acceptCompression, status, headers) {\n    let compression;\n    const encoding = headers.get(methodKind == MethodKind.Unary ? headerUnaryEncoding : headerStreamEncoding);\n    if (encoding != null && encoding.toLowerCase() !== \"identity\") {\n        compression = acceptCompression.find((c) => c.name === encoding);\n        if (!compression) {\n            throw new ConnectError(`unsupported response encoding \"${encoding}\"`, Code.InvalidArgument, headers);\n        }\n    }\n    return Object.assign({ compression }, validateResponse(methodKind, status, headers));\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { Message, protoBase64 } from \"@bufbuild/protobuf\";\nimport { headerContentType, headerProtocolVersion, headerUnaryAcceptEncoding, headerUnaryContentLength, headerUnaryEncoding, } from \"./headers.js\";\nimport { protocolVersion } from \"./version.js\";\nconst contentTypePrefix = \"application/\";\nfunction encodeMessageForUrl(message, useBase64) {\n    if (useBase64) {\n        // TODO(jchadwick-buf): Three regex replaces seems excessive.\n        // Can we make protoBase64.enc more flexible?\n        return protoBase64\n            .enc(message)\n            .replace(/\\+/g, \"-\")\n            .replace(/\\//g, \"_\")\n            .replace(/=+$/, \"\");\n    }\n    else {\n        return encodeURIComponent(new TextDecoder().decode(message));\n    }\n}\n/**\n * @private Internal code, does not follow semantic versioning.\n */\nexport function transformConnectPostToGetRequest(request, message, useBase64) {\n    let query = `?connect=v${protocolVersion}`;\n    const contentType = request.header.get(headerContentType);\n    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {\n        query +=\n            \"&encoding=\" +\n                encodeURIComponent(contentType.slice(contentTypePrefix.length));\n    }\n    const compression = request.header.get(headerUnaryEncoding);\n    if (compression !== null && compression !== \"identity\") {\n        query += \"&compression=\" + encodeURIComponent(compression);\n        // Force base64 for compressed payloads.\n        useBase64 = true;\n    }\n    if (useBase64) {\n        query += \"&base64=1\";\n    }\n    query += \"&message=\" + encodeMessageForUrl(message, useBase64);\n    const url = request.url + query;\n    // Omit headers that are not used for unary GET requests.\n    const header = new Headers(request.header);\n    [\n        headerProtocolVersion,\n        headerContentType,\n        headerUnaryContentLength,\n        headerUnaryEncoding,\n        headerUnaryAcceptEncoding,\n    ].forEach((h) => header.delete(h));\n    return Object.assign(Object.assign({}, request), { init: Object.assign(Object.assign({}, request.init), { method: \"GET\" }), url,\n        header });\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { applyInterceptors } from \"../interceptor.js\";\nimport { ConnectError } from \"../connect-error.js\";\nimport { createDeadlineSignal, createLinkedAbortController, getAbortSignalReason, } from \"./signals.js\";\nimport { normalize, normalizeIterable } from \"./normalize.js\";\n/**\n * Runs a unary method with the given interceptors. Note that this function\n * is only used when implementing a Transport.\n */\nexport function runUnaryCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalize(opt.req.method.I, opt.req.message), signal });\n    return next(req).then((res) => {\n        done();\n        return res;\n    }, abort);\n}\n/**\n * Runs a server-streaming method with the given interceptors. Note that this\n * function is only used when implementing a Transport.\n */\nexport function runStreamingCall(opt) {\n    const next = applyInterceptors(opt.next, opt.interceptors);\n    const [signal, abort, done] = setupSignal(opt);\n    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });\n    let doneCalled = false;\n    // Call return on the request iterable to indicate\n    // that we will no longer consume it and it should\n    // cleanup any allocated resources.\n    signal.addEventListener(\"abort\", function () {\n        var _a, _b;\n        const it = opt.req.message[Symbol.asyncIterator]();\n        // If the signal is aborted due to an error, we want to throw\n        // the error to the request iterator.\n        if (!doneCalled) {\n            (_a = it.throw) === null || _a === void 0 ? void 0 : _a.call(it, this.reason).catch(() => {\n                // throw returns a promise, which we don't care about.\n                //\n                // Uncaught promises are thrown at sometime/somewhere by the event loop,\n                // this is to ensure error is caught and ignored.\n            });\n        }\n        (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {\n            // return returns a promise, which we don't care about.\n            //\n            // Uncaught promises are thrown at sometime/somewhere by the event loop,\n            // this is to ensure error is caught and ignored.\n        });\n    });\n    return next(req).then((res) => {\n        return Object.assign(Object.assign({}, res), { message: {\n                [Symbol.asyncIterator]() {\n                    const it = res.message[Symbol.asyncIterator]();\n                    return {\n                        next() {\n                            return it.next().then((r) => {\n                                if (r.done == true) {\n                                    doneCalled = true;\n                                    done();\n                                }\n                                return r;\n                            }, abort);\n                        },\n                        // We deliberately omit throw/return.\n                    };\n                },\n            } });\n    }, abort);\n}\n/**\n * Create an AbortSignal for Transport implementations. The signal is available\n * in UnaryRequest and StreamingRequest, and is triggered when the call is\n * aborted (via a timeout or explicit cancellation), errored (e.g. when reading\n * an error from the server from the wire), or finished successfully.\n *\n * Transport implementations can pass the signal to HTTP clients to ensure that\n * there are no unused connections leak.\n *\n * Returns a tuple:\n * [0]: The signal, which is also aborted if the optional deadline is reached.\n * [1]: Function to call if the Transport encountered an error.\n * [2]: Function to call if the Transport finished without an error.\n */\nfunction setupSignal(opt) {\n    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);\n    const controller = createLinkedAbortController(opt.signal, signal);\n    return [\n        controller.signal,\n        function abort(reason) {\n            // We peek at the deadline signal because fetch() will throw an error on\n            // abort that discards the signal reason.\n            const e = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);\n            controller.abort(e);\n            cleanup();\n            return Promise.reject(e);\n        },\n        function done() {\n            cleanup();\n            controller.abort();\n        },\n    ];\n}\n", "// Copyright Exafunction, Inc.\n\n// @generated by protoc-gen-es v1.4.2 with parameter \"target=ts\"\n// @generated from file exa/language_server_pb/language_server.proto (package exa.language_server_pb, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3, protoInt64 } from \"@bufbuild/protobuf\";\nimport { Completion, CompletionSource, EditorOptions, ExperimentKey, Language, Metadata } from \"../codeium_common_pb/codeium_common_pb.js\";\n\n/**\n * @generated from enum exa.language_server_pb.CodeiumState\n */\nexport enum CodeiumState {\n  /**\n   * @generated from enum value: CODEIUM_STATE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: CODEIUM_STATE_INACTIVE = 1;\n   */\n  INACTIVE = 1,\n\n  /**\n   * @generated from enum value: CODEIUM_STATE_PROCESSING = 2;\n   */\n  PROCESSING = 2,\n\n  /**\n   * @generated from enum value: CODEIUM_STATE_SUCCESS = 3;\n   */\n  SUCCESS = 3,\n\n  /**\n   * @generated from enum value: CODEIUM_STATE_WARNING = 4;\n   */\n  WARNING = 4,\n\n  /**\n   * @generated from enum value: CODEIUM_STATE_ERROR = 5;\n   */\n  ERROR = 5,\n}\n// Retrieve enum metadata with: proto3.getEnumType(CodeiumState)\nproto3.util.setEnumType(CodeiumState, \"exa.language_server_pb.CodeiumState\", [\n  { no: 0, name: \"CODEIUM_STATE_UNSPECIFIED\" },\n  { no: 1, name: \"CODEIUM_STATE_INACTIVE\" },\n  { no: 2, name: \"CODEIUM_STATE_PROCESSING\" },\n  { no: 3, name: \"CODEIUM_STATE_SUCCESS\" },\n  { no: 4, name: \"CODEIUM_STATE_WARNING\" },\n  { no: 5, name: \"CODEIUM_STATE_ERROR\" },\n]);\n\n/**\n * @generated from enum exa.language_server_pb.LineType\n */\nexport enum LineType {\n  /**\n   * @generated from enum value: LINE_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * @generated from enum value: LINE_TYPE_SINGLE = 1;\n   */\n  SINGLE = 1,\n\n  /**\n   * @generated from enum value: LINE_TYPE_MULTI = 2;\n   */\n  MULTI = 2,\n}\n// Retrieve enum metadata with: proto3.getEnumType(LineType)\nproto3.util.setEnumType(LineType, \"exa.language_server_pb.LineType\", [\n  { no: 0, name: \"LINE_TYPE_UNSPECIFIED\" },\n  { no: 1, name: \"LINE_TYPE_SINGLE\" },\n  { no: 2, name: \"LINE_TYPE_MULTI\" },\n]);\n\n/**\n * @generated from enum exa.language_server_pb.CompletionPartType\n */\nexport enum CompletionPartType {\n  /**\n   * @generated from enum value: COMPLETION_PART_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n\n  /**\n   * Single-line completion parts that appear within an existing line of text.\n   *\n   * @generated from enum value: COMPLETION_PART_TYPE_INLINE = 1;\n   */\n  INLINE = 1,\n\n  /**\n   * Possibly multi-line completion parts that appear below an existing line of text.\n   *\n   * @generated from enum value: COMPLETION_PART_TYPE_BLOCK = 2;\n   */\n  BLOCK = 2,\n\n  /**\n   * Like COMPLETION_PART_TYPE_INLINE, but overwrites the existing text.\n   *\n   * @generated from enum value: COMPLETION_PART_TYPE_INLINE_MASK = 3;\n   */\n  INLINE_MASK = 3,\n}\n// Retrieve enum metadata with: proto3.getEnumType(CompletionPartType)\nproto3.util.setEnumType(CompletionPartType, \"exa.language_server_pb.CompletionPartType\", [\n  { no: 0, name: \"COMPLETION_PART_TYPE_UNSPECIFIED\" },\n  { no: 1, name: \"COMPLETION_PART_TYPE_INLINE\" },\n  { no: 2, name: \"COMPLETION_PART_TYPE_BLOCK\" },\n  { no: 3, name: \"COMPLETION_PART_TYPE_INLINE_MASK\" },\n]);\n\n/**\n * @generated from message exa.language_server_pb.MultilineConfig\n */\nexport class MultilineConfig extends Message<MultilineConfig> {\n  /**\n   * Multiline model threshold. 0-1, higher = more single line, lower = more multiline,\n   * 0.0 = only_multiline, default is 0.5\n   *\n   * @generated from field: float threshold = 1;\n   */\n  threshold = 0;\n\n  constructor(data?: PartialMessage<MultilineConfig>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.MultilineConfig\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"threshold\", kind: \"scalar\", T: 2 /* ScalarType.FLOAT */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultilineConfig {\n    return new MultilineConfig().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultilineConfig {\n    return new MultilineConfig().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultilineConfig {\n    return new MultilineConfig().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: MultilineConfig | PlainMessage<MultilineConfig> | undefined, b: MultilineConfig | PlainMessage<MultilineConfig> | undefined): boolean {\n    return proto3.util.equals(MultilineConfig, a, b);\n  }\n}\n\n/**\n * Next ID: 9, Previous field: disable_cache.\n *\n * @generated from message exa.language_server_pb.GetCompletionsRequest\n */\nexport class GetCompletionsRequest extends Message<GetCompletionsRequest> {\n  /**\n   * @generated from field: exa.codeium_common_pb.Metadata metadata = 1;\n   */\n  metadata?: Metadata;\n\n  /**\n   * @generated from field: exa.language_server_pb.Document document = 2;\n   */\n  document?: Document;\n\n  /**\n   * @generated from field: exa.codeium_common_pb.EditorOptions editor_options = 3;\n   */\n  editorOptions?: EditorOptions;\n\n  /**\n   * @generated from field: repeated exa.language_server_pb.Document other_documents = 5;\n   */\n  otherDocuments: Document[] = [];\n\n  /**\n   * @generated from field: exa.language_server_pb.ExperimentConfig experiment_config = 7;\n   */\n  experimentConfig?: ExperimentConfig;\n\n  /**\n   * @generated from field: string model_name = 10;\n   */\n  modelName = \"\";\n\n  /**\n   * @generated from field: exa.language_server_pb.MultilineConfig multiline_config = 13;\n   */\n  multilineConfig?: MultilineConfig;\n\n  constructor(data?: PartialMessage<GetCompletionsRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.GetCompletionsRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"metadata\", kind: \"message\", T: Metadata },\n    { no: 2, name: \"document\", kind: \"message\", T: Document },\n    { no: 3, name: \"editor_options\", kind: \"message\", T: EditorOptions },\n    { no: 5, name: \"other_documents\", kind: \"message\", T: Document, repeated: true },\n    { no: 7, name: \"experiment_config\", kind: \"message\", T: ExperimentConfig },\n    { no: 10, name: \"model_name\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 13, name: \"multiline_config\", kind: \"message\", T: MultilineConfig },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompletionsRequest {\n    return new GetCompletionsRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompletionsRequest {\n    return new GetCompletionsRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompletionsRequest {\n    return new GetCompletionsRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetCompletionsRequest | PlainMessage<GetCompletionsRequest> | undefined, b: GetCompletionsRequest | PlainMessage<GetCompletionsRequest> | undefined): boolean {\n    return proto3.util.equals(GetCompletionsRequest, a, b);\n  }\n}\n\n/**\n * Next ID: 5, Previous field: latency_info.\n *\n * @generated from message exa.language_server_pb.GetCompletionsResponse\n */\nexport class GetCompletionsResponse extends Message<GetCompletionsResponse> {\n  /**\n   * @generated from field: exa.language_server_pb.State state = 1;\n   */\n  state?: State;\n\n  /**\n   * @generated from field: repeated exa.language_server_pb.CompletionItem completion_items = 2;\n   */\n  completionItems: CompletionItem[] = [];\n\n  constructor(data?: PartialMessage<GetCompletionsResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.GetCompletionsResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"state\", kind: \"message\", T: State },\n    { no: 2, name: \"completion_items\", kind: \"message\", T: CompletionItem, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCompletionsResponse {\n    return new GetCompletionsResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCompletionsResponse {\n    return new GetCompletionsResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCompletionsResponse {\n    return new GetCompletionsResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetCompletionsResponse | PlainMessage<GetCompletionsResponse> | undefined, b: GetCompletionsResponse | PlainMessage<GetCompletionsResponse> | undefined): boolean {\n    return proto3.util.equals(GetCompletionsResponse, a, b);\n  }\n}\n\n/**\n * Next ID: 3, Previous field: completion_id.\n *\n * @generated from message exa.language_server_pb.AcceptCompletionRequest\n */\nexport class AcceptCompletionRequest extends Message<AcceptCompletionRequest> {\n  /**\n   * @generated from field: exa.codeium_common_pb.Metadata metadata = 1;\n   */\n  metadata?: Metadata;\n\n  /**\n   * @generated from field: string completion_id = 2;\n   */\n  completionId = \"\";\n\n  constructor(data?: PartialMessage<AcceptCompletionRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.AcceptCompletionRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"metadata\", kind: \"message\", T: Metadata },\n    { no: 2, name: \"completion_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptCompletionRequest {\n    return new AcceptCompletionRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptCompletionRequest {\n    return new AcceptCompletionRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptCompletionRequest {\n    return new AcceptCompletionRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AcceptCompletionRequest | PlainMessage<AcceptCompletionRequest> | undefined, b: AcceptCompletionRequest | PlainMessage<AcceptCompletionRequest> | undefined): boolean {\n    return proto3.util.equals(AcceptCompletionRequest, a, b);\n  }\n}\n\n/**\n * Next ID: 1, Previous field: N/A.\n *\n * @generated from message exa.language_server_pb.AcceptCompletionResponse\n */\nexport class AcceptCompletionResponse extends Message<AcceptCompletionResponse> {\n  constructor(data?: PartialMessage<AcceptCompletionResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.AcceptCompletionResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptCompletionResponse {\n    return new AcceptCompletionResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptCompletionResponse {\n    return new AcceptCompletionResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptCompletionResponse {\n    return new AcceptCompletionResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: AcceptCompletionResponse | PlainMessage<AcceptCompletionResponse> | undefined, b: AcceptCompletionResponse | PlainMessage<AcceptCompletionResponse> | undefined): boolean {\n    return proto3.util.equals(AcceptCompletionResponse, a, b);\n  }\n}\n\n/**\n * Next ID: 1, Previous field: N/A.\n *\n * @generated from message exa.language_server_pb.GetAuthTokenRequest\n */\nexport class GetAuthTokenRequest extends Message<GetAuthTokenRequest> {\n  constructor(data?: PartialMessage<GetAuthTokenRequest>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.GetAuthTokenRequest\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthTokenRequest {\n    return new GetAuthTokenRequest().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthTokenRequest {\n    return new GetAuthTokenRequest().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthTokenRequest {\n    return new GetAuthTokenRequest().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetAuthTokenRequest | PlainMessage<GetAuthTokenRequest> | undefined, b: GetAuthTokenRequest | PlainMessage<GetAuthTokenRequest> | undefined): boolean {\n    return proto3.util.equals(GetAuthTokenRequest, a, b);\n  }\n}\n\n/**\n * Next ID: 3, Previous field: uuid.\n *\n * @generated from message exa.language_server_pb.GetAuthTokenResponse\n */\nexport class GetAuthTokenResponse extends Message<GetAuthTokenResponse> {\n  /**\n   * @generated from field: string auth_token = 1;\n   */\n  authToken = \"\";\n\n  /**\n   * @generated from field: string uuid = 2;\n   */\n  uuid = \"\";\n\n  constructor(data?: PartialMessage<GetAuthTokenResponse>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.GetAuthTokenResponse\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"auth_token\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"uuid\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthTokenResponse {\n    return new GetAuthTokenResponse().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthTokenResponse {\n    return new GetAuthTokenResponse().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthTokenResponse {\n    return new GetAuthTokenResponse().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: GetAuthTokenResponse | PlainMessage<GetAuthTokenResponse> | undefined, b: GetAuthTokenResponse | PlainMessage<GetAuthTokenResponse> | undefined): boolean {\n    return proto3.util.equals(GetAuthTokenResponse, a, b);\n  }\n}\n\n/**\n * @generated from message exa.language_server_pb.DocumentPosition\n */\nexport class DocumentPosition extends Message<DocumentPosition> {\n  /**\n   * 0-indexed. Measured in UTF-8 bytes.\n   *\n   * @generated from field: uint64 row = 1;\n   */\n  row = protoInt64.zero;\n\n  /**\n   * 0-indexed. Measured in UTF-8 bytes.\n   *\n   * @generated from field: uint64 col = 2;\n   */\n  col = protoInt64.zero;\n\n  constructor(data?: PartialMessage<DocumentPosition>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.DocumentPosition\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"row\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"col\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentPosition {\n    return new DocumentPosition().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentPosition {\n    return new DocumentPosition().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentPosition {\n    return new DocumentPosition().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: DocumentPosition | PlainMessage<DocumentPosition> | undefined, b: DocumentPosition | PlainMessage<DocumentPosition> | undefined): boolean {\n    return proto3.util.equals(DocumentPosition, a, b);\n  }\n}\n\n/**\n * Next ID: 9, Previous field: cursor_position.\n *\n * @generated from message exa.language_server_pb.Document\n */\nexport class Document extends Message<Document> {\n  /**\n   * @generated from field: string absolute_path = 1;\n   */\n  absolutePath = \"\";\n\n  /**\n   * Path relative to the root of the workspace.\n   *\n   * @generated from field: string relative_path = 2;\n   */\n  relativePath = \"\";\n\n  /**\n   * @generated from field: string text = 3;\n   */\n  text = \"\";\n\n  /**\n   * Language ID provided by the editor.\n   *\n   * @generated from field: string editor_language = 4;\n   */\n  editorLanguage = \"\";\n\n  /**\n   * Language enum standardized across editors.\n   *\n   * @generated from field: exa.codeium_common_pb.Language language = 5;\n   */\n  language = Language.UNSPECIFIED;\n\n  /**\n   * Measured in number of UTF-8 bytes.\n   *\n   * @generated from field: uint64 cursor_offset = 6;\n   */\n  cursorOffset = protoInt64.zero;\n\n  /**\n   * May be present instead of cursor_offset.\n   *\n   * @generated from field: exa.language_server_pb.DocumentPosition cursor_position = 8;\n   */\n  cursorPosition?: DocumentPosition;\n\n  /**\n   * \\n or \\r\\n, if known.\n   *\n   * @generated from field: string line_ending = 7;\n   */\n  lineEnding = \"\";\n\n  constructor(data?: PartialMessage<Document>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.Document\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"absolute_path\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"relative_path\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"editor_language\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"language\", kind: \"enum\", T: proto3.getEnumType(Language) },\n    { no: 6, name: \"cursor_offset\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 8, name: \"cursor_position\", kind: \"message\", T: DocumentPosition },\n    { no: 7, name: \"line_ending\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document {\n    return new Document().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document {\n    return new Document().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document {\n    return new Document().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean {\n    return proto3.util.equals(Document, a, b);\n  }\n}\n\n/**\n * @generated from message exa.language_server_pb.ExperimentConfig\n */\nexport class ExperimentConfig extends Message<ExperimentConfig> {\n  /**\n   * @generated from field: repeated exa.codeium_common_pb.ExperimentKey force_enable_experiments = 1;\n   */\n  forceEnableExperiments: ExperimentKey[] = [];\n\n  constructor(data?: PartialMessage<ExperimentConfig>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.ExperimentConfig\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"force_enable_experiments\", kind: \"enum\", T: proto3.getEnumType(ExperimentKey), repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExperimentConfig {\n    return new ExperimentConfig().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExperimentConfig {\n    return new ExperimentConfig().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExperimentConfig {\n    return new ExperimentConfig().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: ExperimentConfig | PlainMessage<ExperimentConfig> | undefined, b: ExperimentConfig | PlainMessage<ExperimentConfig> | undefined): boolean {\n    return proto3.util.equals(ExperimentConfig, a, b);\n  }\n}\n\n/**\n * Next ID: 3, Previous field: message.\n *\n * @generated from message exa.language_server_pb.State\n */\nexport class State extends Message<State> {\n  /**\n   * @generated from field: exa.language_server_pb.CodeiumState state = 1;\n   */\n  state = CodeiumState.UNSPECIFIED;\n\n  /**\n   * @generated from field: string message = 2;\n   */\n  message = \"\";\n\n  constructor(data?: PartialMessage<State>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.State\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"state\", kind: \"enum\", T: proto3.getEnumType(CodeiumState) },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {\n    return new State().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {\n    return new State().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {\n    return new State().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {\n    return proto3.util.equals(State, a, b);\n  }\n}\n\n/**\n * Next ID: 5, Previous field: end_position.\n *\n * @generated from message exa.language_server_pb.Range\n */\nexport class Range extends Message<Range> {\n  /**\n   * @generated from field: uint64 start_offset = 1;\n   */\n  startOffset = protoInt64.zero;\n\n  /**\n   * @generated from field: uint64 end_offset = 2;\n   */\n  endOffset = protoInt64.zero;\n\n  /**\n   * @generated from field: exa.language_server_pb.DocumentPosition start_position = 3;\n   */\n  startPosition?: DocumentPosition;\n\n  /**\n   * @generated from field: exa.language_server_pb.DocumentPosition end_position = 4;\n   */\n  endPosition?: DocumentPosition;\n\n  constructor(data?: PartialMessage<Range>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.Range\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"start_offset\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 2, name: \"end_offset\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"start_position\", kind: \"message\", T: DocumentPosition },\n    { no: 4, name: \"end_position\", kind: \"message\", T: DocumentPosition },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Range {\n    return new Range().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Range {\n    return new Range().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Range {\n    return new Range().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Range | PlainMessage<Range> | undefined, b: Range | PlainMessage<Range> | undefined): boolean {\n    return proto3.util.equals(Range, a, b);\n  }\n}\n\n/**\n * @generated from message exa.language_server_pb.Suffix\n */\nexport class Suffix extends Message<Suffix> {\n  /**\n   * Text to insert after the cursor when accepting the completion.\n   *\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  /**\n   * Cursor position delta (as signed offset) from the end of the inserted\n   * completion (including the suffix).\n   *\n   * @generated from field: int64 delta_cursor_offset = 2;\n   */\n  deltaCursorOffset = protoInt64.zero;\n\n  constructor(data?: PartialMessage<Suffix>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.Suffix\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"delta_cursor_offset\", kind: \"scalar\", T: 3 /* ScalarType.INT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Suffix {\n    return new Suffix().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Suffix {\n    return new Suffix().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Suffix {\n    return new Suffix().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Suffix | PlainMessage<Suffix> | undefined, b: Suffix | PlainMessage<Suffix> | undefined): boolean {\n    return proto3.util.equals(Suffix, a, b);\n  }\n}\n\n/**\n * Represents a contiguous part of the completion text that is not\n * already in the document.\n * Next ID: 4, Previous field: prefix.\n *\n * @generated from message exa.language_server_pb.CompletionPart\n */\nexport class CompletionPart extends Message<CompletionPart> {\n  /**\n   * @generated from field: string text = 1;\n   */\n  text = \"\";\n\n  /**\n   * Offset in the original document where the part starts. For block\n   * parts, this is always the end of the line before the block.\n   *\n   * @generated from field: uint64 offset = 2;\n   */\n  offset = protoInt64.zero;\n\n  /**\n   * @generated from field: exa.language_server_pb.CompletionPartType type = 3;\n   */\n  type = CompletionPartType.UNSPECIFIED;\n\n  /**\n   * The section of the original line that came before this part. Only valid for\n   * COMPLETION_PART_TYPE_INLINE.\n   *\n   * @generated from field: string prefix = 4;\n   */\n  prefix = \"\";\n\n  /**\n   * In the case of COMPLETION_PART_TYPE_BLOCK, represents the line it is below.\n   *\n   * @generated from field: uint64 line = 5;\n   */\n  line = protoInt64.zero;\n\n  constructor(data?: PartialMessage<CompletionPart>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.CompletionPart\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"text\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"offset\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n    { no: 3, name: \"type\", kind: \"enum\", T: proto3.getEnumType(CompletionPartType) },\n    { no: 4, name: \"prefix\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 5, name: \"line\", kind: \"scalar\", T: 4 /* ScalarType.UINT64 */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionPart {\n    return new CompletionPart().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionPart {\n    return new CompletionPart().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionPart {\n    return new CompletionPart().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CompletionPart | PlainMessage<CompletionPart> | undefined, b: CompletionPart | PlainMessage<CompletionPart> | undefined): boolean {\n    return proto3.util.equals(CompletionPart, a, b);\n  }\n}\n\n/**\n * Next ID: 9, Previous field: completion_parts.\n *\n * @generated from message exa.language_server_pb.CompletionItem\n */\nexport class CompletionItem extends Message<CompletionItem> {\n  /**\n   * @generated from field: exa.codeium_common_pb.Completion completion = 1;\n   */\n  completion?: Completion;\n\n  /**\n   * @generated from field: exa.language_server_pb.Suffix suffix = 5;\n   */\n  suffix?: Suffix;\n\n  /**\n   * @generated from field: exa.language_server_pb.Range range = 2;\n   */\n  range?: Range;\n\n  /**\n   * @generated from field: exa.codeium_common_pb.CompletionSource source = 3;\n   */\n  source = CompletionSource.UNSPECIFIED;\n\n  /**\n   * @generated from field: repeated exa.language_server_pb.CompletionPart completion_parts = 8;\n   */\n  completionParts: CompletionPart[] = [];\n\n  constructor(data?: PartialMessage<CompletionItem>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"exa.language_server_pb.CompletionItem\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"completion\", kind: \"message\", T: Completion },\n    { no: 5, name: \"suffix\", kind: \"message\", T: Suffix },\n    { no: 2, name: \"range\", kind: \"message\", T: Range },\n    { no: 3, name: \"source\", kind: \"enum\", T: proto3.getEnumType(CompletionSource) },\n    { no: 8, name: \"completion_parts\", kind: \"message\", T: CompletionPart, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletionItem {\n    return new CompletionItem().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletionItem {\n    return new CompletionItem().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletionItem {\n    return new CompletionItem().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: CompletionItem | PlainMessage<CompletionItem> | undefined, b: CompletionItem | PlainMessage<CompletionItem> | undefined): boolean {\n    return proto3.util.equals(CompletionItem, a, b);\n  }\n}\n\n", "// Copyright Exafunction, Inc.\n\n// @generated by protoc-gen-connect-es v1.1.3 with parameter \"target=ts\"\n// @generated from file exa/language_server_pb/language_server.proto (package exa.language_server_pb, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport { AcceptCompletionRequest, AcceptCompletionResponse, GetAuthTokenRequest, GetAuthTokenResponse, GetCompletionsRequest, GetCompletionsResponse } from \"./language_server_pb.js\";\nimport { MethodKind } from \"@bufbuild/protobuf\";\n\n/**\n * @generated from service exa.language_server_pb.LanguageServerService\n */\nexport const LanguageServerService = {\n  typeName: \"exa.language_server_pb.LanguageServerService\",\n  methods: {\n    /**\n     * @generated from rpc exa.language_server_pb.LanguageServerService.GetCompletions\n     */\n    getCompletions: {\n      name: \"GetCompletions\",\n      I: GetCompletionsRequest,\n      O: GetCompletionsResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc exa.language_server_pb.LanguageServerService.AcceptCompletion\n     */\n    acceptCompletion: {\n      name: \"AcceptCompletion\",\n      I: AcceptCompletionRequest,\n      O: AcceptCompletionResponse,\n      kind: MethodKind.Unary,\n    },\n    /**\n     * @generated from rpc exa.language_server_pb.LanguageServerService.GetAuthToken\n     */\n    getAuthToken: {\n      name: \"GetAuthToken\",\n      I: GetAuthTokenRequest,\n      O: GetAuthTokenResponse,\n      kind: MethodKind.Unary,\n    },\n  }\n} as const;\n\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Asserts that the fetch API is available.\n */\nexport function assertFetchApi() {\n    try {\n        new Headers();\n    }\n    catch (_) {\n        throw new Error(\"connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.\");\n    }\n}\n", "// Copyright 2021-2024 The Connect Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { Message, MethodIdempotency, MethodKind } from \"@bufbuild/protobuf\";\nimport { appendHeaders, createContextValues } from \"@connectrpc/connect\";\nimport { createClientMethodSerializers, createEnvelopeReadableStream, createMethodUrl, getJsonOptions, encodeEnvelope, runStreamingCall, runUnaryCall, } from \"@connectrpc/connect/protocol\";\nimport { endStreamFlag, endStreamFromJson, errorFromJson, requestHeader, trailerDemux, transformConnectPostToGetRequest, validateResponse, } from \"@connectrpc/connect/protocol-connect\";\nimport { assertFetchApi } from \"./assert-fetch-api.js\";\n/**\n * Create a Transport for the Connect protocol, which makes unary and\n * server-streaming methods available to web browsers. It uses the fetch\n * API to make HTTP requests.\n */\nexport function createConnectTransport(options) {\n    var _a;\n    assertFetchApi();\n    const useBinaryFormat = (_a = options.useBinaryFormat) !== null && _a !== void 0 ? _a : false;\n    return {\n        async unary(service, method, signal, timeoutMs, header, message, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            timeoutMs =\n                timeoutMs === undefined\n                    ? options.defaultTimeoutMs\n                    : timeoutMs <= 0\n                        ? undefined\n                        : timeoutMs;\n            return await runUnaryCall({\n                interceptors: options.interceptors,\n                signal,\n                timeoutMs,\n                req: {\n                    stream: false,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header, false),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message,\n                },\n                next: async (req) => {\n                    var _a;\n                    const useGet = options.useHttpGet === true &&\n                        method.idempotency === MethodIdempotency.NoSideEffects;\n                    let body = null;\n                    if (useGet) {\n                        req = transformConnectPostToGetRequest(req, serialize(req.message), useBinaryFormat);\n                    }\n                    else {\n                        body = serialize(req.message);\n                    }\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body }));\n                    const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);\n                    if (isUnaryError) {\n                        throw errorFromJson((await response.json()), appendHeaders(...trailerDemux(response.headers)), unaryError);\n                    }\n                    const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);\n                    return {\n                        stream: false,\n                        service,\n                        method,\n                        header: demuxedHeader,\n                        message: useBinaryFormat\n                            ? parse(new Uint8Array(await response.arrayBuffer()))\n                            : method.O.fromJson((await response.json()), getJsonOptions(options.jsonOptions)),\n                        trailer: demuxedTrailer,\n                    };\n                },\n            });\n        },\n        async stream(service, method, signal, timeoutMs, header, input, contextValues) {\n            var _a;\n            const { serialize, parse } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);\n            function parseResponseBody(body, trailerTarget, header) {\n                return __asyncGenerator(this, arguments, function* parseResponseBody_1() {\n                    const reader = createEnvelopeReadableStream(body).getReader();\n                    let endStreamReceived = false;\n                    for (;;) {\n                        const result = yield __await(reader.read());\n                        if (result.done) {\n                            break;\n                        }\n                        const { flags, data } = result.value;\n                        if ((flags & endStreamFlag) === endStreamFlag) {\n                            endStreamReceived = true;\n                            const endStream = endStreamFromJson(data);\n                            if (endStream.error) {\n                                const error = endStream.error;\n                                header.forEach((value, key) => {\n                                    error.metadata.append(key, value);\n                                });\n                                throw error;\n                            }\n                            endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));\n                            continue;\n                        }\n                        yield yield __await(parse(data));\n                    }\n                    if (!endStreamReceived) {\n                        throw \"missing EndStreamResponse\";\n                    }\n                });\n            }\n            async function createRequestBody(input) {\n                if (method.kind != MethodKind.ServerStreaming) {\n                    throw \"The fetch API does not support streaming request bodies\";\n                }\n                const r = await input[Symbol.asyncIterator]().next();\n                if (r.done == true) {\n                    throw \"missing request message\";\n                }\n                return encodeEnvelope(0, serialize(r.value));\n            }\n            timeoutMs =\n                timeoutMs === undefined\n                    ? options.defaultTimeoutMs\n                    : timeoutMs <= 0\n                        ? undefined\n                        : timeoutMs;\n            return await runStreamingCall({\n                interceptors: options.interceptors,\n                timeoutMs,\n                signal,\n                req: {\n                    stream: true,\n                    service,\n                    method,\n                    url: createMethodUrl(options.baseUrl, service, method),\n                    init: {\n                        method: \"POST\",\n                        credentials: (_a = options.credentials) !== null && _a !== void 0 ? _a : \"same-origin\",\n                        redirect: \"error\",\n                        mode: \"cors\",\n                    },\n                    header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header, false),\n                    contextValues: contextValues !== null && contextValues !== void 0 ? contextValues : createContextValues(),\n                    message: input,\n                },\n                next: async (req) => {\n                    var _a;\n                    const fetch = (_a = options.fetch) !== null && _a !== void 0 ? _a : globalThis.fetch;\n                    const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));\n                    validateResponse(method.kind, fRes.status, fRes.headers);\n                    if (fRes.body === null) {\n                        throw \"missing response body\";\n                    }\n                    const trailer = new Headers();\n                    const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer, fRes.headers) });\n                    return res;\n                },\n            });\n        },\n    };\n}\n", "import { createPromiseClient } from \"@connectrpc/connect\";\nimport { LanguageServerService } from \"./api/proto/exa/language_server_pb/language_server_connect.js\";\nimport { createConnectTransport } from \"@connectrpc/connect-web\";\nimport type {\n  Document,\n  GetCompletionsResponse,\n} from \"./api/proto/exa/language_server_pb/language_server_pb.js\";\nimport type { CodeiumConfig } from \"./config.js\";\nimport type { PartialMessage } from \"@bufbuild/protobuf\";\nimport type { SimpleChangeSpec } from \"./types.js\";\n\n// This is the same as the monaco editor example\nconst transport = createConnectTransport({\n  baseUrl: \"https://web-backend.codeium.com\",\n  useBinaryFormat: true,\n});\n\nconst client = createPromiseClient(LanguageServerService, transport);\n\n/**\n * Note that this won't be available in 'insecure contexts',\n * websites served under HTTP not HTTPS, but those are rare.\n * And it'll work in localhost for development.\n */\nconst sessionId = crypto.randomUUID();\n\nexport async function getCodeiumCompletions({\n  text,\n  cursorOffset,\n  config,\n  otherDocuments,\n}: {\n  text: string;\n  cursorOffset: number;\n  config: CodeiumConfig;\n  otherDocuments: PartialMessage<Document>[];\n}) {\n  return (await client.getCompletions(\n    {\n      metadata: {\n        ideName: \"web\",\n        ideVersion: \"0.0.5\",\n        extensionName: \"@valtown/codemirror-codeium\",\n        extensionVersion: \"1.0.0\",\n        apiKey: config.apiKey,\n        sessionId: sessionId,\n        authSource: config.authSource,\n      },\n      document: {\n        text: text,\n        cursorOffset: BigInt(cursorOffset),\n        language: config.language,\n        // TODO: not sure why we have both language and\n        // editorlanguage\n        // The types don't like this here, but it works.\n        editorLanguage: \"typescript\",\n        lineEnding: \"\\n\",\n      },\n      editorOptions: {\n        tabSize: 2n,\n        insertSpaces: true,\n      },\n      otherDocuments: otherDocuments,\n      multilineConfig: undefined,\n    },\n    {\n      // signal,\n      headers: {\n        Authorization: `Basic ${config.apiKey}-${sessionId}`,\n      },\n    },\n    // TODO: why doesn't this work by default?\n  )) as GetCompletionsResponse;\n}\n\n/**\n * Make the body of the response a bit easier to work with:\n * turn a BigInt into an int in the response so that it can\n * be used with CodeMirror directly, and avoid using some\n * complex kinds of completions.\n */\nexport function completionsToChangeSpec(\n  completions: GetCompletionsResponse,\n): SimpleChangeSpec[][] {\n  return completions.completionItems.map((item) => {\n    /**\n     * Add absolute offsets for the suggestion text insertions\n     * so that we can add matching decorations.\n     */\n    let combinedOffset = 0;\n    return item.completionParts\n      .filter((part) => {\n        // Type 3 overwrites existing text. Maybe we need this eventually,\n        // but not right now and it usually is duplicative.\n        return part.type !== 3;\n      })\n      .map((part): SimpleChangeSpec => {\n        const offset = Number(part.offset);\n        const text = part.type === 2 ? `\\n${part.text}` : part.text;\n        const res: SimpleChangeSpec = {\n          absoluteStartPos: combinedOffset + offset,\n          absoluteEndPos: combinedOffset + offset + text.length,\n          from: offset,\n          to: offset,\n          insert: text,\n        };\n        combinedOffset += text.length;\n        return res;\n      });\n  });\n}\n", "import { Annotation } from \"@codemirror/state\";\n\nexport const copilotEvent = Annotation.define<null>();\n\n/**\n * Annotation that signals to upstream integrations\n * that this transaction should not be included\n * in history or treated otherwise as a user edit.\n */\nexport const copilotIgnore = Annotation.define<null>();\n", "import { Transaction, EditorSelection, ChangeSet } from \"@codemirror/state\";\nimport type { Command, EditorView } from \"@codemirror/view\";\nimport { copilotEvent, copilotIgnore } from \"./annotations.js\";\nimport { completionDecoration } from \"./completionDecoration.js\";\nimport {\n  acceptSuggestion,\n  addSuggestions,\n  clearSuggestion,\n} from \"./effects.js\";\n\n/**\n * Accepting a suggestion: we remove the ghost text, which\n * was not part of CodeMirror history, and then re-add it,\n * making sure that it _is_ added to history, and we remove\n * the Decoration that was making that ghost text look ghostly.\n */\nexport function acceptSuggestionCommand(view: EditorView) {\n  // We delete the ghost text and insert the suggestion.\n  // We also set the cursor to the end of the suggestion.\n  const stateField = view.state.field(completionDecoration);\n\n  if (!stateField) {\n    return false;\n  }\n\n  const reverseReverseChangeSet = stateField.reverseChangeSet?.invert(\n    view.state.doc,\n  );\n\n  // This is removing the previous ghost text.\n  view.dispatch({\n    changes: stateField.reverseChangeSet,\n    effects: acceptSuggestion.of(null),\n    annotations: [\n      // Tell upstream integrations to ignore this\n      // change.\n      copilotIgnore.of(null),\n      // Tell ourselves not to request a completion\n      // because of this change.\n      copilotEvent.of(null),\n      // Don't add this to history.\n      Transaction.addToHistory.of(false),\n    ],\n  });\n\n  let lastIndex = 0;\n  reverseReverseChangeSet?.iterChangedRanges((_fromA, _toA, _fromB, toB) => {\n    lastIndex = toB;\n  });\n\n  view.dispatch({\n    changes: reverseReverseChangeSet,\n    selection: EditorSelection.cursor(lastIndex),\n    annotations: [copilotEvent.of(null), Transaction.addToHistory.of(true)],\n  });\n\n  return true;\n}\n\n/**\n * Cycle through suggested AI completed code.\n */\nexport const nextSuggestionCommand: Command = (view: EditorView) => {\n  const { state } = view;\n  // We delete the suggestion, then carry through with the original keypress\n  const stateField = state.field(completionDecoration);\n\n  if (!stateField) {\n    return false;\n  }\n\n  const { changeSpecs } = stateField;\n\n  if (changeSpecs.length < 2) {\n    return false;\n  }\n\n  // Loop through next suggestion.\n  const index = (stateField.index + 1) % changeSpecs.length;\n  const nextSpec = changeSpecs.at(index);\n  if (!nextSpec) {\n    return false;\n  }\n\n  /**\n   * First, get the original document, by applying the stored\n   * reverse changeset against the currently-displayed document.\n   */\n  const originalDocument = stateField.reverseChangeSet.apply(state.doc);\n\n  /**\n   * Get the changeset that we will apply that will\n   *\n   * 1. Reverse the currently-displayed suggestion, to get us back to\n   *    the original document\n   * 2. Apply the next suggestion.\n   *\n   * It does both in the same changeset, so there is no flickering.\n   */\n  const reverseCurrentSuggestionAndApplyNext = ChangeSet.of(\n    stateField.reverseChangeSet,\n    state.doc.length,\n  ).compose(ChangeSet.of(nextSpec, originalDocument.length));\n\n  /**\n   * Generate the next changeset\n   */\n  const nextSet = ChangeSet.of(nextSpec, originalDocument.length);\n  const reverseChangeSet = nextSet.invert(originalDocument);\n\n  view.dispatch({\n    changes: reverseCurrentSuggestionAndApplyNext,\n    effects: addSuggestions.of({\n      index,\n      reverseChangeSet,\n      changeSpecs,\n    }),\n    annotations: [\n      // Tell upstream integrations to ignore this\n      // change.\n      copilotIgnore.of(null),\n      // Tell ourselves not to request a completion\n      // because of this change.\n      copilotEvent.of(null),\n      // Don't add this to history.\n      Transaction.addToHistory.of(false),\n    ],\n  });\n\n  return true;\n};\n\n/**\n * Rejecting a suggestion: this looks at the currently-shown suggestion\n * and reverses it, clears the suggestion, and makes sure\n * that we don't add that clearing transaction to history and we don't\n * trigger a new suggestion because of it.\n */\nexport function rejectSuggestionCommand(view: EditorView) {\n  // We delete the suggestion, then carry through with the original keypress\n  const stateField = view.state.field(completionDecoration);\n\n  if (!stateField) {\n    return false;\n  }\n\n  view.dispatch({\n    changes: stateField.reverseChangeSet,\n    effects: clearSuggestion.of(null),\n    annotations: [\n      // Tell upstream integrations to ignore this\n      // change. This was never really in the document\n      // in the first place - we were just showing ghost text.\n      copilotIgnore.of(null),\n      copilotEvent.of(null),\n      Transaction.addToHistory.of(false),\n    ],\n  });\n\n  return false;\n}\n\n// TODO: this isn't full reimplemented yet.\nexport function sameKeyCommand(view: EditorView, key: string) {\n  // When we type a key that is the same as the first letter of the suggestion, we delete the first letter of the suggestion and carry through with the original keypress\n  const stateField = view.state.field(completionDecoration);\n\n  if (!stateField) {\n    return false;\n  }\n\n  if (key === \"Tab\") {\n    return acceptSuggestionCommand(view);\n  }\n  return rejectSuggestionCommand(view);\n}\n", "import { copilotPlugin, codeiumOtherDocumentsConfig, Language } from '@valtown/codemirror-codeium';\nimport type { CodeiumEditor } from './codemirror';\n\nconst EDITOR_API_KEY = 'd49954eb-cfba-4992-980f-d8fb37f0e942';\n\nexport const codeium = (editors: CodeiumEditor[], mapLanguage: (lang: string) => string) => [\n  codeiumOtherDocumentsConfig.of({\n    override: () =>\n      editors.map((editor) => {\n        const language = editor.getLanguage();\n        return {\n          absolutePath: `https://livecodes.io/v/${editor.editorId}/${language}`,\n          text: editor.getValue(),\n          language:\n            Language[mapLanguage(language).toUpperCase() as keyof typeof Language] ||\n            Language.TYPESCRIPT,\n          editorLanguage: mapLanguage(language),\n        };\n      }),\n  }),\n  copilotPlugin({\n    apiKey: EDITOR_API_KEY,\n  }),\n];\n"],
  "mappings": "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",
  "names": ["EditorView", "keymap", "Prec", "StateField", "Decoration", "EditorView", "StateEffect", "addSuggestions", "acceptSuggestion", "clearSuggestion", "Facet", "combineConfig", "assert", "condition", "msg", "FLOAT32_MAX", "FLOAT32_MIN", "UINT32_MAX", "INT32_MAX", "INT32_MIN", "assertInt32", "arg", "assertUInt32", "assertFloat32", "enumTypeSymbol", "getEnumType", "enumObject", "assert", "setEnumType", "typeName", "values", "opt", "makeEnumType", "v", "_opt", "names", "numbers", "normalValues", "value", "n", "normalizeEnumValue", "name", "no", "makeEnum", "Message", "other", "bytes", "options", "type", "format", "opt", "jsonValue", "jsonString", "json", "e", "bin", "writer", "_a", "value", "makeMessageType", "runtime", "typeName", "fields", "opt", "_a", "localName", "type", "data", "Message", "bytes", "options", "jsonValue", "jsonString", "a", "b", "varint64read", "lowBits", "highBits", "shift", "b", "middleByte", "varint64write", "lo", "hi", "bytes", "i", "hasNext", "byte", "splitBits", "hasMoreBits", "TWO_PWR_32_DBL", "int64FromString", "dec", "minus", "base", "add1e6digit", "begin", "end", "digit1e6", "negate", "newBits", "int64ToString", "bits", "negative", "result", "uInt64ToString", "toUnsigned", "low", "mid", "high", "digitA", "digitB", "digitC", "decimalFrom1e7WithLeadingZeros", "digit1e7", "partial", "varint32write", "value", "varint32read", "readBytes", "makeInt64Support", "dv", "MIN", "MAX", "UMIN", "UMAX", "value", "bi", "lo", "hi", "assertInt64String", "assert", "assertUInt64String", "int64FromString", "int64ToString", "uInt64ToString", "protoInt64", "ScalarType", "LongType", "scalarEquals", "type", "a", "b", "ScalarType", "i", "scalarZeroValue", "longType", "protoInt64", "isScalarZeroValue", "value", "WireType", "BinaryWriter", "textEncoder", "len", "i", "bytes", "offset", "chunk", "prev", "fieldNo", "type", "value", "assertUInt32", "assertInt32", "varint32write", "assertFloat32", "view", "tc", "protoInt64", "varint64write", "sign", "lo", "hi", "BinaryReader", "buf", "textDecoder", "varint64read", "varint32read", "tag", "wireType", "start", "t", "zze", "s", "makeExtension", "runtime", "typeName", "extendee", "field", "fi", "i", "createExtensionContainer", "extension", "localName", "container", "initExtensionField", "ext", "scalarZeroValue", "T", "value", "filterUnknownFields", "unknownFields", "uf", "encTable", "decTable", "i", "protoBase64", "base64Str", "es", "bytes", "bytePos", "groupPos", "b", "p", "base64", "getExtension", "message", "extension", "options", "assertExtendee", "opt", "ufs", "filterUnknownFields", "container", "get", "createExtensionContainer", "uf", "setExtension", "value", "readOpt", "writeOpt", "hasExtension", "writer", "f", "reader", "no", "wireType", "data", "hasExtension", "message", "extension", "messageType", "uf", "assertExtendee", "assert", "isFieldSet", "field", "target", "localName", "isScalarZeroValue", "clearField", "implicitPresence", "scalarZeroValue", "isMessage", "arg", "type", "Message", "m", "actualType", "wrapField", "type", "value", "isMessage", "wktWrapperToScalarType", "ScalarType", "jsonReadDefaults", "jsonWriteDefaults", "makeReadOptions", "options", "makeWriteOptions", "tokenNull", "tokenIgnoredUnknownEnum", "makeJsonFormat", "type", "json", "message", "debugJsonValue", "oneofSeen", "registry", "jsonKey", "jsonValue", "field", "seen", "readField", "found", "ext", "container", "get", "createExtensionContainer", "setExtension", "isFieldSet", "canEmitFieldDefaultValue", "value", "writeField", "uf", "hasExtension", "getExtension", "e", "m", "r", "longType", "readScalar", "LongType", "emitDefaultValues", "isScalarZeroValue", "writeScalar", "target", "parentType", "localName", "assert", "targetArray", "jsonItem", "enumValue", "readEnum", "targetMap", "jsonMapKey", "jsonMapValue", "key", "readMapKey", "messageType", "currentValue", "isMessage", "clearField", "scalarValue", "ScalarType", "nullAsZeroValue", "scalarZeroValue", "float", "assertFloat32", "int32", "assertUInt32", "assertInt32", "long", "protoInt64", "uLong", "protoBase64", "ignoreUnknownFields", "jsonObj", "entries", "entryKey", "entryValue", "enumType", "writeEnum", "jsonArr", "i", "wrapField", "enumAsInteger", "_a", "val", "unknownFieldsSymbol", "readDefaults", "bytes", "BinaryReader", "writeDefaults", "BinaryWriter", "makeReadOptions", "options", "makeWriteOptions", "makeBinaryFormat", "message", "_a", "writer", "c", "f", "no", "wireType", "data", "m", "reader", "lengthOrEndTagFieldNo", "delimitedMessageEncoding", "type", "end", "fieldNo", "WireType", "field", "readField", "isFieldSet", "value", "writeField", "target", "repeated", "localName", "scalarType", "ScalarType", "read", "readScalar", "readScalarLTString", "arr", "e", "messageType", "readMessageField", "isMessage", "mapKey", "mapVal", "readMapEntry", "format", "delimited", "length", "key", "val", "scalarZeroValue", "LongType", "v", "assert", "writePacked", "item", "writeScalar", "writeMessageField", "writeMapEntry", "keyValue", "wrapField", "method", "scalarTypeInfo", "i", "makeUtilCommon", "setEnumType", "source", "target", "type", "member", "localName", "t", "s", "sk", "sourceField", "val", "isMessage", "ScalarType", "toU8Arr", "copy", "k", "v", "messageType", "mt", "a", "b", "m", "va", "vb", "i", "scalarEquals", "keys", "scalarType", "message", "any", "cloneSingularField", "key", "uf", "value", "c", "input", "makeProtoRuntime", "syntax", "newFieldList", "initFields", "makeJsonFormat", "makeBinaryFormat", "makeUtilCommon", "typeName", "fields", "opt", "makeMessageType", "makeEnum", "makeEnumType", "getEnumType", "extendee", "field", "makeExtension", "InternalFieldList", "fields", "normalizer", "jsonName", "t", "f", "fieldNo", "a", "b", "o", "localFieldName", "protoName", "inOneof", "name", "protoCamelCase", "safeObjectProperty", "safeMessageProperty", "localOneofName", "fieldJsonName", "protoCamelCase", "snakeCase", "capNext", "b", "i", "c", "reservedObjectProperties", "reservedMessageProperties", "fallback", "name", "safeMessageProperty", "safeObjectProperty", "InternalOneofInfo", "name", "localOneofName", "field", "assert", "localName", "i", "normalizeFieldInfos", "fieldInfos", "packedByDefault", "_a", "_b", "_c", "_d", "_e", "_f", "r", "o", "field", "f", "localFieldName", "fieldJsonName", "LongType", "ScalarType", "ooname", "InternalOneofInfo", "proto3", "makeProtoRuntime", "fields", "InternalFieldList", "source", "normalizeFieldInfos", "target", "member", "name", "t", "scalarZeroValue", "proto2", "makeProtoRuntime", "fields", "InternalFieldList", "source", "normalizeFieldInfos", "target", "member", "name", "t", "protoDouble", "MethodKind", "MethodIdempotency", "Edition", "proto2", "FileDescriptorSet", "_FileDescriptorSet", "Message", "data", "bytes", "options", "jsonValue", "jsonString", "a", "b", "FileDescriptorProto", "_FileDescriptorProto", "DescriptorProto", "EnumDescriptorProto", "ServiceDescriptorProto", "FieldDescriptorProto", "FileOptions", "SourceCodeInfo", "_DescriptorProto", "DescriptorProto_ExtensionRange", "OneofDescriptorProto", "MessageOptions", "DescriptorProto_ReservedRange", "_DescriptorProto_ExtensionRange", "ExtensionRangeOptions", "_DescriptorProto_ReservedRange", "_ExtensionRangeOptions", "UninterpretedOption", "ExtensionRangeOptions_Declaration", "FeatureSet", "ExtensionRangeOptions_VerificationState", "_ExtensionRangeOptions_Declaration", "_FieldDescriptorProto", "FieldDescriptorProto_Label", "FieldDescriptorProto_Type", "FieldOptions", "_OneofDescriptorProto", "OneofOptions", "_EnumDescriptorProto", "EnumValueDescriptorProto", "EnumOptions", "EnumDescriptorProto_EnumReservedRange", "_EnumDescriptorProto_EnumReservedRange", "_EnumValueDescriptorProto", "EnumValueOptions", "_ServiceDescriptorProto", "MethodDescriptorProto", "ServiceOptions", "_MethodDescriptorProto", "MethodOptions", "_FileOptions", "FileOptions_OptimizeMode", "_MessageOptions", "_FieldOptions", "FieldOptions_CType", "FieldOptions_JSType", "FieldOptions_OptionRetention", "FieldOptions_OptionTargetType", "FieldOptions_EditionDefault", "_FieldOptions_EditionDefault", "_OneofOptions", "_EnumOptions", "_EnumValueOptions", "_ServiceOptions", "_MethodOptions", "MethodOptions_IdempotencyLevel", "_UninterpretedOption", "UninterpretedOption_NamePart", "_UninterpretedOption_NamePart", "_FeatureSet", "FeatureSet_FieldPresence", "FeatureSet_EnumType", "FeatureSet_RepeatedFieldEncoding", "FeatureSet_Utf8Validation", "FeatureSet_MessageEncoding", "FeatureSet_JsonFormat", "FeatureSetDefaults", "_FeatureSetDefaults", "FeatureSetDefaults_FeatureSetEditionDefault", "_FeatureSetDefaults_FeatureSetEditionDefault", "_SourceCodeInfo", "SourceCodeInfo_Location", "_SourceCodeInfo_Location", "GeneratedCodeInfo", "_GeneratedCodeInfo", "GeneratedCodeInfo_Annotation", "_GeneratedCodeInfo_Annotation", "GeneratedCodeInfo_Annotation_Semantic", "fieldTypeToScalarType", "FieldDescriptorProto_Type", "ScalarType", "FieldNumber", "Timestamp", "_Timestamp", "Message", "data", "protoInt64", "proto3", "json", "options", "matches", "ms", "z", "nanosStr", "date", "bytes", "jsonValue", "jsonString", "a", "b", "Duration", "_Duration", "Message", "data", "protoInt64", "proto3", "json", "options", "match", "longSeconds", "nanosStr", "text", "bytes", "jsonValue", "jsonString", "a", "b", "Any", "_Any", "Message", "data", "proto3", "options", "_a", "typeName", "messageType", "json", "typeUrl", "message", "copy", "target", "registry", "type", "name", "url", "slash", "any", "bytes", "jsonValue", "jsonString", "a", "b", "Empty", "_Empty", "Message", "data", "proto3", "bytes", "options", "jsonValue", "jsonString", "a", "b", "FieldMask", "_FieldMask", "Message", "data", "proto3", "options", "protoCamelCase", "snakeCase", "capNext", "b", "i", "c", "p", "json", "camelToSnake", "str", "sc", "letter", "bytes", "jsonValue", "jsonString", "a", "NullValue", "proto3", "Struct", "_Struct", "Message", "data", "options", "json", "k", "v", "Value", "bytes", "jsonValue", "jsonString", "a", "b", "_Value", "ListValue", "_ListValue", "e", "DoubleValue", "_DoubleValue", "Message", "data", "proto3", "options", "ScalarType", "json", "e", "m", "bytes", "jsonValue", "jsonString", "a", "b", "value", "FloatValue", "_FloatValue", "Int64Value", "_Int64Value", "protoInt64", "UInt64Value", "_UInt64Value", "Int32Value", "_Int32Value", "UInt32Value", "_UInt32Value", "BoolValue", "_BoolValue", "StringValue", "_StringValue", "BytesValue", "_BytesValue", "wkEnums", "getEnumType", "NullValue", "Version", "_Version", "Message", "data", "proto2", "bytes", "options", "jsonValue", "jsonString", "a", "b", "CodeGeneratorRequest", "_CodeGeneratorRequest", "FileDescriptorProto", "CodeGeneratorResponse", "_CodeGeneratorResponse", "CodeGeneratorResponse_File", "CodeGeneratorResponse_Feature", "_CodeGeneratorResponse_File", "GeneratedCodeInfo", "SourceContext", "_SourceContext", "Message", "data", "proto3", "bytes", "options", "jsonValue", "jsonString", "a", "b", "Syntax", "proto3", "Type", "_Type", "Message", "data", "bytes", "options", "jsonValue", "jsonString", "a", "b", "Field", "Option", "SourceContext", "_Field", "Field_Kind", "Field_Cardinality", "Enum", "_Enum", "EnumValue", "_EnumValue", "_Option", "Any", "Api", "_Api", "Message", "data", "Syntax", "proto3", "bytes", "options", "jsonValue", "jsonString", "a", "b", "Method", "Option", "SourceContext", "Mixin", "_Method", "_Mixin", "ExperimentKey", "proto3", "AuthSource", "EventType", "CompletionSource", "Language", "_Completion", "Message", "data", "__publicField", "protoInt64", "bytes", "options", "jsonValue", "jsonString", "a", "b", "Completion", "_Metadata", "Metadata", "_EditorOptions", "EditorOptions", "_Event", "Event", "WidgetType", "DefaultCycleWidget", "WidgetType", "index", "total", "__publicField", "wrap", "words", "key", "codeiumConfig", "Facet", "configs", "combineConfig", "Language", "DefaultCycleWidget", "codeiumOtherDocumentsConfig", "ghostMark", "Decoration", "completionDecoration", "StateField", "_state", "state", "transaction", "config", "codeiumConfig", "effect", "addSuggestions", "changeSpecs", "index", "ranges", "suggestionRange", "widgetPos", "decorations", "acceptSuggestion", "clearSuggestion", "field", "EditorView", "value", "CompletionContext", "completionStatus", "ChangeSet", "Transaction", "EditorView", "Code", "codeToString", "value", "name", "Code", "c", "stringToCode", "codeFromString", "ConnectError", "_ConnectError", "message", "code", "Code", "metadata", "outgoingDetails", "cause", "createMessage", "reason", "v", "typeOrRegistry", "registry", "typeName", "details", "data", "type", "codeToString", "appendHeaders", "headers", "h", "e", "value", "key", "makeAnyClient", "service", "createMethod", "client", "localName", "methodInfo", "method", "createEnvelopeReadableStream", "stream", "reader", "buffer", "append", "chunk", "n", "controller", "header", "length", "i", "result", "ConnectError", "Code", "data", "encodeEnvelope", "flags", "data", "bytes", "v", "__asyncValues", "o", "m", "i", "verb", "n", "v", "resolve", "reject", "settle", "d", "__await", "__asyncGenerator", "thisArg", "_arguments", "generator", "g", "q", "awaitReturn", "f", "a", "b", "resume", "step", "e", "r", "fulfill", "value", "__asyncDelegator", "p", "createAsyncIterable", "items", "__asyncGenerator", "__await", "__asyncDelegator", "__asyncValues", "__asyncValues", "o", "m", "i", "verb", "n", "v", "resolve", "reject", "settle", "d", "__await", "__asyncDelegator", "p", "e", "f", "__asyncGenerator", "thisArg", "_arguments", "generator", "g", "q", "awaitReturn", "a", "b", "resume", "step", "r", "fulfill", "value", "createPromiseClient", "service", "transport", "makeAnyClient", "method", "MethodKind", "createUnaryFn", "createServerStreamingFn", "createClientStreamingFn", "createBiDiStreamingFn", "input", "options", "_a", "_b", "response", "handleStreamResponse", "createAsyncIterable", "request", "e_1", "_c", "_d", "_e", "singleMessage", "_f", "_g", "_h", "e_1_1", "ConnectError", "Code", "stream", "it", "createLinkedAbortController", "signals", "controller", "sa", "s", "signal", "onAbort", "getAbortSignalReason", "createDeadlineSignal", "timeoutMs", "listener", "ConnectError", "Code", "timeoutId", "e", "createContextValues", "key", "value", "Status", "_Status", "Message", "data", "proto3", "bytes", "options", "jsonValue", "jsonString", "a", "b", "Any", "createMethodUrl", "baseUrl", "service", "method", "s", "m", "normalize", "type", "message", "normalizeIterable", "messageType", "input", "transform", "result", "it", "res", "e", "v", "applyInterceptors", "next", "interceptors", "_a", "i", "getJsonOptions", "options", "_a", "o", "createClientMethodSerializers", "method", "useBinaryFormat", "jsonOptions", "binaryOptions", "input", "createBinarySerialization", "createJsonSerialization", "createBinarySerialization", "messageType", "options", "data", "e", "m", "ConnectError", "Code", "createJsonSerialization", "_a", "_b", "textEncoder", "textDecoder", "o", "getJsonOptions", "json", "contentTypeRegExp", "contentTypeUnaryProto", "contentTypeUnaryJson", "contentTypeStreamProto", "contentTypeStreamJson", "parseContentType", "contentType", "match", "contentTypeRegExp", "stream", "binary", "errorFromJson", "jsonValue", "metadata", "fallback", "value", "key", "code", "codeFromString", "message", "error", "ConnectError", "detail", "protoBase64", "endStreamFlag", "endStreamFromJson", "data", "parseErr", "ConnectError", "Code", "jsonValue", "metadata", "key", "values", "value", "error", "errorFromJson", "headerContentType", "headerUnaryContentLength", "headerUnaryEncoding", "headerUnaryAcceptEncoding", "headerTimeout", "headerProtocolVersion", "headerUserAgent", "codeFromHttpStatus", "httpStatus", "Code", "trailerDemux", "header", "h", "t", "value", "key", "protocolVersion", "requestHeader", "methodKind", "useBinaryFormat", "timeoutMs", "userProvidedHeaders", "setUserAgent", "result", "headerTimeout", "headerContentType", "MethodKind", "contentTypeUnaryProto", "contentTypeUnaryJson", "contentTypeStreamProto", "contentTypeStreamJson", "headerProtocolVersion", "protocolVersion", "headerUserAgent", "validateResponse", "methodKind", "status", "headers", "mimeType", "parsedType", "parseContentType", "errorFromStatus", "ConnectError", "codeFromHttpStatus", "MethodKind", "contentTypePrefix", "encodeMessageForUrl", "message", "useBase64", "protoBase64", "transformConnectPostToGetRequest", "request", "query", "protocolVersion", "contentType", "headerContentType", "compression", "headerUnaryEncoding", "url", "header", "headerProtocolVersion", "headerUnaryContentLength", "headerUnaryAcceptEncoding", "h", "runUnaryCall", "opt", "next", "applyInterceptors", "signal", "abort", "done", "setupSignal", "req", "normalize", "res", "runStreamingCall", "normalizeIterable", "doneCalled", "_a", "_b", "it", "r", "cleanup", "createDeadlineSignal", "controller", "createLinkedAbortController", "reason", "e", "ConnectError", "getAbortSignalReason", "CodeiumState", "proto3", "LineType", "CompletionPartType", "_MultilineConfig", "Message", "data", "__publicField", "bytes", "options", "jsonValue", "jsonString", "a", "b", "MultilineConfig", "_GetCompletionsRequest", "Metadata", "Document", "EditorOptions", "ExperimentConfig", "GetCompletionsRequest", "_GetCompletionsResponse", "State", "CompletionItem", "GetCompletionsResponse", "_AcceptCompletionRequest", "AcceptCompletionRequest", "_AcceptCompletionResponse", "AcceptCompletionResponse", "_GetAuthTokenRequest", "GetAuthTokenRequest", "_GetAuthTokenResponse", "GetAuthTokenResponse", "_DocumentPosition", "protoInt64", "DocumentPosition", "_Document", "Language", "_ExperimentConfig", "ExperimentKey", "_State", "_Range", "Range", "_Suffix", "Suffix", "_CompletionPart", "CompletionPart", "_CompletionItem", "CompletionSource", "Completion", "LanguageServerService", "GetCompletionsRequest", "GetCompletionsResponse", "MethodKind", "AcceptCompletionRequest", "AcceptCompletionResponse", "GetAuthTokenRequest", "GetAuthTokenResponse", "assertFetchApi", "__await", "v", "__asyncGenerator", "thisArg", "_arguments", "generator", "g", "i", "q", "verb", "awaitReturn", "f", "reject", "n", "a", "b", "resume", "step", "e", "settle", "r", "fulfill", "value", "createConnectTransport", "options", "_a", "assertFetchApi", "useBinaryFormat", "service", "method", "signal", "timeoutMs", "header", "message", "contextValues", "serialize", "parse", "createClientMethodSerializers", "runUnaryCall", "createMethodUrl", "requestHeader", "createContextValues", "req", "useGet", "MethodIdempotency", "body", "transformConnectPostToGetRequest", "response", "isUnaryError", "unaryError", "validateResponse", "errorFromJson", "appendHeaders", "trailerDemux", "demuxedHeader", "demuxedTrailer", "getJsonOptions", "input", "parseResponseBody", "trailerTarget", "reader", "createEnvelopeReadableStream", "endStreamReceived", "result", "flags", "data", "endStreamFlag", "endStream", "endStreamFromJson", "error", "key", "createRequestBody", "MethodKind", "encodeEnvelope", "runStreamingCall", "fRes", "trailer", "transport", "createConnectTransport", "client", "createPromiseClient", "LanguageServerService", "sessionId", "getCodeiumCompletions", "text", "cursorOffset", "config", "otherDocuments", "completionsToChangeSpec", "completions", "item", "combinedOffset", "part", "offset", "res", "Annotation", "copilotEvent", "copilotIgnore", "shouldRequestCompletion", "update", "tr", "e", "acceptSuggestion", "clearSuggestion", "shouldIgnoreUpdate", "completionDecoration", "completionStatus", "copilotEvent", "completionRequester", "timeout", "lastPos", "EditorView", "config", "codeiumConfig", "override", "codeiumOtherDocumentsConfig", "state", "pos", "CompletionContext", "source", "otherDocuments", "completionResult", "getCodeiumCompletions", "changeSpecs", "completionsToChangeSpec", "index", "firstSpec", "insertChangeSet", "ChangeSet", "reverseChangeSet", "addSuggestions", "copilotIgnore", "Transaction", "error", "resolve", "Transaction", "EditorSelection", "ChangeSet", "acceptSuggestionCommand", "view", "stateField", "completionDecoration", "reverseReverseChangeSet", "acceptSuggestion", "copilotIgnore", "copilotEvent", "Transaction", "lastIndex", "_fromA", "_toA", "_fromB", "toB", "EditorSelection", "nextSuggestionCommand", "state", "changeSpecs", "index", "nextSpec", "originalDocument", "reverseCurrentSuggestionAndApplyNext", "ChangeSet", "reverseChangeSet", "addSuggestions", "rejectSuggestionCommand", "clearSuggestion", "sameKeyCommand", "key", "isDecorationClicked", "view", "inRange", "head", "stateField", "completionDecoration", "completionPlugin", "EditorView", "event", "sameKeyCommand", "target", "nextSuggestionCommand", "acceptSuggestionCommand", "rejectSuggestionCommand", "nextCompletionPlugin", "keymap", "viewCompletionPlugin", "update", "copilotPlugin", "config", "codeiumConfig", "completionDecoration", "Prec", "nextCompletionPlugin", "viewCompletionPlugin", "completionPlugin", "completionRequester", "EDITOR_API_KEY", "codeium", "editors", "mapLanguage", "codeiumOtherDocumentsConfig", "editor", "language", "Language", "copilotPlugin"]
}

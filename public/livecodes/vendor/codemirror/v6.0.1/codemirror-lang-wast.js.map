{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/lang-wast/dist/index.js"],
  "sourcesContent": ["import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\nimport { styleTags, tags } from '@lezer/highlight';\nimport { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Keyword = {__proto__:null,anyref:34, dataref:34, eqref:34, externref:34, i31ref:34, funcref:34, i8:34, i16:34, i32:34, i64:34, f32:34, f64:34};\nconst parser = /*@__PURE__*/LRParser.deserialize({\n  version: 14,\n  states: \"!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h\",\n  stateData: \"!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O\",\n  goto: \"xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV\",\n  nodeNames: \"\u26A0 LineComment BlockComment Module ) ( App Identifier Type Keyword Number String\",\n  maxTerm: 17,\n  nodeProps: [\n    [\"openedBy\", 4,\"(\"],\n    [\"closedBy\", 5,\")\"],\n    [\"group\", -6,6,7,8,9,10,11,\"Expression\"]\n  ],\n  skippedNodes: [0,1,2],\n  repeatNodeCount: 1,\n  tokenData: \"/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^\",\n  tokenizers: [0],\n  topRules: {\"Module\":[0,3]},\n  specialized: [{term: 9, get: value => spec_Keyword[value] || -1}],\n  tokenPrec: 0\n});\n\nconst wastLanguage = /*@__PURE__*/LRLanguage.define({\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                App: /*@__PURE__*/delimitedIndent({ closing: \")\", align: false })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                App: foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            }),\n            /*@__PURE__*/styleTags({\n                Keyword: tags.keyword,\n                Type: tags.typeName,\n                Number: tags.number,\n                String: tags.string,\n                Identifier: tags.variableName,\n                LineComment: tags.lineComment,\n                BlockComment: tags.blockComment,\n                \"( )\": tags.paren\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \";;\", block: { open: \"(;\", close: \";)\" } },\n        closeBrackets: { brackets: [\"(\", '\"'] }\n    }\n});\nfunction wast() {\n    return new LanguageSupport(wastLanguage);\n}\n\nexport { wast, wastLanguage };\n"],
  "mappings": "AAAA,OAAS,cAAAA,EAAY,kBAAAC,EAAgB,mBAAAC,EAAiB,gBAAAC,EAAc,cAAAC,EAAY,mBAAAC,MAAuB,uBACvG,OAAS,aAAAC,EAAW,QAAAC,MAAY,mBAChC,OAAS,YAAAC,MAAgB,YAGzB,IAAMC,EAAe,CAAC,UAAU,KAAK,OAAO,GAAI,QAAQ,GAAI,MAAM,GAAI,UAAU,GAAI,OAAO,GAAI,QAAQ,GAAI,GAAG,GAAI,IAAI,GAAI,IAAI,GAAI,IAAI,GAAI,IAAI,GAAI,IAAI,EAAE,EAClJC,EAAsBF,EAAS,YAAY,CAC/C,QAAS,GACT,OAAQ,2GACR,UAAW,oDACX,KAAM,4CACN,UAAW,uFACX,QAAS,GACT,UAAW,CACT,CAAC,WAAY,EAAE,GAAG,EAClB,CAAC,WAAY,EAAE,GAAG,EAClB,CAAC,QAAS,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,YAAY,CACzC,EACA,aAAc,CAAC,EAAE,EAAE,CAAC,EACpB,gBAAiB,EACjB,UAAW,wkCACX,WAAY,CAAC,CAAC,EACd,SAAU,CAAC,OAAS,CAAC,EAAE,CAAC,CAAC,EACzB,YAAa,CAAC,CAAC,KAAM,EAAG,IAAKG,GAASF,EAAaE,CAAK,GAAK,EAAE,CAAC,EAChE,UAAW,CACb,CAAC,EAEKC,EAA4BZ,EAAW,OAAO,CAChD,OAAqBU,EAAO,UAAU,CAClC,MAAO,CACUT,EAAe,IAAI,CAC5B,IAAkBC,EAAgB,CAAE,QAAS,IAAK,MAAO,EAAM,CAAC,CACpE,CAAC,EACYC,EAAa,IAAI,CAC1B,IAAKC,EACL,aAAaS,EAAM,CAAE,MAAO,CAAE,KAAMA,EAAK,KAAO,EAAG,GAAIA,EAAK,GAAK,CAAE,CAAG,CAC1E,CAAC,EACYP,EAAU,CACnB,QAASC,EAAK,QACd,KAAMA,EAAK,SACX,OAAQA,EAAK,OACb,OAAQA,EAAK,OACb,WAAYA,EAAK,aACjB,YAAaA,EAAK,YAClB,aAAcA,EAAK,aACnB,MAAOA,EAAK,KAChB,CAAC,CACL,CACJ,CAAC,EACD,aAAc,CACV,cAAe,CAAE,KAAM,KAAM,MAAO,CAAE,KAAM,KAAM,MAAO,IAAK,CAAE,EAChE,cAAe,CAAE,SAAU,CAAC,IAAK,GAAG,CAAE,CAC1C,CACJ,CAAC,EACD,SAASO,GAAO,CACZ,OAAO,IAAIT,EAAgBO,CAAY,CAC3C",
  "names": ["LRLanguage", "indentNodeProp", "delimitedIndent", "foldNodeProp", "foldInside", "LanguageSupport", "styleTags", "tags", "LRParser", "spec_Keyword", "parser", "value", "wastLanguage", "tree", "wast"]
}
